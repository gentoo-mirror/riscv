From 42adc66ea79c4eef0efbc4cd7e4fcc504437e8a8 Mon Sep 17 00:00:00 2001
From: Levi Zim <rsworktech@outlook.com>
Date: Wed, 28 May 2025 20:47:55 +0800
Subject: [PATCH 2/2] xnnpack: enable riscv64 support

XNNPACK officially supports riscv64 RVV.
This CL updates generate_build_gn.py and bazelroot/BUILD for riscv64
support and then runs generate_build_gn.py to update BUILD.gn
---
 third_party/xnnpack/BUILD.gn             | 10142 +++++++++++++++++++--
 third_party/xnnpack/bazelroot/BUILD      |     8 +
 third_party/xnnpack/generate_build_gn.py |     5 +-
 3 files changed, 9568 insertions(+), 587 deletions(-)

diff --git a/third_party/xnnpack/BUILD.gn b/third_party/xnnpack/BUILD.gn
index 351b7d251bc73..d59a5a48578c0 100644
--- a/third_party/xnnpack/BUILD.gn
+++ b/third_party/xnnpack/BUILD.gn
@@ -1438,6 +1438,332 @@ if (current_cpu == "x64" || current_cpu == "x86") {
     ":xx-pad_arm64_standalone",
     ":xx-transposev_arm64_standalone",
   ]
+} else if (current_cpu == "riscv64") {
+  xnnpack_deps = [
+    ":configs_riscv64",
+    ":enums_riscv64",
+    ":f16-f32-vcvt_riscv64",
+    ":f16-qs8-vcvt_riscv64",
+    ":f16-qu8-vcvt_riscv64",
+    ":f16-rdminmax_riscv64",
+    ":f16-rminmax_riscv64",
+    ":f16-vapproxgelu_riscv64",
+    ":f16-vcos_riscv64",
+    ":f16-vexp_riscv64",
+    ":f16-vgelu_riscv64",
+    ":f16-vsin_riscv64",
+    ":f32-argmaxpool_arch=rv64gcv-abi=lp64d",
+    ":f32-argmaxpool_riscv64",
+    ":f32-avgpool_riscv64",
+    ":f32-conv-hwc2chw_arch=rv64gcv-abi=lp64d",
+    ":f32-conv-hwc2chw_riscv64",
+    ":f32-dwconv2d-chw_arch=rv64gcv-abi=lp64d",
+    ":f32-dwconv2d-chw_riscv64",
+    ":f32-dwconv_arch=rv64gcv-abi=lp64d",
+    ":f32-dwconv_riscv64",
+    ":f32-f16-vcvt_riscv64",
+    ":f32-gemm_arch=rv64gcv-abi=lp64d",
+    ":f32-gemm_riscv64",
+    ":f32-ibilinear-chw_riscv64",
+    ":f32-ibilinear_riscv64",
+    ":f32-igemm_arch=rv64gcv-abi=lp64d",
+    ":f32-igemm_riscv64",
+    ":f32-maxpool_arch=rv64gcv-abi=lp64d",
+    ":f32-maxpool_riscv64",
+    ":f32-qc4w-gemm_riscv64",
+    ":f32-qc8w-gemm_riscv64",
+    ":f32-qs8-vcvt_arch=rv64gcv-abi=lp64d",
+    ":f32-qs8-vcvt_riscv64",
+    ":f32-qu8-vcvt_arch=rv64gcv-abi=lp64d",
+    ":f32-qu8-vcvt_riscv64",
+    ":f32-raddstoreexpminusmax_arch=rv64gcv-abi=lp64d",
+    ":f32-raddstoreexpminusmax_riscv64",
+    ":f32-rdminmax_riscv64",
+    ":f32-rdsum_arch=rv64gcv-abi=lp64d",
+    ":f32-rdsum_riscv64",
+    ":f32-rminmax_arch=rv64gcv-abi=lp64d",
+    ":f32-rminmax_riscv64",
+    ":f32-rsum_riscv64",
+    ":f32-spmm_arch=rv64gcv-abi=lp64d",
+    ":f32-spmm_riscv64",
+    ":f32-vapproxgelu_riscv64",
+    ":f32-vbinary_arch=rv64gcv-abi=lp64d",
+    ":f32-vbinary_riscv64",
+    ":f32-vclamp_riscv64",
+    ":f32-vcmul_arch=rv64gcv-abi=lp64d",
+    ":f32-vcmul_riscv64",
+    ":f32-vcopysign_riscv64",
+    ":f32-vcos_riscv64",
+    ":f32-velu_riscv64",
+    ":f32-vexp_riscv64",
+    ":f32-vgelu_riscv64",
+    ":f32-vhswish_riscv64",
+    ":f32-vlog_riscv64",
+    ":f32-vlrelu_arch=rv64gcv-abi=lp64d",
+    ":f32-vlrelu_riscv64",
+    ":f32-vmulcaddc_riscv64",
+    ":f32-vrelu_arch=rv64gcv-abi=lp64d",
+    ":f32-vrelu_riscv64",
+    ":f32-vrnd_arch=rv64gcv-abi=lp64d",
+    ":f32-vrnd_riscv64",
+    ":f32-vrsqrt_arch=rv64gcv-abi=lp64d",
+    ":f32-vrsqrt_riscv64",
+    ":f32-vsigmoid_riscv64",
+    ":f32-vsin_riscv64",
+    ":f32-vsqrt_riscv64",
+    ":f32-vtanh_riscv64",
+    ":f32-vunary_riscv64",
+    ":operators_riscv64",
+    ":qd8-f32-qb4w-gemm_riscv64",
+    ":qd8-f32-qc4w-gemm_riscv64",
+    ":qd8-f32-qc8w-gemm_riscv64",
+    ":qd8-f32-qc8w-igemm_riscv64",
+    ":qs8-dwconv_arch=rv64gcv-abi=lp64d",
+    ":qs8-dwconv_riscv64",
+    ":qs8-f32-vcvt_arch=rv64gcv-abi=lp64d",
+    ":qs8-f32-vcvt_riscv64",
+    ":qs8-packw_riscv64",
+    ":qs8-qc4w-gemm_riscv64",
+    ":qs8-qc8w-dwconv_arch=rv64gcv-abi=lp64d",
+    ":qs8-qc8w-dwconv_riscv64",
+    ":qs8-qc8w-gemm_arch=rv64gcv-abi=lp64d",
+    ":qs8-qc8w-gemm_riscv64",
+    ":qs8-qc8w-igemm_arch=rv64gcv-abi=lp64d",
+    ":qs8-qc8w-igemm_riscv64",
+    ":qs8-qu8-packw_riscv64",
+    ":qs8-rdsum_arch=rv64gcv-abi=lp64d",
+    ":qs8-rdsum_riscv64",
+    ":qs8-rsum_arch=rv64gcv-abi=lp64d",
+    ":qs8-rsum_riscv64",
+    ":qs8-vadd_arch=rv64gcv-abi=lp64d",
+    ":qs8-vadd_riscv64",
+    ":qs8-vaddc_arch=rv64gcv-abi=lp64d",
+    ":qs8-vaddc_riscv64",
+    ":qs8-vcvt_riscv64",
+    ":qs8-vlrelu_arch=rv64gcv-abi=lp64d",
+    ":qs8-vlrelu_riscv64",
+    ":qs8-vmul_arch=rv64gcv-abi=lp64d",
+    ":qs8-vmul_riscv64",
+    ":qs8-vmulc_arch=rv64gcv-abi=lp64d",
+    ":qs8-vmulc_riscv64",
+    ":qu8-dwconv_arch=rv64gcv-abi=lp64d",
+    ":qu8-dwconv_riscv64",
+    ":qu8-f32-vcvt_arch=rv64gcv-abi=lp64d",
+    ":qu8-f32-vcvt_riscv64",
+    ":qu8-gemm_riscv64",
+    ":qu8-igemm_riscv64",
+    ":qu8-rdsum_arch=rv64gcv-abi=lp64d",
+    ":qu8-rdsum_riscv64",
+    ":qu8-rsum_arch=rv64gcv-abi=lp64d",
+    ":qu8-rsum_riscv64",
+    ":qu8-vadd_arch=rv64gcv-abi=lp64d",
+    ":qu8-vadd_riscv64",
+    ":qu8-vaddc_arch=rv64gcv-abi=lp64d",
+    ":qu8-vaddc_riscv64",
+    ":qu8-vcvt_riscv64",
+    ":qu8-vlrelu_arch=rv64gcv-abi=lp64d",
+    ":qu8-vlrelu_riscv64",
+    ":qu8-vmul_arch=rv64gcv-abi=lp64d",
+    ":qu8-vmul_riscv64",
+    ":qu8-vmulc_arch=rv64gcv-abi=lp64d",
+    ":qu8-vmulc_riscv64",
+    ":reference_riscv64",
+    ":s8-ibilinear_riscv64",
+    ":s8-maxpool_riscv64",
+    ":s8-rdminmax_riscv64",
+    ":s8-rminmax_riscv64",
+    ":s8-vclamp_arch=rv64gcv-abi=lp64d",
+    ":s8-vclamp_riscv64",
+    ":subgraph_riscv64",
+    ":tables_riscv64",
+    ":u8-ibilinear_riscv64",
+    ":u8-lut32norm_riscv64",
+    ":u8-maxpool_riscv64",
+    ":u8-rdminmax_riscv64",
+    ":u8-rminmax_riscv64",
+    ":u8-vclamp_arch=rv64gcv-abi=lp64d",
+    ":u8-vclamp_riscv64",
+    ":x16-transposec_riscv64",
+    ":x16-x32-packw_riscv64",
+    ":x24-transposec_riscv64",
+    ":x32-packw_arch=rv64gcv-abi=lp64d",
+    ":x32-packw_riscv64",
+    ":x32-transposec_arch=rv64gcv-abi=lp64d",
+    ":x32-transposec_riscv64",
+    ":x32-unpool_riscv64",
+    ":x64-transposec_riscv64",
+    ":x8-lut_riscv64",
+    ":x8-packq_riscv64",
+    ":x8-packw_riscv64",
+    ":x8-transposec_riscv64",
+    ":xx-copy_riscv64",
+    ":xx-fill_riscv64",
+    ":xx-pad_riscv64",
+    ":xx-transposev_riscv64",
+  ]
+
+  xnnpack_standalone_deps = [
+    ":configs_riscv64_standalone",
+    ":enums_riscv64_standalone",
+    ":f16-f32-vcvt_riscv64_standalone",
+    ":f16-qs8-vcvt_riscv64_standalone",
+    ":f16-qu8-vcvt_riscv64_standalone",
+    ":f16-rdminmax_riscv64_standalone",
+    ":f16-rminmax_riscv64_standalone",
+    ":f16-vapproxgelu_riscv64_standalone",
+    ":f16-vcos_riscv64_standalone",
+    ":f16-vexp_riscv64_standalone",
+    ":f16-vgelu_riscv64_standalone",
+    ":f16-vsin_riscv64_standalone",
+    ":f32-argmaxpool_arch=rv64gcv-abi=lp64d_standalone",
+    ":f32-argmaxpool_riscv64_standalone",
+    ":f32-avgpool_riscv64_standalone",
+    ":f32-conv-hwc2chw_arch=rv64gcv-abi=lp64d_standalone",
+    ":f32-conv-hwc2chw_riscv64_standalone",
+    ":f32-dwconv2d-chw_arch=rv64gcv-abi=lp64d_standalone",
+    ":f32-dwconv2d-chw_riscv64_standalone",
+    ":f32-dwconv_arch=rv64gcv-abi=lp64d_standalone",
+    ":f32-dwconv_riscv64_standalone",
+    ":f32-f16-vcvt_riscv64_standalone",
+    ":f32-gemm_arch=rv64gcv-abi=lp64d_standalone",
+    ":f32-gemm_riscv64_standalone",
+    ":f32-ibilinear-chw_riscv64_standalone",
+    ":f32-ibilinear_riscv64_standalone",
+    ":f32-igemm_arch=rv64gcv-abi=lp64d_standalone",
+    ":f32-igemm_riscv64_standalone",
+    ":f32-maxpool_arch=rv64gcv-abi=lp64d_standalone",
+    ":f32-maxpool_riscv64_standalone",
+    ":f32-qc4w-gemm_riscv64_standalone",
+    ":f32-qc8w-gemm_riscv64_standalone",
+    ":f32-qs8-vcvt_arch=rv64gcv-abi=lp64d_standalone",
+    ":f32-qs8-vcvt_riscv64_standalone",
+    ":f32-qu8-vcvt_arch=rv64gcv-abi=lp64d_standalone",
+    ":f32-qu8-vcvt_riscv64_standalone",
+    ":f32-raddstoreexpminusmax_arch=rv64gcv-abi=lp64d_standalone",
+    ":f32-raddstoreexpminusmax_riscv64_standalone",
+    ":f32-rdminmax_riscv64_standalone",
+    ":f32-rdsum_arch=rv64gcv-abi=lp64d_standalone",
+    ":f32-rdsum_riscv64_standalone",
+    ":f32-rminmax_arch=rv64gcv-abi=lp64d_standalone",
+    ":f32-rminmax_riscv64_standalone",
+    ":f32-rsum_riscv64_standalone",
+    ":f32-spmm_arch=rv64gcv-abi=lp64d_standalone",
+    ":f32-spmm_riscv64_standalone",
+    ":f32-vapproxgelu_riscv64_standalone",
+    ":f32-vbinary_arch=rv64gcv-abi=lp64d_standalone",
+    ":f32-vbinary_riscv64_standalone",
+    ":f32-vclamp_riscv64_standalone",
+    ":f32-vcmul_arch=rv64gcv-abi=lp64d_standalone",
+    ":f32-vcmul_riscv64_standalone",
+    ":f32-vcopysign_riscv64_standalone",
+    ":f32-vcos_riscv64_standalone",
+    ":f32-velu_riscv64_standalone",
+    ":f32-vexp_riscv64_standalone",
+    ":f32-vgelu_riscv64_standalone",
+    ":f32-vhswish_riscv64_standalone",
+    ":f32-vlog_riscv64_standalone",
+    ":f32-vlrelu_arch=rv64gcv-abi=lp64d_standalone",
+    ":f32-vlrelu_riscv64_standalone",
+    ":f32-vmulcaddc_riscv64_standalone",
+    ":f32-vrelu_arch=rv64gcv-abi=lp64d_standalone",
+    ":f32-vrelu_riscv64_standalone",
+    ":f32-vrnd_arch=rv64gcv-abi=lp64d_standalone",
+    ":f32-vrnd_riscv64_standalone",
+    ":f32-vrsqrt_arch=rv64gcv-abi=lp64d_standalone",
+    ":f32-vrsqrt_riscv64_standalone",
+    ":f32-vsigmoid_riscv64_standalone",
+    ":f32-vsin_riscv64_standalone",
+    ":f32-vsqrt_riscv64_standalone",
+    ":f32-vtanh_riscv64_standalone",
+    ":f32-vunary_riscv64_standalone",
+    ":operators_riscv64_standalone",
+    ":qd8-f32-qb4w-gemm_riscv64_standalone",
+    ":qd8-f32-qc4w-gemm_riscv64_standalone",
+    ":qd8-f32-qc8w-gemm_riscv64_standalone",
+    ":qd8-f32-qc8w-igemm_riscv64_standalone",
+    ":qs8-dwconv_arch=rv64gcv-abi=lp64d_standalone",
+    ":qs8-dwconv_riscv64_standalone",
+    ":qs8-f32-vcvt_arch=rv64gcv-abi=lp64d_standalone",
+    ":qs8-f32-vcvt_riscv64_standalone",
+    ":qs8-packw_riscv64_standalone",
+    ":qs8-qc4w-gemm_riscv64_standalone",
+    ":qs8-qc8w-dwconv_arch=rv64gcv-abi=lp64d_standalone",
+    ":qs8-qc8w-dwconv_riscv64_standalone",
+    ":qs8-qc8w-gemm_arch=rv64gcv-abi=lp64d_standalone",
+    ":qs8-qc8w-gemm_riscv64_standalone",
+    ":qs8-qc8w-igemm_arch=rv64gcv-abi=lp64d_standalone",
+    ":qs8-qc8w-igemm_riscv64_standalone",
+    ":qs8-qu8-packw_riscv64_standalone",
+    ":qs8-rdsum_arch=rv64gcv-abi=lp64d_standalone",
+    ":qs8-rdsum_riscv64_standalone",
+    ":qs8-rsum_arch=rv64gcv-abi=lp64d_standalone",
+    ":qs8-rsum_riscv64_standalone",
+    ":qs8-vadd_arch=rv64gcv-abi=lp64d_standalone",
+    ":qs8-vadd_riscv64_standalone",
+    ":qs8-vaddc_arch=rv64gcv-abi=lp64d_standalone",
+    ":qs8-vaddc_riscv64_standalone",
+    ":qs8-vcvt_riscv64_standalone",
+    ":qs8-vlrelu_arch=rv64gcv-abi=lp64d_standalone",
+    ":qs8-vlrelu_riscv64_standalone",
+    ":qs8-vmul_arch=rv64gcv-abi=lp64d_standalone",
+    ":qs8-vmul_riscv64_standalone",
+    ":qs8-vmulc_arch=rv64gcv-abi=lp64d_standalone",
+    ":qs8-vmulc_riscv64_standalone",
+    ":qu8-dwconv_arch=rv64gcv-abi=lp64d_standalone",
+    ":qu8-dwconv_riscv64_standalone",
+    ":qu8-f32-vcvt_arch=rv64gcv-abi=lp64d_standalone",
+    ":qu8-f32-vcvt_riscv64_standalone",
+    ":qu8-gemm_riscv64_standalone",
+    ":qu8-igemm_riscv64_standalone",
+    ":qu8-rdsum_arch=rv64gcv-abi=lp64d_standalone",
+    ":qu8-rdsum_riscv64_standalone",
+    ":qu8-rsum_arch=rv64gcv-abi=lp64d_standalone",
+    ":qu8-rsum_riscv64_standalone",
+    ":qu8-vadd_arch=rv64gcv-abi=lp64d_standalone",
+    ":qu8-vadd_riscv64_standalone",
+    ":qu8-vaddc_arch=rv64gcv-abi=lp64d_standalone",
+    ":qu8-vaddc_riscv64_standalone",
+    ":qu8-vcvt_riscv64_standalone",
+    ":qu8-vlrelu_arch=rv64gcv-abi=lp64d_standalone",
+    ":qu8-vlrelu_riscv64_standalone",
+    ":qu8-vmul_arch=rv64gcv-abi=lp64d_standalone",
+    ":qu8-vmul_riscv64_standalone",
+    ":qu8-vmulc_arch=rv64gcv-abi=lp64d_standalone",
+    ":qu8-vmulc_riscv64_standalone",
+    ":reference_riscv64_standalone",
+    ":s8-ibilinear_riscv64_standalone",
+    ":s8-maxpool_riscv64_standalone",
+    ":s8-rdminmax_riscv64_standalone",
+    ":s8-rminmax_riscv64_standalone",
+    ":s8-vclamp_arch=rv64gcv-abi=lp64d_standalone",
+    ":s8-vclamp_riscv64_standalone",
+    ":subgraph_riscv64_standalone",
+    ":tables_riscv64_standalone",
+    ":u8-ibilinear_riscv64_standalone",
+    ":u8-lut32norm_riscv64_standalone",
+    ":u8-maxpool_riscv64_standalone",
+    ":u8-rdminmax_riscv64_standalone",
+    ":u8-rminmax_riscv64_standalone",
+    ":u8-vclamp_arch=rv64gcv-abi=lp64d_standalone",
+    ":u8-vclamp_riscv64_standalone",
+    ":x16-transposec_riscv64_standalone",
+    ":x16-x32-packw_riscv64_standalone",
+    ":x24-transposec_riscv64_standalone",
+    ":x32-packw_arch=rv64gcv-abi=lp64d_standalone",
+    ":x32-packw_riscv64_standalone",
+    ":x32-transposec_arch=rv64gcv-abi=lp64d_standalone",
+    ":x32-transposec_riscv64_standalone",
+    ":x32-unpool_riscv64_standalone",
+    ":x64-transposec_riscv64_standalone",
+    ":x8-lut_riscv64_standalone",
+    ":x8-packq_riscv64_standalone",
+    ":x8-packw_riscv64_standalone",
+    ":x8-transposec_riscv64_standalone",
+    ":xx-copy_riscv64_standalone",
+    ":xx-fill_riscv64_standalone",
+    ":xx-pad_riscv64_standalone",
+    ":xx-transposev_riscv64_standalone",
+  ]
 } else {
   xnnpack_deps = []
   xnnpack_standalone_deps = []
@@ -37024,12 +37350,8456 @@ if (current_cpu == "arm64") {
     }
   }
 
-  source_set("qs8-packw_arm64") {
+  source_set("qs8-packw_arm64") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/qs8-packw/gen/qs8-packw-x16c8-gemm-goi-scalar.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("qs8-packw_arm64_standalone") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/qs8-packw/gen/qs8-packw-x16c8-gemm-goi-scalar.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("qs8-qc4w-gemm_arch=armv8.2-a+fp16+dotprod") {
+    cflags = [ "-march=armv8.2-a+fp16+dotprod" ]
+
+    asmflags = cflags
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/qs8-qc4w-gemm/gen/qs8-qc4w-gemm-1x16-minmax-fp32-asm-aarch64-neondot-ld128.S",
+      "src/src/qs8-qc4w-gemm/gen/qs8-qc4w-gemm-5x16-minmax-fp32-asm-aarch64-neondot-ld128.S",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("qs8-qc4w-gemm_arch=armv8.2-a+fp16+dotprod_standalone") {
+    cflags = [ "-march=armv8.2-a+fp16+dotprod" ]
+
+    asmflags = cflags
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/qs8-qc4w-gemm/gen/qs8-qc4w-gemm-1x16-minmax-fp32-asm-aarch64-neondot-ld128.S",
+      "src/src/qs8-qc4w-gemm/gen/qs8-qc4w-gemm-5x16-minmax-fp32-asm-aarch64-neondot-ld128.S",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("qs8-qc4w-gemm_arm64") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/qs8-qc4w-gemm/gen/qs8-qc4w-gemm-1x2-minmax-fp32-scalar-lrintf.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("qs8-qc4w-gemm_arm64_standalone") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/qs8-qc4w-gemm/gen/qs8-qc4w-gemm-1x2-minmax-fp32-scalar-lrintf.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("qs8-qc8w-dwconv_arm64") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-25p16c-minmax-fp32-neonv8-mla8-ld64.c",
+      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-25p1c-minmax-fp32-scalar-fmagic.c",
+      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-25p1c-minmax-fp32-scalar-imagic.c",
+      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-25p2c-minmax-fp32-scalar-lrintf.c",
+      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-25p8c-minmax-fp32-neon-mla8-ld64.c",
+      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-25p8c-minmax-fp32-neonv8-mla8-ld64.c",
+      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-3p16c-minmax-fp32-neon-mla8-ld128.c",
+      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-3p16c-minmax-fp32-neonv8-mla8-ld128.c",
+      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-3p16c-minmax-fp32-neonv8-mla8-ld64.c",
+      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-3p1c-minmax-fp32-scalar-fmagic.c",
+      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-3p2c-minmax-fp32-scalar-imagic.c",
+      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-3p2c-minmax-fp32-scalar-lrintf.c",
+      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-9p16c-minmax-fp32-neon-mla8-ld64.c",
+      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-9p16c-minmax-fp32-neonv8-mla8-ld64.c",
+      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-9p1c-minmax-fp32-scalar-fmagic.c",
+      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-9p2c-minmax-fp32-scalar-imagic.c",
+      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-9p2c-minmax-fp32-scalar-lrintf.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("qs8-qc8w-dwconv_arm64_standalone") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-25p16c-minmax-fp32-neonv8-mla8-ld64.c",
+      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-25p1c-minmax-fp32-scalar-fmagic.c",
+      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-25p1c-minmax-fp32-scalar-imagic.c",
+      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-25p2c-minmax-fp32-scalar-lrintf.c",
+      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-25p8c-minmax-fp32-neon-mla8-ld64.c",
+      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-25p8c-minmax-fp32-neonv8-mla8-ld64.c",
+      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-3p16c-minmax-fp32-neon-mla8-ld128.c",
+      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-3p16c-minmax-fp32-neonv8-mla8-ld128.c",
+      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-3p16c-minmax-fp32-neonv8-mla8-ld64.c",
+      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-3p1c-minmax-fp32-scalar-fmagic.c",
+      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-3p2c-minmax-fp32-scalar-imagic.c",
+      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-3p2c-minmax-fp32-scalar-lrintf.c",
+      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-9p16c-minmax-fp32-neon-mla8-ld64.c",
+      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-9p16c-minmax-fp32-neonv8-mla8-ld64.c",
+      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-9p1c-minmax-fp32-scalar-fmagic.c",
+      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-9p2c-minmax-fp32-scalar-imagic.c",
+      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-9p2c-minmax-fp32-scalar-lrintf.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("qs8-qc8w-gemm_arch=armv8.2-a+dotprod") {
+    cflags = [ "-march=armv8.2-a+dotprod" ]
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-1x16c4-minmax-fp32-neondot.c",
+      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-1x8c4-minmax-fp32-neondot.c",
+      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-4x16c4-minmax-fp32-neondot.c",
+      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-4x8c4-minmax-fp32-neondot.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("qs8-qc8w-gemm_arch=armv8.2-a+dotprod_standalone") {
+    cflags = [ "-march=armv8.2-a+dotprod" ]
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-1x16c4-minmax-fp32-neondot.c",
+      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-1x8c4-minmax-fp32-neondot.c",
+      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-4x16c4-minmax-fp32-neondot.c",
+      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-4x8c4-minmax-fp32-neondot.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("qs8-qc8w-gemm_arch=armv8.2-a+fp16+dotprod") {
+    cflags = [ "-march=armv8.2-a+fp16+dotprod" ]
+
+    asmflags = cflags
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-1x8c8-minmax-fp32-asm-aarch64-neon-mlal-cortex-a53-prfm.S",
+      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-1x8c8-minmax-fp32-asm-aarch64-neon-mlal-prfm.S",
+      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-1x8c8-minmax-fp32-asm-aarch64-neon-mlal.S",
+      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-2x8c8-minmax-fp32-asm-aarch64-neon-mlal-cortex-a53-prfm.S",
+      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-2x8c8-minmax-fp32-asm-aarch64-neon-mlal-prfm.S",
+      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-2x8c8-minmax-fp32-asm-aarch64-neon-mlal.S",
+      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-4x16-minmax-fp32-asm-aarch64-neon-mlal-lane-cortex-a53.S",
+      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-4x16-minmax-fp32-asm-aarch64-neon-mlal-lane-ld64.S",
+      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-4x16c4-minmax-fp32-asm-aarch64-neondot-cortex-a55.S",
+      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-4x16c4-minmax-fp32-asm-aarch64-neondot-ld128.S",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("qs8-qc8w-gemm_arch=armv8.2-a+fp16+dotprod_standalone") {
+    cflags = [ "-march=armv8.2-a+fp16+dotprod" ]
+
+    asmflags = cflags
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-1x8c8-minmax-fp32-asm-aarch64-neon-mlal-cortex-a53-prfm.S",
+      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-1x8c8-minmax-fp32-asm-aarch64-neon-mlal-prfm.S",
+      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-1x8c8-minmax-fp32-asm-aarch64-neon-mlal.S",
+      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-2x8c8-minmax-fp32-asm-aarch64-neon-mlal-cortex-a53-prfm.S",
+      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-2x8c8-minmax-fp32-asm-aarch64-neon-mlal-prfm.S",
+      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-2x8c8-minmax-fp32-asm-aarch64-neon-mlal.S",
+      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-4x16-minmax-fp32-asm-aarch64-neon-mlal-lane-cortex-a53.S",
+      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-4x16-minmax-fp32-asm-aarch64-neon-mlal-lane-ld64.S",
+      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-4x16c4-minmax-fp32-asm-aarch64-neondot-cortex-a55.S",
+      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-4x16c4-minmax-fp32-asm-aarch64-neondot-ld128.S",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("qs8-qc8w-gemm_arch=armv8.2-a+i8mm+fp16") {
+    cflags = [ "-march=armv8.2-a+i8mm+fp16" ]
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-1x16c8-minmax-fp32-neoni8mm.c",
+      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-4x16c8-minmax-fp32-neoni8mm.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("qs8-qc8w-gemm_arch=armv8.2-a+i8mm+fp16_standalone") {
+    cflags = [ "-march=armv8.2-a+i8mm+fp16" ]
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-1x16c8-minmax-fp32-neoni8mm.c",
+      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-4x16c8-minmax-fp32-neoni8mm.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("qs8-qc8w-gemm_arm64") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-1x16-minmax-fp32-neonv8-mlal-lane.c",
+      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-1x2-minmax-fp32-scalar-imagic.c",
+      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-1x4-minmax-fp32-scalar-lrintf.c",
+      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-1x8c2s4-minmax-fp32-neon-mlal.c",
+      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-1x8c2s4-minmax-fp32-neonv8-mlal.c",
+      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-2x2-minmax-fp32-scalar-imagic.c",
+      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-2x8c2s4-minmax-fp32-neon-mlal.c",
+      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-2x8c2s4-minmax-fp32-neonv8-mlal.c",
+      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-3x4-minmax-fp32-scalar-lrintf.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("qs8-qc8w-gemm_arm64_standalone") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-1x16-minmax-fp32-neonv8-mlal-lane.c",
+      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-1x2-minmax-fp32-scalar-imagic.c",
+      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-1x4-minmax-fp32-scalar-lrintf.c",
+      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-1x8c2s4-minmax-fp32-neon-mlal.c",
+      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-1x8c2s4-minmax-fp32-neonv8-mlal.c",
+      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-2x2-minmax-fp32-scalar-imagic.c",
+      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-2x8c2s4-minmax-fp32-neon-mlal.c",
+      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-2x8c2s4-minmax-fp32-neonv8-mlal.c",
+      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-3x4-minmax-fp32-scalar-lrintf.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("qs8-qc8w-igemm_arch=armv8.2-a+dotprod") {
+    cflags = [ "-march=armv8.2-a+dotprod" ]
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-1x16c4-minmax-fp32-neondot.c",
+      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-1x8c4-minmax-fp32-neondot.c",
+      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-4x16c4-minmax-fp32-neondot.c",
+      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-4x8c4-minmax-fp32-neondot.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("qs8-qc8w-igemm_arch=armv8.2-a+dotprod_standalone") {
+    cflags = [ "-march=armv8.2-a+dotprod" ]
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-1x16c4-minmax-fp32-neondot.c",
+      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-1x8c4-minmax-fp32-neondot.c",
+      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-4x16c4-minmax-fp32-neondot.c",
+      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-4x8c4-minmax-fp32-neondot.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("qs8-qc8w-igemm_arch=armv8.2-a+fp16+dotprod") {
+    cflags = [ "-march=armv8.2-a+fp16+dotprod" ]
+
+    asmflags = cflags
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-1x8c8-minmax-fp32-asm-aarch64-neon-mlal-cortex-a53-prfm.S",
+      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-1x8c8-minmax-fp32-asm-aarch64-neon-mlal-prfm.S",
+      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-1x8c8-minmax-fp32-asm-aarch64-neon-mlal.S",
+      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-2x8c8-minmax-fp32-asm-aarch64-neon-mlal-cortex-a53-prfm.S",
+      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-2x8c8-minmax-fp32-asm-aarch64-neon-mlal-prfm.S",
+      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-2x8c8-minmax-fp32-asm-aarch64-neon-mlal.S",
+      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-4x16-minmax-fp32-asm-aarch64-neon-mlal-lane-cortex-a53.S",
+      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-4x16-minmax-fp32-asm-aarch64-neon-mlal-lane-ld64.S",
+      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-4x16c4-minmax-fp32-asm-aarch64-neondot-cortex-a55.S",
+      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-4x16c4-minmax-fp32-asm-aarch64-neondot-ld128.S",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("qs8-qc8w-igemm_arch=armv8.2-a+fp16+dotprod_standalone") {
+    cflags = [ "-march=armv8.2-a+fp16+dotprod" ]
+
+    asmflags = cflags
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-1x8c8-minmax-fp32-asm-aarch64-neon-mlal-cortex-a53-prfm.S",
+      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-1x8c8-minmax-fp32-asm-aarch64-neon-mlal-prfm.S",
+      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-1x8c8-minmax-fp32-asm-aarch64-neon-mlal.S",
+      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-2x8c8-minmax-fp32-asm-aarch64-neon-mlal-cortex-a53-prfm.S",
+      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-2x8c8-minmax-fp32-asm-aarch64-neon-mlal-prfm.S",
+      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-2x8c8-minmax-fp32-asm-aarch64-neon-mlal.S",
+      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-4x16-minmax-fp32-asm-aarch64-neon-mlal-lane-cortex-a53.S",
+      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-4x16-minmax-fp32-asm-aarch64-neon-mlal-lane-ld64.S",
+      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-4x16c4-minmax-fp32-asm-aarch64-neondot-cortex-a55.S",
+      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-4x16c4-minmax-fp32-asm-aarch64-neondot-ld128.S",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("qs8-qc8w-igemm_arch=armv8.2-a+i8mm+fp16") {
+    cflags = [ "-march=armv8.2-a+i8mm+fp16" ]
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-1x16c8-minmax-fp32-neoni8mm.c",
+      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-4x16c8-minmax-fp32-neoni8mm.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("qs8-qc8w-igemm_arch=armv8.2-a+i8mm+fp16_standalone") {
+    cflags = [ "-march=armv8.2-a+i8mm+fp16" ]
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-1x16c8-minmax-fp32-neoni8mm.c",
+      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-4x16c8-minmax-fp32-neoni8mm.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("qs8-qc8w-igemm_arm64") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-1x16-minmax-fp32-neonv8-mlal-lane.c",
+      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-1x2-minmax-fp32-scalar-imagic.c",
+      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-1x4-minmax-fp32-scalar-lrintf.c",
+      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-1x8c2s4-minmax-fp32-neon-mlal.c",
+      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-1x8c2s4-minmax-fp32-neonv8-mlal.c",
+      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-2x2-minmax-fp32-scalar-imagic.c",
+      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-2x8c2s4-minmax-fp32-neon-mlal.c",
+      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-2x8c2s4-minmax-fp32-neonv8-mlal.c",
+      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-3x4-minmax-fp32-scalar-lrintf.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("qs8-qc8w-igemm_arm64_standalone") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-1x16-minmax-fp32-neonv8-mlal-lane.c",
+      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-1x2-minmax-fp32-scalar-imagic.c",
+      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-1x4-minmax-fp32-scalar-lrintf.c",
+      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-1x8c2s4-minmax-fp32-neon-mlal.c",
+      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-1x8c2s4-minmax-fp32-neonv8-mlal.c",
+      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-2x2-minmax-fp32-scalar-imagic.c",
+      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-2x8c2s4-minmax-fp32-neon-mlal.c",
+      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-2x8c2s4-minmax-fp32-neonv8-mlal.c",
+      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-3x4-minmax-fp32-scalar-lrintf.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("qs8-qu8-packw_arm64") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/qs8-qu8-packw/gen/qs8-qu8-packw-x16c8-gemm-goi-scalar.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("qs8-qu8-packw_arm64_standalone") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/qs8-qu8-packw/gen/qs8-qu8-packw-x16c8-gemm-goi-scalar.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("qs8-rdsum_arm64") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/qs8-rdsum/gen/qs8-rdsum-7p7x-minmax-fp32-neon-c32.c",
+      "src/src/qs8-rdsum/gen/qs8-rdsum-minmax-fp32-scalar-u1-acc1.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("qs8-rdsum_arm64_standalone") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/qs8-rdsum/gen/qs8-rdsum-7p7x-minmax-fp32-neon-c32.c",
+      "src/src/qs8-rdsum/gen/qs8-rdsum-minmax-fp32-scalar-u1-acc1.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("qs8-rsum_arch=armv8.2-a+dotprod") {
+    cflags = [ "-march=armv8.2-a+dotprod" ]
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/qs8-rsum/gen/qs8-rsum-neondot-u32-acc2.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("qs8-rsum_arch=armv8.2-a+dotprod_standalone") {
+    cflags = [ "-march=armv8.2-a+dotprod" ]
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/qs8-rsum/gen/qs8-rsum-neondot-u32-acc2.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("qs8-rsum_arm64") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/qs8-rsum/gen/qs8-rsum-neon-u32-acc2.c",
+      "src/src/qs8-rsum/gen/qs8-rsum-scalar-u4.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("qs8-rsum_arm64_standalone") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/qs8-rsum/gen/qs8-rsum-neon-u32-acc2.c",
+      "src/src/qs8-rsum/gen/qs8-rsum-scalar-u4.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("qs8-vadd_arm64") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/qs8-vadd/gen/qs8-vadd-minmax-neon-ld64-u16.c",
+      "src/src/qs8-vadd/gen/qs8-vadd-minmax-neon-ld64-u32.c",
+      "src/src/qs8-vadd/gen/qs8-vadd-minmax-scalar-u1.c",
+      "src/src/qs8-vadd/gen/qs8-vadd-minmax-scalar-u4.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("qs8-vadd_arm64_standalone") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/qs8-vadd/gen/qs8-vadd-minmax-neon-ld64-u16.c",
+      "src/src/qs8-vadd/gen/qs8-vadd-minmax-neon-ld64-u32.c",
+      "src/src/qs8-vadd/gen/qs8-vadd-minmax-scalar-u1.c",
+      "src/src/qs8-vadd/gen/qs8-vadd-minmax-scalar-u4.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("qs8-vaddc_arm64") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/qs8-vaddc/gen/qs8-vaddc-minmax-neon-ld64-u16.c",
+      "src/src/qs8-vaddc/gen/qs8-vaddc-minmax-neon-ld64-u32.c",
+      "src/src/qs8-vaddc/gen/qs8-vaddc-minmax-scalar-u1.c",
+      "src/src/qs8-vaddc/gen/qs8-vaddc-minmax-scalar-u4.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("qs8-vaddc_arm64_standalone") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/qs8-vaddc/gen/qs8-vaddc-minmax-neon-ld64-u16.c",
+      "src/src/qs8-vaddc/gen/qs8-vaddc-minmax-neon-ld64-u32.c",
+      "src/src/qs8-vaddc/gen/qs8-vaddc-minmax-scalar-u1.c",
+      "src/src/qs8-vaddc/gen/qs8-vaddc-minmax-scalar-u4.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("qs8-vcvt_arm64") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/qs8-vcvt/gen/qs8-vcvt-neon-u32.c",
+      "src/src/qs8-vcvt/gen/qs8-vcvt-scalar-u1.c",
+      "src/src/qs8-vcvt/gen/qs8-vcvt-scalar-u4.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("qs8-vcvt_arm64_standalone") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/qs8-vcvt/gen/qs8-vcvt-neon-u32.c",
+      "src/src/qs8-vcvt/gen/qs8-vcvt-scalar-u1.c",
+      "src/src/qs8-vcvt/gen/qs8-vcvt-scalar-u4.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("qs8-vlrelu_arm64") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/qs8-vlrelu/gen/qs8-vlrelu-neon-u32.c",
+      "src/src/qs8-vlrelu/gen/qs8-vlrelu-scalar-andxor-u4.c",
+      "src/src/qs8-vlrelu/gen/qs8-vlrelu-scalar-select-u4.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("qs8-vlrelu_arm64_standalone") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/qs8-vlrelu/gen/qs8-vlrelu-neon-u32.c",
+      "src/src/qs8-vlrelu/gen/qs8-vlrelu-scalar-andxor-u4.c",
+      "src/src/qs8-vlrelu/gen/qs8-vlrelu-scalar-select-u4.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("qs8-vmul_arm64") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/qs8-vmul/gen/qs8-vmul-minmax-fp32-scalar-u4.c",
+      "src/src/qs8-vmul/gen/qs8-vmul-minmax-rndnu-neon-ld64-u16.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("qs8-vmul_arm64_standalone") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/qs8-vmul/gen/qs8-vmul-minmax-fp32-scalar-u4.c",
+      "src/src/qs8-vmul/gen/qs8-vmul-minmax-rndnu-neon-ld64-u16.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("qs8-vmulc_arm64") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/qs8-vmulc/gen/qs8-vmulc-minmax-fp32-scalar-u4.c",
+      "src/src/qs8-vmulc/gen/qs8-vmulc-minmax-rndnu-neon-ld64-u16.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("qs8-vmulc_arm64_standalone") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/qs8-vmulc/gen/qs8-vmulc-minmax-fp32-scalar-u4.c",
+      "src/src/qs8-vmulc/gen/qs8-vmulc-minmax-rndnu-neon-ld64-u16.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("qu8-dwconv_arm64") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/qu8-dwconv/gen/qu8-dwconv-25p1c-minmax-fp32-scalar-fmagic.c",
+      "src/src/qu8-dwconv/gen/qu8-dwconv-25p1c-minmax-fp32-scalar-imagic.c",
+      "src/src/qu8-dwconv/gen/qu8-dwconv-25p2c-minmax-fp32-scalar-lrintf.c",
+      "src/src/qu8-dwconv/gen/qu8-dwconv-25p8c-minmax-rndnu-neon-mul8.c",
+      "src/src/qu8-dwconv/gen/qu8-dwconv-9p16c-minmax-rndnu-neon-mul8.c",
+      "src/src/qu8-dwconv/gen/qu8-dwconv-9p1c-minmax-fp32-scalar-fmagic.c",
+      "src/src/qu8-dwconv/gen/qu8-dwconv-9p2c-minmax-fp32-scalar-imagic.c",
+      "src/src/qu8-dwconv/gen/qu8-dwconv-9p2c-minmax-fp32-scalar-lrintf.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("qu8-dwconv_arm64_standalone") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/qu8-dwconv/gen/qu8-dwconv-25p1c-minmax-fp32-scalar-fmagic.c",
+      "src/src/qu8-dwconv/gen/qu8-dwconv-25p1c-minmax-fp32-scalar-imagic.c",
+      "src/src/qu8-dwconv/gen/qu8-dwconv-25p2c-minmax-fp32-scalar-lrintf.c",
+      "src/src/qu8-dwconv/gen/qu8-dwconv-25p8c-minmax-rndnu-neon-mul8.c",
+      "src/src/qu8-dwconv/gen/qu8-dwconv-9p16c-minmax-rndnu-neon-mul8.c",
+      "src/src/qu8-dwconv/gen/qu8-dwconv-9p1c-minmax-fp32-scalar-fmagic.c",
+      "src/src/qu8-dwconv/gen/qu8-dwconv-9p2c-minmax-fp32-scalar-imagic.c",
+      "src/src/qu8-dwconv/gen/qu8-dwconv-9p2c-minmax-fp32-scalar-lrintf.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("qu8-f32-vcvt_arm64") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/qu8-f32-vcvt/gen/qu8-f32-vcvt-neon-u32.c",
+      "src/src/qu8-f32-vcvt/gen/qu8-f32-vcvt-scalar-u1.c",
+      "src/src/qu8-f32-vcvt/gen/qu8-f32-vcvt-scalar-u4.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("qu8-f32-vcvt_arm64_standalone") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/qu8-f32-vcvt/gen/qu8-f32-vcvt-neon-u32.c",
+      "src/src/qu8-f32-vcvt/gen/qu8-f32-vcvt-scalar-u1.c",
+      "src/src/qu8-f32-vcvt/gen/qu8-f32-vcvt-scalar-u4.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("qu8-gemm_arch=armv8.2-a+fp16+dotprod") {
+    cflags = [ "-march=armv8.2-a+fp16+dotprod" ]
+
+    asmflags = cflags
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/qu8-gemm/gen/qu8-gemm-4x16-minmax-rndnu-asm-aarch64-neon-mlal-lane-cortex-a53-prfm.S",
+      "src/src/qu8-gemm/gen/qu8-gemm-4x16-minmax-rndnu-asm-aarch64-neon-mlal-lane-cortex-a75-prfm.S",
+      "src/src/qu8-gemm/gen/qu8-gemm-4x16-minmax-rndnu-asm-aarch64-neon-mlal-lane-cortex-a75.S",
+      "src/src/qu8-gemm/gen/qu8-gemm-4x16-minmax-rndnu16-asm-aarch64-neon-mlal-lane-cortex-a53-prfm.S",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("qu8-gemm_arch=armv8.2-a+fp16+dotprod_standalone") {
+    cflags = [ "-march=armv8.2-a+fp16+dotprod" ]
+
+    asmflags = cflags
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/qu8-gemm/gen/qu8-gemm-4x16-minmax-rndnu-asm-aarch64-neon-mlal-lane-cortex-a53-prfm.S",
+      "src/src/qu8-gemm/gen/qu8-gemm-4x16-minmax-rndnu-asm-aarch64-neon-mlal-lane-cortex-a75-prfm.S",
+      "src/src/qu8-gemm/gen/qu8-gemm-4x16-minmax-rndnu-asm-aarch64-neon-mlal-lane-cortex-a75.S",
+      "src/src/qu8-gemm/gen/qu8-gemm-4x16-minmax-rndnu16-asm-aarch64-neon-mlal-lane-cortex-a53-prfm.S",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("qu8-gemm_arm64") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/qu8-gemm/gen/qu8-gemm-1x16-minmax-rndnu-neon-mlal-lane.c",
+      "src/src/qu8-gemm/gen/qu8-gemm-1x16-minmax-rndnu16-neon-mlal-lane.c",
+      "src/src/qu8-gemm/gen/qu8-gemm-1x2-minmax-fp32-scalar-imagic.c",
+      "src/src/qu8-gemm/gen/qu8-gemm-1x4-minmax-fp32-scalar-lrintf.c",
+      "src/src/qu8-gemm/gen/qu8-gemm-1x8-minmax-rndnu-neon-mlal-lane.c",
+      "src/src/qu8-gemm/gen/qu8-gemm-2x2-minmax-fp32-scalar-imagic.c",
+      "src/src/qu8-gemm/gen/qu8-gemm-3x4-minmax-fp32-scalar-lrintf.c",
+      "src/src/qu8-gemm/gen/qu8-gemm-3x8-minmax-rndnu-neon-mlal-lane.c",
+      "src/src/qu8-gemm/gen/qu8-gemm-4x16-minmax-rndnu-neon-mlal-lane.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("qu8-gemm_arm64_standalone") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/qu8-gemm/gen/qu8-gemm-1x16-minmax-rndnu-neon-mlal-lane.c",
+      "src/src/qu8-gemm/gen/qu8-gemm-1x16-minmax-rndnu16-neon-mlal-lane.c",
+      "src/src/qu8-gemm/gen/qu8-gemm-1x2-minmax-fp32-scalar-imagic.c",
+      "src/src/qu8-gemm/gen/qu8-gemm-1x4-minmax-fp32-scalar-lrintf.c",
+      "src/src/qu8-gemm/gen/qu8-gemm-1x8-minmax-rndnu-neon-mlal-lane.c",
+      "src/src/qu8-gemm/gen/qu8-gemm-2x2-minmax-fp32-scalar-imagic.c",
+      "src/src/qu8-gemm/gen/qu8-gemm-3x4-minmax-fp32-scalar-lrintf.c",
+      "src/src/qu8-gemm/gen/qu8-gemm-3x8-minmax-rndnu-neon-mlal-lane.c",
+      "src/src/qu8-gemm/gen/qu8-gemm-4x16-minmax-rndnu-neon-mlal-lane.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("qu8-igemm_arch=armv8.2-a+fp16+dotprod") {
+    cflags = [ "-march=armv8.2-a+fp16+dotprod" ]
+
+    asmflags = cflags
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/qu8-igemm/gen/qu8-igemm-4x16-minmax-rndnu-asm-aarch64-neon-mlal-lane-cortex-a53-prfm.S",
+      "src/src/qu8-igemm/gen/qu8-igemm-4x16-minmax-rndnu-asm-aarch64-neon-mlal-lane-cortex-a75-prfm.S",
+      "src/src/qu8-igemm/gen/qu8-igemm-4x16-minmax-rndnu-asm-aarch64-neon-mlal-lane-cortex-a75.S",
+      "src/src/qu8-igemm/gen/qu8-igemm-4x16-minmax-rndnu16-asm-aarch64-neon-mlal-lane-cortex-a53-prfm.S",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("qu8-igemm_arch=armv8.2-a+fp16+dotprod_standalone") {
+    cflags = [ "-march=armv8.2-a+fp16+dotprod" ]
+
+    asmflags = cflags
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/qu8-igemm/gen/qu8-igemm-4x16-minmax-rndnu-asm-aarch64-neon-mlal-lane-cortex-a53-prfm.S",
+      "src/src/qu8-igemm/gen/qu8-igemm-4x16-minmax-rndnu-asm-aarch64-neon-mlal-lane-cortex-a75-prfm.S",
+      "src/src/qu8-igemm/gen/qu8-igemm-4x16-minmax-rndnu-asm-aarch64-neon-mlal-lane-cortex-a75.S",
+      "src/src/qu8-igemm/gen/qu8-igemm-4x16-minmax-rndnu16-asm-aarch64-neon-mlal-lane-cortex-a53-prfm.S",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("qu8-igemm_arm64") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/qu8-igemm/gen/qu8-igemm-1x16-minmax-rndnu-neon-mlal-lane.c",
+      "src/src/qu8-igemm/gen/qu8-igemm-1x16-minmax-rndnu16-neon-mlal-lane.c",
+      "src/src/qu8-igemm/gen/qu8-igemm-1x2-minmax-fp32-scalar-imagic.c",
+      "src/src/qu8-igemm/gen/qu8-igemm-1x4-minmax-fp32-scalar-lrintf.c",
+      "src/src/qu8-igemm/gen/qu8-igemm-1x8-minmax-rndnu-neon-mlal-lane.c",
+      "src/src/qu8-igemm/gen/qu8-igemm-2x2-minmax-fp32-scalar-imagic.c",
+      "src/src/qu8-igemm/gen/qu8-igemm-3x4-minmax-fp32-scalar-lrintf.c",
+      "src/src/qu8-igemm/gen/qu8-igemm-3x8-minmax-rndnu-neon-mlal-lane.c",
+      "src/src/qu8-igemm/gen/qu8-igemm-4x16-minmax-rndnu-neon-mlal-lane.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("qu8-igemm_arm64_standalone") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/qu8-igemm/gen/qu8-igemm-1x16-minmax-rndnu-neon-mlal-lane.c",
+      "src/src/qu8-igemm/gen/qu8-igemm-1x16-minmax-rndnu16-neon-mlal-lane.c",
+      "src/src/qu8-igemm/gen/qu8-igemm-1x2-minmax-fp32-scalar-imagic.c",
+      "src/src/qu8-igemm/gen/qu8-igemm-1x4-minmax-fp32-scalar-lrintf.c",
+      "src/src/qu8-igemm/gen/qu8-igemm-1x8-minmax-rndnu-neon-mlal-lane.c",
+      "src/src/qu8-igemm/gen/qu8-igemm-2x2-minmax-fp32-scalar-imagic.c",
+      "src/src/qu8-igemm/gen/qu8-igemm-3x4-minmax-fp32-scalar-lrintf.c",
+      "src/src/qu8-igemm/gen/qu8-igemm-3x8-minmax-rndnu-neon-mlal-lane.c",
+      "src/src/qu8-igemm/gen/qu8-igemm-4x16-minmax-rndnu-neon-mlal-lane.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("qu8-rdsum_arm64") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/qu8-rdsum/gen/qu8-rdsum-7p7x-neon-u16.c",
+      "src/src/qu8-rdsum/gen/qu8-rdsum-7p7x-neon-u32.c",
+      "src/src/qu8-rdsum/gen/qu8-rdsum-scalar.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("qu8-rdsum_arm64_standalone") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/qu8-rdsum/gen/qu8-rdsum-7p7x-neon-u16.c",
+      "src/src/qu8-rdsum/gen/qu8-rdsum-7p7x-neon-u32.c",
+      "src/src/qu8-rdsum/gen/qu8-rdsum-scalar.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("qu8-rsum_arm64") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/qu8-rsum/gen/qu8-rsum-neon-u32-acc2.c",
+      "src/src/qu8-rsum/gen/qu8-rsum-scalar-u4.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("qu8-rsum_arm64_standalone") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/qu8-rsum/gen/qu8-rsum-neon-u32-acc2.c",
+      "src/src/qu8-rsum/gen/qu8-rsum-scalar-u4.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("qu8-vadd_arm64") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/qu8-vadd/gen/qu8-vadd-minmax-neon-ld64-u16.c",
+      "src/src/qu8-vadd/gen/qu8-vadd-minmax-neon-ld64-u32.c",
+      "src/src/qu8-vadd/gen/qu8-vadd-minmax-scalar-u1.c",
+      "src/src/qu8-vadd/gen/qu8-vadd-minmax-scalar-u4.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("qu8-vadd_arm64_standalone") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/qu8-vadd/gen/qu8-vadd-minmax-neon-ld64-u16.c",
+      "src/src/qu8-vadd/gen/qu8-vadd-minmax-neon-ld64-u32.c",
+      "src/src/qu8-vadd/gen/qu8-vadd-minmax-scalar-u1.c",
+      "src/src/qu8-vadd/gen/qu8-vadd-minmax-scalar-u4.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("qu8-vaddc_arm64") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/qu8-vaddc/gen/qu8-vaddc-minmax-neon-ld64-u16.c",
+      "src/src/qu8-vaddc/gen/qu8-vaddc-minmax-neon-ld64-u32.c",
+      "src/src/qu8-vaddc/gen/qu8-vaddc-minmax-scalar-u1.c",
+      "src/src/qu8-vaddc/gen/qu8-vaddc-minmax-scalar-u4.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("qu8-vaddc_arm64_standalone") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/qu8-vaddc/gen/qu8-vaddc-minmax-neon-ld64-u16.c",
+      "src/src/qu8-vaddc/gen/qu8-vaddc-minmax-neon-ld64-u32.c",
+      "src/src/qu8-vaddc/gen/qu8-vaddc-minmax-scalar-u1.c",
+      "src/src/qu8-vaddc/gen/qu8-vaddc-minmax-scalar-u4.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("qu8-vcvt_arm64") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/qu8-vcvt/gen/qu8-vcvt-neon-u32.c",
+      "src/src/qu8-vcvt/gen/qu8-vcvt-scalar-u1.c",
+      "src/src/qu8-vcvt/gen/qu8-vcvt-scalar-u4.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("qu8-vcvt_arm64_standalone") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/qu8-vcvt/gen/qu8-vcvt-neon-u32.c",
+      "src/src/qu8-vcvt/gen/qu8-vcvt-scalar-u1.c",
+      "src/src/qu8-vcvt/gen/qu8-vcvt-scalar-u4.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("qu8-vlrelu_arm64") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/qu8-vlrelu/gen/qu8-vlrelu-neon-u32.c",
+      "src/src/qu8-vlrelu/gen/qu8-vlrelu-scalar-andxor-u4.c",
+      "src/src/qu8-vlrelu/gen/qu8-vlrelu-scalar-select-u4.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("qu8-vlrelu_arm64_standalone") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/qu8-vlrelu/gen/qu8-vlrelu-neon-u32.c",
+      "src/src/qu8-vlrelu/gen/qu8-vlrelu-scalar-andxor-u4.c",
+      "src/src/qu8-vlrelu/gen/qu8-vlrelu-scalar-select-u4.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("qu8-vmul_arm64") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/qu8-vmul/gen/qu8-vmul-minmax-fp32-scalar-u4.c",
+      "src/src/qu8-vmul/gen/qu8-vmul-minmax-rndnu-neon-ld64-u16.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("qu8-vmul_arm64_standalone") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/qu8-vmul/gen/qu8-vmul-minmax-fp32-scalar-u4.c",
+      "src/src/qu8-vmul/gen/qu8-vmul-minmax-rndnu-neon-ld64-u16.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("qu8-vmulc_arm64") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/qu8-vmulc/gen/qu8-vmulc-minmax-fp32-scalar-u4.c",
+      "src/src/qu8-vmulc/gen/qu8-vmulc-minmax-rndnu-neon-ld64-u16.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("qu8-vmulc_arm64_standalone") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/qu8-vmulc/gen/qu8-vmulc-minmax-fp32-scalar-u4.c",
+      "src/src/qu8-vmulc/gen/qu8-vmulc-minmax-rndnu-neon-ld64-u16.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("reference_arm64") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/reference/binary-elementwise.cc",
+      "src/src/reference/packing.cc",
+      "src/src/reference/unary-elementwise.cc",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("reference_arm64_standalone") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/reference/binary-elementwise.cc",
+      "src/src/reference/packing.cc",
+      "src/src/reference/unary-elementwise.cc",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("s8-ibilinear_arm64") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/s8-ibilinear/gen/s8-ibilinear-neon-c16.c",
+      "src/src/s8-ibilinear/gen/s8-ibilinear-neon-c8.c",
+      "src/src/s8-ibilinear/gen/s8-ibilinear-scalar-c1.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("s8-ibilinear_arm64_standalone") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/s8-ibilinear/gen/s8-ibilinear-neon-c16.c",
+      "src/src/s8-ibilinear/gen/s8-ibilinear-neon-c8.c",
+      "src/src/s8-ibilinear/gen/s8-ibilinear-scalar-c1.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("s8-maxpool_arm64") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/s8-maxpool/gen/s8-maxpool-9p-minmax-neon-u16.c",
+      "src/src/s8-maxpool/gen/s8-maxpool-9p-minmax-scalar-u1.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("s8-maxpool_arm64_standalone") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/s8-maxpool/gen/s8-maxpool-9p-minmax-neon-u16.c",
+      "src/src/s8-maxpool/gen/s8-maxpool-9p-minmax-scalar-u1.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("s8-rdminmax_arm64") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/s8-rdminmax/gen/s8-rdmax-2p2x-neon-c32.c",
+      "src/src/s8-rdminmax/gen/s8-rdmax-2p2x-scalar-c2.c",
+      "src/src/s8-rdminmax/gen/s8-rdmin-2p2x-neon-c32.c",
+      "src/src/s8-rdminmax/gen/s8-rdmin-2p2x-scalar-c2.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("s8-rdminmax_arm64_standalone") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/s8-rdminmax/gen/s8-rdmax-2p2x-neon-c32.c",
+      "src/src/s8-rdminmax/gen/s8-rdmax-2p2x-scalar-c2.c",
+      "src/src/s8-rdminmax/gen/s8-rdmin-2p2x-neon-c32.c",
+      "src/src/s8-rdminmax/gen/s8-rdmin-2p2x-scalar-c2.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("s8-rminmax_arm64") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/s8-rminmax/gen/s8-rmax-neon-u32-acc2.c",
+      "src/src/s8-rminmax/gen/s8-rmax-scalar-u2-acc2.c",
+      "src/src/s8-rminmax/gen/s8-rmin-neon-u32-acc2.c",
+      "src/src/s8-rminmax/gen/s8-rmin-scalar-u2-acc2.c",
+      "src/src/s8-rminmax/gen/s8-rminmax-neon-u32-acc2.c",
+      "src/src/s8-rminmax/gen/s8-rminmax-scalar-u2-acc2.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("s8-rminmax_arm64_standalone") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/s8-rminmax/gen/s8-rmax-neon-u32-acc2.c",
+      "src/src/s8-rminmax/gen/s8-rmax-scalar-u2-acc2.c",
+      "src/src/s8-rminmax/gen/s8-rmin-neon-u32-acc2.c",
+      "src/src/s8-rminmax/gen/s8-rmin-scalar-u2-acc2.c",
+      "src/src/s8-rminmax/gen/s8-rminmax-neon-u32-acc2.c",
+      "src/src/s8-rminmax/gen/s8-rminmax-scalar-u2-acc2.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("s8-vclamp_arm64") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/s8-vclamp/s8-vclamp-neon-u64.c",
+      "src/src/s8-vclamp/s8-vclamp-scalar-u4.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("s8-vclamp_arm64_standalone") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/s8-vclamp/s8-vclamp-neon-u64.c",
+      "src/src/s8-vclamp/s8-vclamp-scalar-u4.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("subgraph_arm64") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/subgraph/argmax-pooling-2d.c",
+      "src/src/subgraph/average-pooling-2d.c",
+      "src/src/subgraph/batch-matrix-multiply.c",
+      "src/src/subgraph/binary.c",
+      "src/src/subgraph/concatenate.c",
+      "src/src/subgraph/convolution-2d.c",
+      "src/src/subgraph/copy.c",
+      "src/src/subgraph/deconvolution-2d.c",
+      "src/src/subgraph/deprecated.c",
+      "src/src/subgraph/depth-to-space-2d.c",
+      "src/src/subgraph/depthwise-convolution-2d.c",
+      "src/src/subgraph/even-split.c",
+      "src/src/subgraph/fully-connected-sparse.c",
+      "src/src/subgraph/fully-connected.c",
+      "src/src/subgraph/max-pooling-2d.c",
+      "src/src/subgraph/pack-lh.c",
+      "src/src/subgraph/reshape-helpers.c",
+      "src/src/subgraph/rope.c",
+      "src/src/subgraph/softmax.c",
+      "src/src/subgraph/space-to-depth-2d.c",
+      "src/src/subgraph/static-constant-pad.c",
+      "src/src/subgraph/static-reduce.c",
+      "src/src/subgraph/static-resize-bilinear-2d.c",
+      "src/src/subgraph/static-slice.c",
+      "src/src/subgraph/static-transpose.c",
+      "src/src/subgraph/unary.c",
+      "src/src/subgraph/unpooling-2d.c",
+      "src/src/subgraph/validation.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("subgraph_arm64_standalone") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/subgraph/argmax-pooling-2d.c",
+      "src/src/subgraph/average-pooling-2d.c",
+      "src/src/subgraph/batch-matrix-multiply.c",
+      "src/src/subgraph/binary.c",
+      "src/src/subgraph/concatenate.c",
+      "src/src/subgraph/convolution-2d.c",
+      "src/src/subgraph/copy.c",
+      "src/src/subgraph/deconvolution-2d.c",
+      "src/src/subgraph/deprecated.c",
+      "src/src/subgraph/depth-to-space-2d.c",
+      "src/src/subgraph/depthwise-convolution-2d.c",
+      "src/src/subgraph/even-split.c",
+      "src/src/subgraph/fully-connected-sparse.c",
+      "src/src/subgraph/fully-connected.c",
+      "src/src/subgraph/max-pooling-2d.c",
+      "src/src/subgraph/pack-lh.c",
+      "src/src/subgraph/reshape-helpers.c",
+      "src/src/subgraph/rope.c",
+      "src/src/subgraph/softmax.c",
+      "src/src/subgraph/space-to-depth-2d.c",
+      "src/src/subgraph/static-constant-pad.c",
+      "src/src/subgraph/static-reduce.c",
+      "src/src/subgraph/static-resize-bilinear-2d.c",
+      "src/src/subgraph/static-slice.c",
+      "src/src/subgraph/static-transpose.c",
+      "src/src/subgraph/unary.c",
+      "src/src/subgraph/unpooling-2d.c",
+      "src/src/subgraph/validation.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("tables_arm64") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/tables/exp2-k-over-2048.c",
+      "src/src/tables/exp2-k-over-64.c",
+      "src/src/tables/exp2minus-k-over-16.c",
+      "src/src/tables/exp2minus-k-over-2048.c",
+      "src/src/tables/exp2minus-k-over-32.c",
+      "src/src/tables/exp2minus-k-over-4.c",
+      "src/src/tables/exp2minus-k-over-64.c",
+      "src/src/tables/exp2minus-k-over-8.c",
+      "src/src/tables/vlog.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("tables_arm64_standalone") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/tables/exp2-k-over-2048.c",
+      "src/src/tables/exp2-k-over-64.c",
+      "src/src/tables/exp2minus-k-over-16.c",
+      "src/src/tables/exp2minus-k-over-2048.c",
+      "src/src/tables/exp2minus-k-over-32.c",
+      "src/src/tables/exp2minus-k-over-4.c",
+      "src/src/tables/exp2minus-k-over-64.c",
+      "src/src/tables/exp2minus-k-over-8.c",
+      "src/src/tables/vlog.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("u8-ibilinear_arm64") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/u8-ibilinear/gen/u8-ibilinear-neon-c16.c",
+      "src/src/u8-ibilinear/gen/u8-ibilinear-neon-c8.c",
+      "src/src/u8-ibilinear/gen/u8-ibilinear-scalar-c1.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("u8-ibilinear_arm64_standalone") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/u8-ibilinear/gen/u8-ibilinear-neon-c16.c",
+      "src/src/u8-ibilinear/gen/u8-ibilinear-neon-c8.c",
+      "src/src/u8-ibilinear/gen/u8-ibilinear-scalar-c1.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("u8-lut32norm_arm64") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/u8-lut32norm/u8-lut32norm-scalar.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("u8-lut32norm_arm64_standalone") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/u8-lut32norm/u8-lut32norm-scalar.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("u8-maxpool_arm64") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/u8-maxpool/gen/u8-maxpool-9p-minmax-neon-u16.c",
+      "src/src/u8-maxpool/gen/u8-maxpool-9p-minmax-scalar-u1.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("u8-maxpool_arm64_standalone") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/u8-maxpool/gen/u8-maxpool-9p-minmax-neon-u16.c",
+      "src/src/u8-maxpool/gen/u8-maxpool-9p-minmax-scalar-u1.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("u8-rdminmax_arm64") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/u8-rdminmax/gen/u8-rdmax-2p2x-neon-c32.c",
+      "src/src/u8-rdminmax/gen/u8-rdmax-2p2x-scalar-c2.c",
+      "src/src/u8-rdminmax/gen/u8-rdmin-2p2x-neon-c32.c",
+      "src/src/u8-rdminmax/gen/u8-rdmin-2p2x-scalar-c2.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("u8-rdminmax_arm64_standalone") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/u8-rdminmax/gen/u8-rdmax-2p2x-neon-c32.c",
+      "src/src/u8-rdminmax/gen/u8-rdmax-2p2x-scalar-c2.c",
+      "src/src/u8-rdminmax/gen/u8-rdmin-2p2x-neon-c32.c",
+      "src/src/u8-rdminmax/gen/u8-rdmin-2p2x-scalar-c2.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("u8-rminmax_arm64") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/u8-rminmax/gen/u8-rmax-neon-u32-acc2.c",
+      "src/src/u8-rminmax/gen/u8-rmax-scalar-u2-acc2.c",
+      "src/src/u8-rminmax/gen/u8-rmin-neon-u32-acc2.c",
+      "src/src/u8-rminmax/gen/u8-rmin-scalar-u2-acc2.c",
+      "src/src/u8-rminmax/gen/u8-rminmax-neon-u32-acc2.c",
+      "src/src/u8-rminmax/gen/u8-rminmax-scalar-u2-acc2.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("u8-rminmax_arm64_standalone") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/u8-rminmax/gen/u8-rmax-neon-u32-acc2.c",
+      "src/src/u8-rminmax/gen/u8-rmax-scalar-u2-acc2.c",
+      "src/src/u8-rminmax/gen/u8-rmin-neon-u32-acc2.c",
+      "src/src/u8-rminmax/gen/u8-rmin-scalar-u2-acc2.c",
+      "src/src/u8-rminmax/gen/u8-rminmax-neon-u32-acc2.c",
+      "src/src/u8-rminmax/gen/u8-rminmax-scalar-u2-acc2.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("u8-vclamp_arm64") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/u8-vclamp/u8-vclamp-neon-u64.c",
+      "src/src/u8-vclamp/u8-vclamp-scalar-u4.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("u8-vclamp_arm64_standalone") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/u8-vclamp/u8-vclamp-neon-u64.c",
+      "src/src/u8-vclamp/u8-vclamp-scalar-u4.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("x16-packw_arm64") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/x16-packw/gen/x16-packw-x16-gemm-goi-neon-ld4lane-u8-prfm.c",
+      "src/src/x16-packw/gen/x16-packw-x8-gemm-goi-neon-ld4lane-u8-prfm.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("x16-packw_arm64_standalone") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/x16-packw/gen/x16-packw-x16-gemm-goi-neon-ld4lane-u8-prfm.c",
+      "src/src/x16-packw/gen/x16-packw-x8-gemm-goi-neon-ld4lane-u8-prfm.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("x16-transposec_arm64") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/x16-transposec/gen/x16-transposec-2x4-scalar-int.c",
+      "src/src/x16-transposec/gen/x16-transposec-8x8-reuse-dec-zip-neon.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("x16-transposec_arm64_standalone") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/x16-transposec/gen/x16-transposec-2x4-scalar-int.c",
+      "src/src/x16-transposec/gen/x16-transposec-8x8-reuse-dec-zip-neon.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("x16-x32-packw_arm64") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/x16-x32-packw/gen/x16-x32-packw-x32c2-gemm-gio-scalar.c",
+      "src/src/x16-x32-packw/gen/x16-x32-packw-x32c2-gemm-goi-scalar.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("x16-x32-packw_arm64_standalone") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/x16-x32-packw/gen/x16-x32-packw-x32c2-gemm-gio-scalar.c",
+      "src/src/x16-x32-packw/gen/x16-x32-packw-x32c2-gemm-goi-scalar.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("x24-transposec_arm64") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/x24-transposec/gen/x24-transposec-1x2-scalar.c",
+      "src/src/x24-transposec/x24-transposec-2x2-neon-tbl64.c",
+      "src/src/x24-transposec/x24-transposec-4x4-aarch64-neon-tbl128.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("x24-transposec_arm64_standalone") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/x24-transposec/gen/x24-transposec-1x2-scalar.c",
+      "src/src/x24-transposec/x24-transposec-2x2-neon-tbl64.c",
+      "src/src/x24-transposec/x24-transposec-4x4-aarch64-neon-tbl128.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("x32-packw_arm64") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/x32-packw/gen/x32-packw-x2-gemm-gio-scalar.c",
+      "src/src/x32-packw/gen/x32-packw-x2-gemm-goi-neon-ld2lane-u2-prfm.c",
+      "src/src/x32-packw/gen/x32-packw-x2-gemm-goi-scalar-float-u4.c",
+      "src/src/x32-packw/gen/x32-packw-x32-gemm-goi-scalar-int-u2.c",
+      "src/src/x32-packw/gen/x32-packw-x4-gemm-gio-scalar.c",
+      "src/src/x32-packw/gen/x32-packw-x4-gemm-goi-scalar-float-u4.c",
+      "src/src/x32-packw/gen/x32-packw-x64-gemm-goi-scalar-int-u2.c",
+      "src/src/x32-packw/gen/x32-packw-x8-gemm-goi-neon-ld4lane-u4-prfm.c",
+      "src/src/x32-packw/gen/x32-packw-x8s4-gemm-goi-neon-ld4lane-u4-prfm.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("x32-packw_arm64_standalone") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/x32-packw/gen/x32-packw-x2-gemm-gio-scalar.c",
+      "src/src/x32-packw/gen/x32-packw-x2-gemm-goi-neon-ld2lane-u2-prfm.c",
+      "src/src/x32-packw/gen/x32-packw-x2-gemm-goi-scalar-float-u4.c",
+      "src/src/x32-packw/gen/x32-packw-x32-gemm-goi-scalar-int-u2.c",
+      "src/src/x32-packw/gen/x32-packw-x4-gemm-gio-scalar.c",
+      "src/src/x32-packw/gen/x32-packw-x4-gemm-goi-scalar-float-u4.c",
+      "src/src/x32-packw/gen/x32-packw-x64-gemm-goi-scalar-int-u2.c",
+      "src/src/x32-packw/gen/x32-packw-x8-gemm-goi-neon-ld4lane-u4-prfm.c",
+      "src/src/x32-packw/gen/x32-packw-x8s4-gemm-goi-neon-ld4lane-u4-prfm.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("x32-transposec_arm64") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/x32-transposec/gen/x32-transposec-2x4-scalar-int.c",
+      "src/src/x32-transposec/gen/x32-transposec-4x4-reuse-dec-zip-neon.c",
+      "src/src/x32-transposec/x32-transposec-4x4-aarch64-neon-tbl128.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("x32-transposec_arm64_standalone") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/x32-transposec/gen/x32-transposec-2x4-scalar-int.c",
+      "src/src/x32-transposec/gen/x32-transposec-4x4-reuse-dec-zip-neon.c",
+      "src/src/x32-transposec/x32-transposec-4x4-aarch64-neon-tbl128.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("x32-unpool_arm64") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/x32-unpool/x32-unpool-neon.c",
+      "src/src/x32-unpool/x32-unpool-scalar.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("x32-unpool_arm64_standalone") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/x32-unpool/x32-unpool-neon.c",
+      "src/src/x32-unpool/x32-unpool-scalar.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("x64-transposec_arm64") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/x64-transposec/gen/x64-transposec-2x2-multi-dec-zip-neon.c",
+      "src/src/x64-transposec/gen/x64-transposec-2x2-reuse-dec-zip-neon.c",
+      "src/src/x64-transposec/gen/x64-transposec-4x2-scalar-int.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("x64-transposec_arm64_standalone") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/x64-transposec/gen/x64-transposec-2x2-multi-dec-zip-neon.c",
+      "src/src/x64-transposec/gen/x64-transposec-2x2-reuse-dec-zip-neon.c",
+      "src/src/x64-transposec/gen/x64-transposec-4x2-scalar-int.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("x8-lut_arm64") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/x8-lut/gen/x8-lut-aarch64-neon-tbx128x4-u64.c",
+      "src/src/x8-lut/gen/x8-lut-scalar-u4.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("x8-lut_arm64_standalone") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/x8-lut/gen/x8-lut-aarch64-neon-tbx128x4-u64.c",
+      "src/src/x8-lut/gen/x8-lut-scalar-u4.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("x8-packq_arm64") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/x8-packq/x8-packq-aarch64-neon-f32qp8-u2.c",
+      "src/src/x8-packq/x8-packq-scalar-f32qp8-u1.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("x8-packq_arm64_standalone") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/x8-packq/x8-packq-aarch64-neon-f32qp8-u2.c",
+      "src/src/x8-packq/x8-packq-scalar-f32qp8-u1.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("x8-packw_arm64") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/x8-packw/gen/x8-packw-x16-gemm-goi-scalar-u2.c",
+      "src/src/x8-packw/gen/x8-packw-x32-gemm-goi-scalar-u2.c",
+      "src/src/x8-packw/gen/x8-packw-x4-gemm-goi-scalar-u2.c",
+      "src/src/x8-packw/gen/x8-packw-x8-gemm-goi-scalar-u2.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("x8-packw_arm64_standalone") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/x8-packw/gen/x8-packw-x16-gemm-goi-scalar-u2.c",
+      "src/src/x8-packw/gen/x8-packw-x32-gemm-goi-scalar-u2.c",
+      "src/src/x8-packw/gen/x8-packw-x4-gemm-goi-scalar-u2.c",
+      "src/src/x8-packw/gen/x8-packw-x8-gemm-goi-scalar-u2.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("x8-transposec_arm64") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/x8-transposec/gen/x8-transposec-16x16-reuse-dec-zip-neon.c",
+      "src/src/x8-transposec/gen/x8-transposec-2x4-scalar-int.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("x8-transposec_arm64_standalone") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/x8-transposec/gen/x8-transposec-16x16-reuse-dec-zip-neon.c",
+      "src/src/x8-transposec/gen/x8-transposec-2x4-scalar-int.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("xx-copy_arm64") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/xx-copy/xx-copy-scalar-memcpy.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("xx-copy_arm64_standalone") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/xx-copy/xx-copy-scalar-memcpy.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("xx-fill_arm64") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/xx-fill/xx-fill-neon-u64.c",
+      "src/src/xx-fill/xx-fill-scalar-u16.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("xx-fill_arm64_standalone") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/xx-fill/xx-fill-neon-u64.c",
+      "src/src/xx-fill/xx-fill-scalar-u16.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("xx-pad_arm64") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/xx-pad/xx-pad-p16-neon-u16.c",
+      "src/src/xx-pad/xx-pad-p4-scalar-u16.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("xx-pad_arm64_standalone") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/xx-pad/xx-pad-p16-neon-u16.c",
+      "src/src/xx-pad/xx-pad-p4-scalar-u16.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("xx-transposev_arm64") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/xx-transposev/xx-transposev-1x1-scalar-memcpy.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("xx-transposev_arm64_standalone") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/xx-transposev/xx-transposev-1x1-scalar-memcpy.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+}
+
+if (current_cpu == "riscv64") {
+  source_set("configs_riscv64") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/configs/argmaxpool-config.c",
+      "src/src/configs/avgpool-config.c",
+      "src/src/configs/binary-elementwise-config.c",
+      "src/src/configs/cmul-config.c",
+      "src/src/configs/conv-hwc2chw-config.c",
+      "src/src/configs/dwconv-config.c",
+      "src/src/configs/dwconv2d-chw-config.c",
+      "src/src/configs/gemm-config.c",
+      "src/src/configs/hardware-config.c",
+      "src/src/configs/ibilinear-chw-config.c",
+      "src/src/configs/ibilinear-config.c",
+      "src/src/configs/lut32norm-config.c",
+      "src/src/configs/maxpool-config.c",
+      "src/src/configs/pack-lh-config.c",
+      "src/src/configs/raddstoreexpminusmax-config.c",
+      "src/src/configs/reduce-config.c",
+      "src/src/configs/spmm-config.c",
+      "src/src/configs/transpose-config.c",
+      "src/src/configs/unary-elementwise-config.c",
+      "src/src/configs/unpool-config.c",
+      "src/src/configs/vmulcaddc-config.c",
+      "src/src/configs/x8-lut-config.c",
+      "src/src/configs/xx-fill-config.c",
+      "src/src/configs/xx-pad-config.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("configs_riscv64_standalone") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/configs/argmaxpool-config.c",
+      "src/src/configs/avgpool-config.c",
+      "src/src/configs/binary-elementwise-config.c",
+      "src/src/configs/cmul-config.c",
+      "src/src/configs/conv-hwc2chw-config.c",
+      "src/src/configs/dwconv-config.c",
+      "src/src/configs/dwconv2d-chw-config.c",
+      "src/src/configs/gemm-config.c",
+      "src/src/configs/hardware-config.c",
+      "src/src/configs/ibilinear-chw-config.c",
+      "src/src/configs/ibilinear-config.c",
+      "src/src/configs/lut32norm-config.c",
+      "src/src/configs/maxpool-config.c",
+      "src/src/configs/pack-lh-config.c",
+      "src/src/configs/raddstoreexpminusmax-config.c",
+      "src/src/configs/reduce-config.c",
+      "src/src/configs/spmm-config.c",
+      "src/src/configs/transpose-config.c",
+      "src/src/configs/unary-elementwise-config.c",
+      "src/src/configs/unpool-config.c",
+      "src/src/configs/vmulcaddc-config.c",
+      "src/src/configs/x8-lut-config.c",
+      "src/src/configs/xx-fill-config.c",
+      "src/src/configs/xx-pad-config.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("enums_riscv64") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/enums/allocation-type.c",
+      "src/src/enums/datatype-strings.c",
+      "src/src/enums/microkernel-type.c",
+      "src/src/enums/node-type.c",
+      "src/src/enums/operator-type.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("enums_riscv64_standalone") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/enums/allocation-type.c",
+      "src/src/enums/datatype-strings.c",
+      "src/src/enums/microkernel-type.c",
+      "src/src/enums/node-type.c",
+      "src/src/enums/operator-type.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("f16-f32-vcvt_riscv64") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f16-f32-vcvt/gen/f16-f32-vcvt-scalar-u4.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("f16-f32-vcvt_riscv64_standalone") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f16-f32-vcvt/gen/f16-f32-vcvt-scalar-u4.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("f16-qs8-vcvt_riscv64") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f16-qs8-vcvt/gen/f16-qs8-vcvt-scalar-imagic-u4.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("f16-qs8-vcvt_riscv64_standalone") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f16-qs8-vcvt/gen/f16-qs8-vcvt-scalar-imagic-u4.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("f16-qu8-vcvt_riscv64") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f16-qu8-vcvt/gen/f16-qu8-vcvt-scalar-imagic-u4.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("f16-qu8-vcvt_riscv64_standalone") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f16-qu8-vcvt/gen/f16-qu8-vcvt-scalar-imagic-u4.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("f16-rdminmax_riscv64") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f16-rdminmax/gen/f16-rdmax-2p2x-scalar-c2.c",
+      "src/src/f16-rdminmax/gen/f16-rdmin-2p2x-scalar-c2.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("f16-rdminmax_riscv64_standalone") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f16-rdminmax/gen/f16-rdmax-2p2x-scalar-c2.c",
+      "src/src/f16-rdminmax/gen/f16-rdmin-2p2x-scalar-c2.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("f16-rminmax_riscv64") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f16-rminmax/gen/f16-rmax-scalar-u2-acc2.c",
+      "src/src/f16-rminmax/gen/f16-rmin-scalar-u2-acc2.c",
+      "src/src/f16-rminmax/gen/f16-rminmax-scalar-u2-acc2.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("f16-rminmax_riscv64_standalone") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f16-rminmax/gen/f16-rmax-scalar-u2-acc2.c",
+      "src/src/f16-rminmax/gen/f16-rmin-scalar-u2-acc2.c",
+      "src/src/f16-rminmax/gen/f16-rminmax-scalar-u2-acc2.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("f16-vapproxgelu_riscv64") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f16-vapproxgelu/gen/f16-vapproxgelu-scalar-rational-6-4-div.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("f16-vapproxgelu_riscv64_standalone") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f16-vapproxgelu/gen/f16-vapproxgelu-scalar-rational-6-4-div.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("f16-vcos_riscv64") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f16-vcos/gen/f16-vcos-scalar-rational-3-2-div.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("f16-vcos_riscv64_standalone") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f16-vcos/gen/f16-vcos-scalar-rational-3-2-div.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("f16-vexp_riscv64") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f16-vexp/gen/f16-vexp-scalar-poly-3.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("f16-vexp_riscv64_standalone") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f16-vexp/gen/f16-vexp-scalar-poly-3.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("f16-vgelu_riscv64") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f16-vgelu/gen/f16-vgelu-scalar-rational-6-4-div.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("f16-vgelu_riscv64_standalone") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f16-vgelu/gen/f16-vgelu-scalar-rational-6-4-div.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("f16-vsin_riscv64") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f16-vsin/gen/f16-vsin-scalar-rational-3-2-div.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("f16-vsin_riscv64_standalone") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f16-vsin/gen/f16-vsin-scalar-rational-3-2-div.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("f32-argmaxpool_arch=rv64gcv-abi=lp64d") {
+    cflags = [
+      "-mabi=lp64d",
+      "-march=rv64gcv",
+    ]
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f32-argmaxpool/f32-argmaxpool-9p8x-rvv-u1v.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("f32-argmaxpool_arch=rv64gcv-abi=lp64d_standalone") {
+    cflags = [
+      "-mabi=lp64d",
+      "-march=rv64gcv",
+    ]
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f32-argmaxpool/f32-argmaxpool-9p8x-rvv-u1v.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("f32-argmaxpool_riscv64") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f32-argmaxpool/f32-argmaxpool-9p8x-scalar-c1.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("f32-argmaxpool_riscv64_standalone") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f32-argmaxpool/f32-argmaxpool-9p8x-scalar-c1.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("f32-avgpool_riscv64") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f32-avgpool/gen/f32-avgpool-9p-minmax-scalar-u1.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("f32-avgpool_riscv64_standalone") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f32-avgpool/gen/f32-avgpool-9p-minmax-scalar-u1.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("f32-conv-hwc2chw_arch=rv64gcv-abi=lp64d") {
+    cflags = [
+      "-mabi=lp64d",
+      "-march=rv64gcv",
+    ]
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f32-conv-hwc2chw/f32-conv-hwc2chw-3x3s2p1c3x2v-rvv-2x2.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("f32-conv-hwc2chw_arch=rv64gcv-abi=lp64d_standalone") {
+    cflags = [
+      "-mabi=lp64d",
+      "-march=rv64gcv",
+    ]
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f32-conv-hwc2chw/f32-conv-hwc2chw-3x3s2p1c3x2v-rvv-2x2.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("f32-conv-hwc2chw_riscv64") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f32-conv-hwc2chw/f32-conv-hwc2chw-3x3s2p1c3x4-scalar-1x1.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("f32-conv-hwc2chw_riscv64_standalone") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f32-conv-hwc2chw/f32-conv-hwc2chw-3x3s2p1c3x4-scalar-1x1.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("f32-dwconv2d-chw_arch=rv64gcv-abi=lp64d") {
+    cflags = [
+      "-mabi=lp64d",
+      "-march=rv64gcv",
+    ]
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f32-dwconv2d-chw/gen/f32-dwconv2d-chw-3x3p1-minmax-rvv-7x1v.c",
+      "src/src/f32-dwconv2d-chw/gen/f32-dwconv2d-chw-3x3s2p1-minmax-rvv-2x2v.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("f32-dwconv2d-chw_arch=rv64gcv-abi=lp64d_standalone") {
+    cflags = [
+      "-mabi=lp64d",
+      "-march=rv64gcv",
+    ]
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f32-dwconv2d-chw/gen/f32-dwconv2d-chw-3x3p1-minmax-rvv-7x1v.c",
+      "src/src/f32-dwconv2d-chw/gen/f32-dwconv2d-chw-3x3s2p1-minmax-rvv-2x2v.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("f32-dwconv2d-chw_riscv64") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f32-dwconv2d-chw/gen/f32-dwconv2d-chw-3x3p1-minmax-scalar-2x1-acc2.c",
+      "src/src/f32-dwconv2d-chw/gen/f32-dwconv2d-chw-3x3p1-minmax-scalar-4x1.c",
+      "src/src/f32-dwconv2d-chw/gen/f32-dwconv2d-chw-3x3s2p1-minmax-scalar-1x1-acc2.c",
+      "src/src/f32-dwconv2d-chw/gen/f32-dwconv2d-chw-3x3s2p1-minmax-scalar-2x1-acc2.c",
+      "src/src/f32-dwconv2d-chw/gen/f32-dwconv2d-chw-5x5p2-minmax-scalar-1x1-acc5.c",
+      "src/src/f32-dwconv2d-chw/gen/f32-dwconv2d-chw-5x5p2-minmax-scalar-2x1-acc2.c",
+      "src/src/f32-dwconv2d-chw/gen/f32-dwconv2d-chw-5x5s2p2-minmax-scalar-1x1-acc5.c",
+      "src/src/f32-dwconv2d-chw/gen/f32-dwconv2d-chw-5x5s2p2-minmax-scalar-2x1-acc2.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("f32-dwconv2d-chw_riscv64_standalone") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f32-dwconv2d-chw/gen/f32-dwconv2d-chw-3x3p1-minmax-scalar-2x1-acc2.c",
+      "src/src/f32-dwconv2d-chw/gen/f32-dwconv2d-chw-3x3p1-minmax-scalar-4x1.c",
+      "src/src/f32-dwconv2d-chw/gen/f32-dwconv2d-chw-3x3s2p1-minmax-scalar-1x1-acc2.c",
+      "src/src/f32-dwconv2d-chw/gen/f32-dwconv2d-chw-3x3s2p1-minmax-scalar-2x1-acc2.c",
+      "src/src/f32-dwconv2d-chw/gen/f32-dwconv2d-chw-5x5p2-minmax-scalar-1x1-acc5.c",
+      "src/src/f32-dwconv2d-chw/gen/f32-dwconv2d-chw-5x5p2-minmax-scalar-2x1-acc2.c",
+      "src/src/f32-dwconv2d-chw/gen/f32-dwconv2d-chw-5x5s2p2-minmax-scalar-1x1-acc5.c",
+      "src/src/f32-dwconv2d-chw/gen/f32-dwconv2d-chw-5x5s2p2-minmax-scalar-2x1-acc2.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("f32-dwconv_arch=rv64gcv-abi=lp64d") {
+    cflags = [
+      "-mabi=lp64d",
+      "-march=rv64gcv",
+    ]
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f32-dwconv/gen/f32-dwconv-25p8vc-minmax-rvv.c",
+      "src/src/f32-dwconv/gen/f32-dwconv-25p8vc-rvv.c",
+      "src/src/f32-dwconv/gen/f32-dwconv-3p8vc-minmax-rvv.c",
+      "src/src/f32-dwconv/gen/f32-dwconv-3p8vc-rvv.c",
+      "src/src/f32-dwconv/gen/f32-dwconv-4p8vc-minmax-rvv.c",
+      "src/src/f32-dwconv/gen/f32-dwconv-4p8vc-rvv.c",
+      "src/src/f32-dwconv/gen/f32-dwconv-9p8vc-minmax-rvv.c",
+      "src/src/f32-dwconv/gen/f32-dwconv-9p8vc-rvv.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("f32-dwconv_arch=rv64gcv-abi=lp64d_standalone") {
+    cflags = [
+      "-mabi=lp64d",
+      "-march=rv64gcv",
+    ]
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f32-dwconv/gen/f32-dwconv-25p8vc-minmax-rvv.c",
+      "src/src/f32-dwconv/gen/f32-dwconv-25p8vc-rvv.c",
+      "src/src/f32-dwconv/gen/f32-dwconv-3p8vc-minmax-rvv.c",
+      "src/src/f32-dwconv/gen/f32-dwconv-3p8vc-rvv.c",
+      "src/src/f32-dwconv/gen/f32-dwconv-4p8vc-minmax-rvv.c",
+      "src/src/f32-dwconv/gen/f32-dwconv-4p8vc-rvv.c",
+      "src/src/f32-dwconv/gen/f32-dwconv-9p8vc-minmax-rvv.c",
+      "src/src/f32-dwconv/gen/f32-dwconv-9p8vc-rvv.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("f32-dwconv_riscv64") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f32-dwconv/gen/f32-dwconv-25p1c-minmax-scalar-acc2.c",
+      "src/src/f32-dwconv/gen/f32-dwconv-25p1c-scalar-acc2.c",
+      "src/src/f32-dwconv/gen/f32-dwconv-25p2c-minmax-scalar-acc2.c",
+      "src/src/f32-dwconv/gen/f32-dwconv-25p2c-scalar-acc2.c",
+      "src/src/f32-dwconv/gen/f32-dwconv-3p1c-minmax-scalar-acc2.c",
+      "src/src/f32-dwconv/gen/f32-dwconv-3p1c-scalar-acc2.c",
+      "src/src/f32-dwconv/gen/f32-dwconv-4p1c-minmax-scalar-acc2.c",
+      "src/src/f32-dwconv/gen/f32-dwconv-4p1c-scalar-acc2.c",
+      "src/src/f32-dwconv/gen/f32-dwconv-9p1c-minmax-scalar-acc2.c",
+      "src/src/f32-dwconv/gen/f32-dwconv-9p1c-scalar-acc2.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("f32-dwconv_riscv64_standalone") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f32-dwconv/gen/f32-dwconv-25p1c-minmax-scalar-acc2.c",
+      "src/src/f32-dwconv/gen/f32-dwconv-25p1c-scalar-acc2.c",
+      "src/src/f32-dwconv/gen/f32-dwconv-25p2c-minmax-scalar-acc2.c",
+      "src/src/f32-dwconv/gen/f32-dwconv-25p2c-scalar-acc2.c",
+      "src/src/f32-dwconv/gen/f32-dwconv-3p1c-minmax-scalar-acc2.c",
+      "src/src/f32-dwconv/gen/f32-dwconv-3p1c-scalar-acc2.c",
+      "src/src/f32-dwconv/gen/f32-dwconv-4p1c-minmax-scalar-acc2.c",
+      "src/src/f32-dwconv/gen/f32-dwconv-4p1c-scalar-acc2.c",
+      "src/src/f32-dwconv/gen/f32-dwconv-9p1c-minmax-scalar-acc2.c",
+      "src/src/f32-dwconv/gen/f32-dwconv-9p1c-scalar-acc2.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("f32-f16-vcvt_riscv64") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f32-f16-vcvt/gen/f32-f16-vcvt-scalar-fabsf-u2.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("f32-f16-vcvt_riscv64_standalone") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f32-f16-vcvt/gen/f32-f16-vcvt-scalar-fabsf-u2.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("f32-gemm_arch=rv64gcv-abi=lp64d") {
+    cflags = [
+      "-mabi=lp64d",
+      "-march=rv64gcv",
+    ]
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f32-gemm/gen/f32-gemm-1x4v-minmax-rvv.c",
+      "src/src/f32-gemm/gen/f32-gemm-7x4v-minmax-rvv.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("f32-gemm_arch=rv64gcv-abi=lp64d_standalone") {
+    cflags = [
+      "-mabi=lp64d",
+      "-march=rv64gcv",
+    ]
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f32-gemm/gen/f32-gemm-1x4v-minmax-rvv.c",
+      "src/src/f32-gemm/gen/f32-gemm-7x4v-minmax-rvv.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("f32-gemm_riscv64") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f32-gemm/gen/f32-gemm-1x4-minmax-scalar.c",
+      "src/src/f32-gemm/gen/f32-gemm-1x4-relu-scalar.c",
+      "src/src/f32-gemm/gen/f32-gemm-1x4-scalar.c",
+      "src/src/f32-gemm/gen/f32-gemm-2x4-minmax-scalar.c",
+      "src/src/f32-gemm/gen/f32-gemm-2x4-relu-scalar.c",
+      "src/src/f32-gemm/gen/f32-gemm-2x4-scalar.c",
+      "src/src/f32-gemm/gen/f32-gemm-4x2-minmax-scalar.c",
+      "src/src/f32-gemm/gen/f32-gemm-4x2-scalar.c",
+      "src/src/f32-gemm/gen/f32-gemm-4x4-minmax-scalar.c",
+      "src/src/f32-gemm/gen/f32-gemm-4x4-relu-scalar.c",
+      "src/src/f32-gemm/gen/f32-gemm-4x4-scalar.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("f32-gemm_riscv64_standalone") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f32-gemm/gen/f32-gemm-1x4-minmax-scalar.c",
+      "src/src/f32-gemm/gen/f32-gemm-1x4-relu-scalar.c",
+      "src/src/f32-gemm/gen/f32-gemm-1x4-scalar.c",
+      "src/src/f32-gemm/gen/f32-gemm-2x4-minmax-scalar.c",
+      "src/src/f32-gemm/gen/f32-gemm-2x4-relu-scalar.c",
+      "src/src/f32-gemm/gen/f32-gemm-2x4-scalar.c",
+      "src/src/f32-gemm/gen/f32-gemm-4x2-minmax-scalar.c",
+      "src/src/f32-gemm/gen/f32-gemm-4x2-scalar.c",
+      "src/src/f32-gemm/gen/f32-gemm-4x4-minmax-scalar.c",
+      "src/src/f32-gemm/gen/f32-gemm-4x4-relu-scalar.c",
+      "src/src/f32-gemm/gen/f32-gemm-4x4-scalar.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("f32-ibilinear-chw_riscv64") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f32-ibilinear-chw/gen/f32-ibilinear-chw-scalar-p4.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("f32-ibilinear-chw_riscv64_standalone") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f32-ibilinear-chw/gen/f32-ibilinear-chw-scalar-p4.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("f32-ibilinear_riscv64") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f32-ibilinear/gen/f32-ibilinear-scalar-c2.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("f32-ibilinear_riscv64_standalone") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f32-ibilinear/gen/f32-ibilinear-scalar-c2.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("f32-igemm_arch=rv64gcv-abi=lp64d") {
+    cflags = [
+      "-mabi=lp64d",
+      "-march=rv64gcv",
+    ]
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f32-igemm/gen/f32-igemm-1x4v-minmax-rvv.c",
+      "src/src/f32-igemm/gen/f32-igemm-7x4v-minmax-rvv.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("f32-igemm_arch=rv64gcv-abi=lp64d_standalone") {
+    cflags = [
+      "-mabi=lp64d",
+      "-march=rv64gcv",
+    ]
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f32-igemm/gen/f32-igemm-1x4v-minmax-rvv.c",
+      "src/src/f32-igemm/gen/f32-igemm-7x4v-minmax-rvv.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("f32-igemm_riscv64") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f32-igemm/gen/f32-igemm-1x4-minmax-scalar.c",
+      "src/src/f32-igemm/gen/f32-igemm-1x4-relu-scalar.c",
+      "src/src/f32-igemm/gen/f32-igemm-1x4-scalar.c",
+      "src/src/f32-igemm/gen/f32-igemm-2x4-minmax-scalar.c",
+      "src/src/f32-igemm/gen/f32-igemm-2x4-relu-scalar.c",
+      "src/src/f32-igemm/gen/f32-igemm-2x4-scalar.c",
+      "src/src/f32-igemm/gen/f32-igemm-4x2-minmax-scalar.c",
+      "src/src/f32-igemm/gen/f32-igemm-4x2-scalar.c",
+      "src/src/f32-igemm/gen/f32-igemm-4x4-minmax-scalar.c",
+      "src/src/f32-igemm/gen/f32-igemm-4x4-relu-scalar.c",
+      "src/src/f32-igemm/gen/f32-igemm-4x4-scalar.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("f32-igemm_riscv64_standalone") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f32-igemm/gen/f32-igemm-1x4-minmax-scalar.c",
+      "src/src/f32-igemm/gen/f32-igemm-1x4-relu-scalar.c",
+      "src/src/f32-igemm/gen/f32-igemm-1x4-scalar.c",
+      "src/src/f32-igemm/gen/f32-igemm-2x4-minmax-scalar.c",
+      "src/src/f32-igemm/gen/f32-igemm-2x4-relu-scalar.c",
+      "src/src/f32-igemm/gen/f32-igemm-2x4-scalar.c",
+      "src/src/f32-igemm/gen/f32-igemm-4x2-minmax-scalar.c",
+      "src/src/f32-igemm/gen/f32-igemm-4x2-scalar.c",
+      "src/src/f32-igemm/gen/f32-igemm-4x4-minmax-scalar.c",
+      "src/src/f32-igemm/gen/f32-igemm-4x4-relu-scalar.c",
+      "src/src/f32-igemm/gen/f32-igemm-4x4-scalar.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("f32-maxpool_arch=rv64gcv-abi=lp64d") {
+    cflags = [
+      "-mabi=lp64d",
+      "-march=rv64gcv",
+    ]
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f32-maxpool/gen/f32-maxpool-9p-minmax-rvv-u2v.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("f32-maxpool_arch=rv64gcv-abi=lp64d_standalone") {
+    cflags = [
+      "-mabi=lp64d",
+      "-march=rv64gcv",
+    ]
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f32-maxpool/gen/f32-maxpool-9p-minmax-rvv-u2v.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("f32-maxpool_riscv64") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f32-maxpool/gen/f32-maxpool-9p-minmax-scalar-u1.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("f32-maxpool_riscv64_standalone") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f32-maxpool/gen/f32-maxpool-9p-minmax-scalar-u1.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("f32-qc4w-gemm_riscv64") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f32-qc4w-gemm/gen/f32-qc4w-gemm-1x4-minmax-scalar.c",
+      "src/src/f32-qc4w-gemm/gen/f32-qc4w-gemm-4x4-minmax-scalar.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("f32-qc4w-gemm_riscv64_standalone") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f32-qc4w-gemm/gen/f32-qc4w-gemm-1x4-minmax-scalar.c",
+      "src/src/f32-qc4w-gemm/gen/f32-qc4w-gemm-4x4-minmax-scalar.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("f32-qc8w-gemm_riscv64") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f32-qc8w-gemm/gen/f32-qc8w-gemm-1x4-minmax-scalar.c",
+      "src/src/f32-qc8w-gemm/gen/f32-qc8w-gemm-4x4-minmax-scalar.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("f32-qc8w-gemm_riscv64_standalone") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f32-qc8w-gemm/gen/f32-qc8w-gemm-1x4-minmax-scalar.c",
+      "src/src/f32-qc8w-gemm/gen/f32-qc8w-gemm-4x4-minmax-scalar.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("f32-qs8-vcvt_arch=rv64gcv-abi=lp64d") {
+    cflags = [
+      "-mabi=lp64d",
+      "-march=rv64gcv",
+    ]
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f32-qs8-vcvt/gen/f32-qs8-vcvt-rvv-u2v.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("f32-qs8-vcvt_arch=rv64gcv-abi=lp64d_standalone") {
+    cflags = [
+      "-mabi=lp64d",
+      "-march=rv64gcv",
+    ]
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f32-qs8-vcvt/gen/f32-qs8-vcvt-rvv-u2v.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("f32-qs8-vcvt_riscv64") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f32-qs8-vcvt/gen/f32-qs8-vcvt-scalar-imagic-u1.c",
+      "src/src/f32-qs8-vcvt/gen/f32-qs8-vcvt-scalar-imagic-u4.c",
+      "src/src/f32-qs8-vcvt/gen/f32-qs8-vcvt-scalar-lrintf-u4.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("f32-qs8-vcvt_riscv64_standalone") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f32-qs8-vcvt/gen/f32-qs8-vcvt-scalar-imagic-u1.c",
+      "src/src/f32-qs8-vcvt/gen/f32-qs8-vcvt-scalar-imagic-u4.c",
+      "src/src/f32-qs8-vcvt/gen/f32-qs8-vcvt-scalar-lrintf-u4.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("f32-qu8-vcvt_arch=rv64gcv-abi=lp64d") {
+    cflags = [
+      "-mabi=lp64d",
+      "-march=rv64gcv",
+    ]
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f32-qu8-vcvt/gen/f32-qu8-vcvt-rvv-u2v.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("f32-qu8-vcvt_arch=rv64gcv-abi=lp64d_standalone") {
+    cflags = [
+      "-mabi=lp64d",
+      "-march=rv64gcv",
+    ]
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f32-qu8-vcvt/gen/f32-qu8-vcvt-rvv-u2v.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("f32-qu8-vcvt_riscv64") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f32-qu8-vcvt/gen/f32-qu8-vcvt-scalar-imagic-u1.c",
+      "src/src/f32-qu8-vcvt/gen/f32-qu8-vcvt-scalar-imagic-u4.c",
+      "src/src/f32-qu8-vcvt/gen/f32-qu8-vcvt-scalar-lrintf-u4.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("f32-qu8-vcvt_riscv64_standalone") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f32-qu8-vcvt/gen/f32-qu8-vcvt-scalar-imagic-u1.c",
+      "src/src/f32-qu8-vcvt/gen/f32-qu8-vcvt-scalar-imagic-u4.c",
+      "src/src/f32-qu8-vcvt/gen/f32-qu8-vcvt-scalar-lrintf-u4.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("f32-raddstoreexpminusmax_arch=rv64gcv-abi=lp64d") {
+    cflags = [
+      "-mabi=lp64d",
+      "-march=rv64gcv",
+    ]
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f32-raddstoreexpminusmax/gen/f32-raddstoreexpminusmax-rvv-rr2-p6-u4v.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("f32-raddstoreexpminusmax_arch=rv64gcv-abi=lp64d_standalone") {
+    cflags = [
+      "-mabi=lp64d",
+      "-march=rv64gcv",
+    ]
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f32-raddstoreexpminusmax/gen/f32-raddstoreexpminusmax-rvv-rr2-p6-u4v.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("f32-raddstoreexpminusmax_riscv64") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f32-raddstoreexpminusmax/gen/f32-raddstoreexpminusmax-scalar-rr2-p5-u4-acc2.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("f32-raddstoreexpminusmax_riscv64_standalone") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f32-raddstoreexpminusmax/gen/f32-raddstoreexpminusmax-scalar-rr2-p5-u4-acc2.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("f32-rdminmax_riscv64") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f32-rdminmax/gen/f32-rdmax-2p2x-scalar-c2.c",
+      "src/src/f32-rdminmax/gen/f32-rdmin-2p2x-scalar-c2.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("f32-rdminmax_riscv64_standalone") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f32-rdminmax/gen/f32-rdmax-2p2x-scalar-c2.c",
+      "src/src/f32-rdminmax/gen/f32-rdmin-2p2x-scalar-c2.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("f32-rdsum_arch=rv64gcv-abi=lp64d") {
+    cflags = [
+      "-mabi=lp64d",
+      "-march=rv64gcv",
+    ]
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f32-rdsum/gen/f32-rdsum-7p7x-minmax-rvv-u4v.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("f32-rdsum_arch=rv64gcv-abi=lp64d_standalone") {
+    cflags = [
+      "-mabi=lp64d",
+      "-march=rv64gcv",
+    ]
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f32-rdsum/gen/f32-rdsum-7p7x-minmax-rvv-u4v.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("f32-rdsum_riscv64") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f32-rdsum/gen/f32-rdsum-7p7x-minmax-scalar.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("f32-rdsum_riscv64_standalone") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f32-rdsum/gen/f32-rdsum-7p7x-minmax-scalar.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("f32-rminmax_arch=rv64gcv-abi=lp64d") {
+    cflags = [
+      "-mabi=lp64d",
+      "-march=rv64gcv",
+    ]
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f32-rminmax/gen/f32-rmax-rvv-u8v.c",
+      "src/src/f32-rminmax/gen/f32-rmin-rvv-u8v.c",
+      "src/src/f32-rminmax/gen/f32-rminmax-rvv-u8v.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("f32-rminmax_arch=rv64gcv-abi=lp64d_standalone") {
+    cflags = [
+      "-mabi=lp64d",
+      "-march=rv64gcv",
+    ]
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f32-rminmax/gen/f32-rmax-rvv-u8v.c",
+      "src/src/f32-rminmax/gen/f32-rmin-rvv-u8v.c",
+      "src/src/f32-rminmax/gen/f32-rminmax-rvv-u8v.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("f32-rminmax_riscv64") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f32-rminmax/gen/f32-rmax-scalar-u4-acc4.c",
+      "src/src/f32-rminmax/gen/f32-rmin-scalar-u4-acc4.c",
+      "src/src/f32-rminmax/gen/f32-rminmax-scalar-u4-acc4.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("f32-rminmax_riscv64_standalone") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f32-rminmax/gen/f32-rmax-scalar-u4-acc4.c",
+      "src/src/f32-rminmax/gen/f32-rmin-scalar-u4-acc4.c",
+      "src/src/f32-rminmax/gen/f32-rminmax-scalar-u4-acc4.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("f32-rsum_riscv64") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f32-rsum/gen/f32-rsum-scalar-u4-acc4.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("f32-rsum_riscv64_standalone") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f32-rsum/gen/f32-rsum-scalar-u4-acc4.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("f32-spmm_arch=rv64gcv-abi=lp64d") {
+    cflags = [
+      "-mabi=lp64d",
+      "-march=rv64gcv",
+    ]
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f32-spmm/gen/f32-spmm-4vx4-minmax-rvv.c",
+      "src/src/f32-spmm/gen/f32-spmm-8vx1-minmax-rvv.c",
+      "src/src/f32-spmm/gen/f32-spmm-8vx2-minmax-rvv.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("f32-spmm_arch=rv64gcv-abi=lp64d_standalone") {
+    cflags = [
+      "-mabi=lp64d",
+      "-march=rv64gcv",
+    ]
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f32-spmm/gen/f32-spmm-4vx4-minmax-rvv.c",
+      "src/src/f32-spmm/gen/f32-spmm-8vx1-minmax-rvv.c",
+      "src/src/f32-spmm/gen/f32-spmm-8vx2-minmax-rvv.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("f32-spmm_riscv64") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f32-spmm/gen/f32-spmm-8x1-minmax-scalar.c",
+      "src/src/f32-spmm/gen/f32-spmm-8x2-minmax-scalar.c",
+      "src/src/f32-spmm/gen/f32-spmm-8x4-minmax-scalar.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("f32-spmm_riscv64_standalone") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f32-spmm/gen/f32-spmm-8x1-minmax-scalar.c",
+      "src/src/f32-spmm/gen/f32-spmm-8x2-minmax-scalar.c",
+      "src/src/f32-spmm/gen/f32-spmm-8x4-minmax-scalar.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("f32-vapproxgelu_riscv64") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f32-vapproxgelu/gen/f32-vapproxgelu-scalar-rational-12-10-div.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("f32-vapproxgelu_riscv64_standalone") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f32-vapproxgelu/gen/f32-vapproxgelu-scalar-rational-12-10-div.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("f32-vbinary_arch=rv64gcv-abi=lp64d") {
+    cflags = [
+      "-mabi=lp64d",
+      "-march=rv64gcv",
+    ]
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f32-vbinary/gen/f32-vadd-rvv-u8v.c",
+      "src/src/f32-vbinary/gen/f32-vaddc-rvv-u8v.c",
+      "src/src/f32-vbinary/gen/f32-vdiv-rvv-u8v.c",
+      "src/src/f32-vbinary/gen/f32-vdivc-rvv-u8v.c",
+      "src/src/f32-vbinary/gen/f32-vmax-rvv-u8v.c",
+      "src/src/f32-vbinary/gen/f32-vmaxc-rvv-u8v.c",
+      "src/src/f32-vbinary/gen/f32-vmin-rvv-u8v.c",
+      "src/src/f32-vbinary/gen/f32-vminc-rvv-u8v.c",
+      "src/src/f32-vbinary/gen/f32-vmul-rvv-u8v.c",
+      "src/src/f32-vbinary/gen/f32-vmulc-rvv-u8v.c",
+      "src/src/f32-vbinary/gen/f32-vrdivc-rvv-u8v.c",
+      "src/src/f32-vbinary/gen/f32-vrsubc-rvv-u8v.c",
+      "src/src/f32-vbinary/gen/f32-vsqrdiff-rvv-u8v.c",
+      "src/src/f32-vbinary/gen/f32-vsqrdiffc-rvv-u8v.c",
+      "src/src/f32-vbinary/gen/f32-vsub-rvv-u8v.c",
+      "src/src/f32-vbinary/gen/f32-vsubc-rvv-u8v.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("f32-vbinary_arch=rv64gcv-abi=lp64d_standalone") {
+    cflags = [
+      "-mabi=lp64d",
+      "-march=rv64gcv",
+    ]
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f32-vbinary/gen/f32-vadd-rvv-u8v.c",
+      "src/src/f32-vbinary/gen/f32-vaddc-rvv-u8v.c",
+      "src/src/f32-vbinary/gen/f32-vdiv-rvv-u8v.c",
+      "src/src/f32-vbinary/gen/f32-vdivc-rvv-u8v.c",
+      "src/src/f32-vbinary/gen/f32-vmax-rvv-u8v.c",
+      "src/src/f32-vbinary/gen/f32-vmaxc-rvv-u8v.c",
+      "src/src/f32-vbinary/gen/f32-vmin-rvv-u8v.c",
+      "src/src/f32-vbinary/gen/f32-vminc-rvv-u8v.c",
+      "src/src/f32-vbinary/gen/f32-vmul-rvv-u8v.c",
+      "src/src/f32-vbinary/gen/f32-vmulc-rvv-u8v.c",
+      "src/src/f32-vbinary/gen/f32-vrdivc-rvv-u8v.c",
+      "src/src/f32-vbinary/gen/f32-vrsubc-rvv-u8v.c",
+      "src/src/f32-vbinary/gen/f32-vsqrdiff-rvv-u8v.c",
+      "src/src/f32-vbinary/gen/f32-vsqrdiffc-rvv-u8v.c",
+      "src/src/f32-vbinary/gen/f32-vsub-rvv-u8v.c",
+      "src/src/f32-vbinary/gen/f32-vsubc-rvv-u8v.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("f32-vbinary_riscv64") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f32-vbinary/gen/f32-vadd-scalar-u8.c",
+      "src/src/f32-vbinary/gen/f32-vaddc-scalar-u8.c",
+      "src/src/f32-vbinary/gen/f32-vdiv-scalar-u2.c",
+      "src/src/f32-vbinary/gen/f32-vdivc-scalar-u2.c",
+      "src/src/f32-vbinary/gen/f32-vmax-scalar-u8.c",
+      "src/src/f32-vbinary/gen/f32-vmaxc-scalar-u8.c",
+      "src/src/f32-vbinary/gen/f32-vmin-scalar-u8.c",
+      "src/src/f32-vbinary/gen/f32-vminc-scalar-u8.c",
+      "src/src/f32-vbinary/gen/f32-vmul-scalar-u8.c",
+      "src/src/f32-vbinary/gen/f32-vmulc-scalar-u8.c",
+      "src/src/f32-vbinary/gen/f32-vprelu-scalar-u8.c",
+      "src/src/f32-vbinary/gen/f32-vpreluc-scalar-u8.c",
+      "src/src/f32-vbinary/gen/f32-vrdivc-scalar-u2.c",
+      "src/src/f32-vbinary/gen/f32-vrpreluc-scalar-u8.c",
+      "src/src/f32-vbinary/gen/f32-vrsubc-scalar-u8.c",
+      "src/src/f32-vbinary/gen/f32-vsqrdiff-scalar-u8.c",
+      "src/src/f32-vbinary/gen/f32-vsqrdiffc-scalar-u8.c",
+      "src/src/f32-vbinary/gen/f32-vsub-scalar-u8.c",
+      "src/src/f32-vbinary/gen/f32-vsubc-scalar-u8.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("f32-vbinary_riscv64_standalone") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f32-vbinary/gen/f32-vadd-scalar-u8.c",
+      "src/src/f32-vbinary/gen/f32-vaddc-scalar-u8.c",
+      "src/src/f32-vbinary/gen/f32-vdiv-scalar-u2.c",
+      "src/src/f32-vbinary/gen/f32-vdivc-scalar-u2.c",
+      "src/src/f32-vbinary/gen/f32-vmax-scalar-u8.c",
+      "src/src/f32-vbinary/gen/f32-vmaxc-scalar-u8.c",
+      "src/src/f32-vbinary/gen/f32-vmin-scalar-u8.c",
+      "src/src/f32-vbinary/gen/f32-vminc-scalar-u8.c",
+      "src/src/f32-vbinary/gen/f32-vmul-scalar-u8.c",
+      "src/src/f32-vbinary/gen/f32-vmulc-scalar-u8.c",
+      "src/src/f32-vbinary/gen/f32-vprelu-scalar-u8.c",
+      "src/src/f32-vbinary/gen/f32-vpreluc-scalar-u8.c",
+      "src/src/f32-vbinary/gen/f32-vrdivc-scalar-u2.c",
+      "src/src/f32-vbinary/gen/f32-vrpreluc-scalar-u8.c",
+      "src/src/f32-vbinary/gen/f32-vrsubc-scalar-u8.c",
+      "src/src/f32-vbinary/gen/f32-vsqrdiff-scalar-u8.c",
+      "src/src/f32-vbinary/gen/f32-vsqrdiffc-scalar-u8.c",
+      "src/src/f32-vbinary/gen/f32-vsub-scalar-u8.c",
+      "src/src/f32-vbinary/gen/f32-vsubc-scalar-u8.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("f32-vclamp_riscv64") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f32-vclamp/gen/f32-vclamp-scalar-u4.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("f32-vclamp_riscv64_standalone") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f32-vclamp/gen/f32-vclamp-scalar-u4.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("f32-vcmul_arch=rv64gcv-abi=lp64d") {
+    cflags = [
+      "-mabi=lp64d",
+      "-march=rv64gcv",
+    ]
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f32-vcmul/gen/f32-vcmul-rvv-u2v.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("f32-vcmul_arch=rv64gcv-abi=lp64d_standalone") {
+    cflags = [
+      "-mabi=lp64d",
+      "-march=rv64gcv",
+    ]
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f32-vcmul/gen/f32-vcmul-rvv-u2v.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("f32-vcmul_riscv64") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f32-vcmul/gen/f32-vcmul-scalar-u4.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("f32-vcmul_riscv64_standalone") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f32-vcmul/gen/f32-vcmul-scalar-u4.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("f32-vcopysign_riscv64") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f32-vcopysign/gen/f32-vcopysign-scalar.c",
+      "src/src/f32-vcopysign/gen/f32-vcopysignc-scalar.c",
+      "src/src/f32-vcopysign/gen/f32-vrcopysignc-scalar.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("f32-vcopysign_riscv64_standalone") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f32-vcopysign/gen/f32-vcopysign-scalar.c",
+      "src/src/f32-vcopysign/gen/f32-vcopysignc-scalar.c",
+      "src/src/f32-vcopysign/gen/f32-vrcopysignc-scalar.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("f32-vcos_riscv64") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f32-vcos/gen/f32-vcos-scalar-rational-5-4-div.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("f32-vcos_riscv64_standalone") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f32-vcos/gen/f32-vcos-scalar-rational-5-4-div.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("f32-velu_riscv64") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f32-velu/gen/f32-velu-scalar-rr2-lut16-p3-u2.c",
+      "src/src/f32-velu/gen/f32-velu-scalar-rr2-lut16-p3-u4.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("f32-velu_riscv64_standalone") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f32-velu/gen/f32-velu-scalar-rr2-lut16-p3-u2.c",
+      "src/src/f32-velu/gen/f32-velu-scalar-rr2-lut16-p3-u4.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("f32-vexp_riscv64") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f32-vexp/gen/f32-vexp-scalar-rational-3-2-div.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("f32-vexp_riscv64_standalone") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f32-vexp/gen/f32-vexp-scalar-rational-3-2-div.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("f32-vgelu_riscv64") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f32-vgelu/gen/f32-vgelu-scalar-rational-12-10-div.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("f32-vgelu_riscv64_standalone") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f32-vgelu/gen/f32-vgelu-scalar-rational-12-10-div.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("f32-vhswish_riscv64") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f32-vhswish/gen/f32-vhswish-scalar-u4.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("f32-vhswish_riscv64_standalone") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f32-vhswish/gen/f32-vhswish-scalar-u4.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("f32-vlog_riscv64") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f32-vlog/gen/f32-vlog-scalar-rational-3-3-div.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("f32-vlog_riscv64_standalone") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f32-vlog/gen/f32-vlog-scalar-rational-3-3-div.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("f32-vlrelu_arch=rv64gcv-abi=lp64d") {
+    cflags = [
+      "-mabi=lp64d",
+      "-march=rv64gcv",
+    ]
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f32-vlrelu/gen/f32-vlrelu-rvv-u4v.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("f32-vlrelu_arch=rv64gcv-abi=lp64d_standalone") {
+    cflags = [
+      "-mabi=lp64d",
+      "-march=rv64gcv",
+    ]
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f32-vlrelu/gen/f32-vlrelu-rvv-u4v.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("f32-vlrelu_riscv64") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f32-vlrelu/gen/f32-vlrelu-scalar-u4.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("f32-vlrelu_riscv64_standalone") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f32-vlrelu/gen/f32-vlrelu-scalar-u4.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("f32-vmulcaddc_riscv64") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f32-vmulcaddc/gen/f32-vmulcaddc-c1-minmax-scalar-2x.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("f32-vmulcaddc_riscv64_standalone") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f32-vmulcaddc/gen/f32-vmulcaddc-c1-minmax-scalar-2x.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("f32-vrelu_arch=rv64gcv-abi=lp64d") {
+    cflags = [
+      "-mabi=lp64d",
+      "-march=rv64gcv",
+    ]
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f32-vrelu/gen/f32-vrelu-rvv-u4v.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("f32-vrelu_arch=rv64gcv-abi=lp64d_standalone") {
+    cflags = [
+      "-mabi=lp64d",
+      "-march=rv64gcv",
+    ]
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f32-vrelu/gen/f32-vrelu-rvv-u4v.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("f32-vrelu_riscv64") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f32-vrelu/gen/f32-vrelu-scalar-u8.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("f32-vrelu_riscv64_standalone") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f32-vrelu/gen/f32-vrelu-scalar-u8.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("f32-vrnd_arch=rv64gcv-abi=lp64d") {
+    cflags = [
+      "-mabi=lp64d",
+      "-march=rv64gcv",
+    ]
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f32-vrnd/gen/f32-vrndd-rvv-u4v.c",
+      "src/src/f32-vrnd/gen/f32-vrndne-rvv-u4v.c",
+      "src/src/f32-vrnd/gen/f32-vrndu-rvv-u4v.c",
+      "src/src/f32-vrnd/gen/f32-vrndz-rvv-u4v.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("f32-vrnd_arch=rv64gcv-abi=lp64d_standalone") {
+    cflags = [
+      "-mabi=lp64d",
+      "-march=rv64gcv",
+    ]
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f32-vrnd/gen/f32-vrndd-rvv-u4v.c",
+      "src/src/f32-vrnd/gen/f32-vrndne-rvv-u4v.c",
+      "src/src/f32-vrnd/gen/f32-vrndu-rvv-u4v.c",
+      "src/src/f32-vrnd/gen/f32-vrndz-rvv-u4v.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("f32-vrnd_riscv64") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f32-vrnd/gen/f32-vrndd-scalar-libm-u1.c",
+      "src/src/f32-vrnd/gen/f32-vrndd-scalar-libm-u4.c",
+      "src/src/f32-vrnd/gen/f32-vrndne-scalar-libm-u1.c",
+      "src/src/f32-vrnd/gen/f32-vrndne-scalar-libm-u4.c",
+      "src/src/f32-vrnd/gen/f32-vrndu-scalar-libm-u1.c",
+      "src/src/f32-vrnd/gen/f32-vrndu-scalar-libm-u4.c",
+      "src/src/f32-vrnd/gen/f32-vrndz-scalar-libm-u1.c",
+      "src/src/f32-vrnd/gen/f32-vrndz-scalar-libm-u4.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("f32-vrnd_riscv64_standalone") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f32-vrnd/gen/f32-vrndd-scalar-libm-u1.c",
+      "src/src/f32-vrnd/gen/f32-vrndd-scalar-libm-u4.c",
+      "src/src/f32-vrnd/gen/f32-vrndne-scalar-libm-u1.c",
+      "src/src/f32-vrnd/gen/f32-vrndne-scalar-libm-u4.c",
+      "src/src/f32-vrnd/gen/f32-vrndu-scalar-libm-u1.c",
+      "src/src/f32-vrnd/gen/f32-vrndu-scalar-libm-u4.c",
+      "src/src/f32-vrnd/gen/f32-vrndz-scalar-libm-u1.c",
+      "src/src/f32-vrnd/gen/f32-vrndz-scalar-libm-u4.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("f32-vrsqrt_arch=rv64gcv-abi=lp64d") {
+    cflags = [
+      "-mabi=lp64d",
+      "-march=rv64gcv",
+    ]
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f32-vrsqrt/gen/f32-vrsqrt-rvv-rsqrt-u4v.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("f32-vrsqrt_arch=rv64gcv-abi=lp64d_standalone") {
+    cflags = [
+      "-mabi=lp64d",
+      "-march=rv64gcv",
+    ]
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f32-vrsqrt/gen/f32-vrsqrt-rvv-rsqrt-u4v.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("f32-vrsqrt_riscv64") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f32-vrsqrt/gen/f32-vrsqrt-scalar-rsqrt-u1.c",
+      "src/src/f32-vrsqrt/gen/f32-vrsqrt-scalar-rsqrt-u4.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("f32-vrsqrt_riscv64_standalone") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f32-vrsqrt/gen/f32-vrsqrt-scalar-rsqrt-u1.c",
+      "src/src/f32-vrsqrt/gen/f32-vrsqrt-scalar-rsqrt-u4.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("f32-vsigmoid_riscv64") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f32-vsigmoid/gen/f32-vsigmoid-scalar-rr2-lut64-p2-div-u2.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("f32-vsigmoid_riscv64_standalone") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f32-vsigmoid/gen/f32-vsigmoid-scalar-rr2-lut64-p2-div-u2.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("f32-vsin_riscv64") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f32-vsin/gen/f32-vsin-scalar-rational-5-4-div.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("f32-vsin_riscv64_standalone") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f32-vsin/gen/f32-vsin-scalar-rational-5-4-div.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("f32-vsqrt_riscv64") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f32-vsqrt/gen/f32-vsqrt-scalar-sqrt-u1.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("f32-vsqrt_riscv64_standalone") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f32-vsqrt/gen/f32-vsqrt-scalar-sqrt-u1.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("f32-vtanh_riscv64") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f32-vtanh/gen/f32-vtanh-scalar-rational-9-8-div.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("f32-vtanh_riscv64_standalone") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f32-vtanh/gen/f32-vtanh-scalar-rational-9-8-div.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("f32-vunary_riscv64") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f32-vunary/gen/f32-vabs-scalar.c",
+      "src/src/f32-vunary/gen/f32-vneg-scalar.c",
+      "src/src/f32-vunary/gen/f32-vsqr-scalar.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("f32-vunary_riscv64_standalone") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/f32-vunary/gen/f32-vabs-scalar.c",
+      "src/src/f32-vunary/gen/f32-vneg-scalar.c",
+      "src/src/f32-vunary/gen/f32-vsqr-scalar.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("operators_riscv64") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/operators/argmax-pooling-nhwc.c",
+      "src/src/operators/average-pooling-nhwc.c",
+      "src/src/operators/batch-matrix-multiply-nc.c",
+      "src/src/operators/binary-elementwise-nd.c",
+      "src/src/operators/constant-pad-nd.c",
+      "src/src/operators/convolution-nchw.c",
+      "src/src/operators/convolution-nhwc.c",
+      "src/src/operators/deconvolution-nhwc.c",
+      "src/src/operators/dynamic-fully-connected-nc.c",
+      "src/src/operators/fully-connected-nc.c",
+      "src/src/operators/max-pooling-nhwc.c",
+      "src/src/operators/pack-lh.c",
+      "src/src/operators/reduce-nd.c",
+      "src/src/operators/resize-bilinear-nchw.c",
+      "src/src/operators/resize-bilinear-nhwc.c",
+      "src/src/operators/rope-nthc.c",
+      "src/src/operators/slice-nd.c",
+      "src/src/operators/softmax-nc.c",
+      "src/src/operators/transpose-nd.c",
+      "src/src/operators/unary-elementwise-nc.c",
+      "src/src/operators/unpooling-nhwc.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("operators_riscv64_standalone") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/operators/argmax-pooling-nhwc.c",
+      "src/src/operators/average-pooling-nhwc.c",
+      "src/src/operators/batch-matrix-multiply-nc.c",
+      "src/src/operators/binary-elementwise-nd.c",
+      "src/src/operators/constant-pad-nd.c",
+      "src/src/operators/convolution-nchw.c",
+      "src/src/operators/convolution-nhwc.c",
+      "src/src/operators/deconvolution-nhwc.c",
+      "src/src/operators/dynamic-fully-connected-nc.c",
+      "src/src/operators/fully-connected-nc.c",
+      "src/src/operators/max-pooling-nhwc.c",
+      "src/src/operators/pack-lh.c",
+      "src/src/operators/reduce-nd.c",
+      "src/src/operators/resize-bilinear-nchw.c",
+      "src/src/operators/resize-bilinear-nhwc.c",
+      "src/src/operators/rope-nthc.c",
+      "src/src/operators/slice-nd.c",
+      "src/src/operators/softmax-nc.c",
+      "src/src/operators/transpose-nd.c",
+      "src/src/operators/unary-elementwise-nc.c",
+      "src/src/operators/unpooling-nhwc.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("qd8-f32-qb4w-gemm_riscv64") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/qd8-f32-qb4w-gemm/gen/qd8-f32-qb4w-gemm-1x4-minmax-scalar.c",
+      "src/src/qd8-f32-qb4w-gemm/gen/qd8-f32-qb4w-gemm-4x4-minmax-scalar.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("qd8-f32-qb4w-gemm_riscv64_standalone") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/qd8-f32-qb4w-gemm/gen/qd8-f32-qb4w-gemm-1x4-minmax-scalar.c",
+      "src/src/qd8-f32-qb4w-gemm/gen/qd8-f32-qb4w-gemm-4x4-minmax-scalar.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("qd8-f32-qc4w-gemm_riscv64") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/qd8-f32-qc4w-gemm/gen/qd8-f32-qc4w-gemm-1x4-minmax-scalar.c",
+      "src/src/qd8-f32-qc4w-gemm/gen/qd8-f32-qc4w-gemm-4x4-minmax-scalar.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("qd8-f32-qc4w-gemm_riscv64_standalone") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/qd8-f32-qc4w-gemm/gen/qd8-f32-qc4w-gemm-1x4-minmax-scalar.c",
+      "src/src/qd8-f32-qc4w-gemm/gen/qd8-f32-qc4w-gemm-4x4-minmax-scalar.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("qd8-f32-qc8w-gemm_riscv64") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/qd8-f32-qc8w-gemm/gen/qd8-f32-qc8w-gemm-1x2-minmax-scalar.c",
+      "src/src/qd8-f32-qc8w-gemm/gen/qd8-f32-qc8w-gemm-1x4-minmax-scalar.c",
+      "src/src/qd8-f32-qc8w-gemm/gen/qd8-f32-qc8w-gemm-2x2-minmax-scalar.c",
+      "src/src/qd8-f32-qc8w-gemm/gen/qd8-f32-qc8w-gemm-4x4-minmax-scalar.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("qd8-f32-qc8w-gemm_riscv64_standalone") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/qd8-f32-qc8w-gemm/gen/qd8-f32-qc8w-gemm-1x2-minmax-scalar.c",
+      "src/src/qd8-f32-qc8w-gemm/gen/qd8-f32-qc8w-gemm-1x4-minmax-scalar.c",
+      "src/src/qd8-f32-qc8w-gemm/gen/qd8-f32-qc8w-gemm-2x2-minmax-scalar.c",
+      "src/src/qd8-f32-qc8w-gemm/gen/qd8-f32-qc8w-gemm-4x4-minmax-scalar.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("qd8-f32-qc8w-igemm_riscv64") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/qd8-f32-qc8w-igemm/gen/qd8-f32-qc8w-igemm-1x2-minmax-scalar.c",
+      "src/src/qd8-f32-qc8w-igemm/gen/qd8-f32-qc8w-igemm-1x4-minmax-scalar.c",
+      "src/src/qd8-f32-qc8w-igemm/gen/qd8-f32-qc8w-igemm-2x2-minmax-scalar.c",
+      "src/src/qd8-f32-qc8w-igemm/gen/qd8-f32-qc8w-igemm-4x4-minmax-scalar.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("qd8-f32-qc8w-igemm_riscv64_standalone") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/qd8-f32-qc8w-igemm/gen/qd8-f32-qc8w-igemm-1x2-minmax-scalar.c",
+      "src/src/qd8-f32-qc8w-igemm/gen/qd8-f32-qc8w-igemm-1x4-minmax-scalar.c",
+      "src/src/qd8-f32-qc8w-igemm/gen/qd8-f32-qc8w-igemm-2x2-minmax-scalar.c",
+      "src/src/qd8-f32-qc8w-igemm/gen/qd8-f32-qc8w-igemm-4x4-minmax-scalar.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("qs8-dwconv_arch=rv64gcv-abi=lp64d") {
+    cflags = [
+      "-mabi=lp64d",
+      "-march=rv64gcv",
+    ]
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/qs8-dwconv/gen/qs8-dwconv-25p8vc-minmax-fp32-rvv.c",
+      "src/src/qs8-dwconv/gen/qs8-dwconv-9p8vc-minmax-fp32-rvv.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("qs8-dwconv_arch=rv64gcv-abi=lp64d_standalone") {
+    cflags = [
+      "-mabi=lp64d",
+      "-march=rv64gcv",
+    ]
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/qs8-dwconv/gen/qs8-dwconv-25p8vc-minmax-fp32-rvv.c",
+      "src/src/qs8-dwconv/gen/qs8-dwconv-9p8vc-minmax-fp32-rvv.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("qs8-dwconv_riscv64") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/qs8-dwconv/gen/qs8-dwconv-25p1c-minmax-fp32-scalar-fmagic.c",
+      "src/src/qs8-dwconv/gen/qs8-dwconv-25p1c-minmax-fp32-scalar-imagic.c",
+      "src/src/qs8-dwconv/gen/qs8-dwconv-25p2c-minmax-fp32-scalar-lrintf.c",
+      "src/src/qs8-dwconv/gen/qs8-dwconv-9p1c-minmax-fp32-scalar-fmagic.c",
+      "src/src/qs8-dwconv/gen/qs8-dwconv-9p2c-minmax-fp32-scalar-imagic.c",
+      "src/src/qs8-dwconv/gen/qs8-dwconv-9p2c-minmax-fp32-scalar-lrintf.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("qs8-dwconv_riscv64_standalone") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/qs8-dwconv/gen/qs8-dwconv-25p1c-minmax-fp32-scalar-fmagic.c",
+      "src/src/qs8-dwconv/gen/qs8-dwconv-25p1c-minmax-fp32-scalar-imagic.c",
+      "src/src/qs8-dwconv/gen/qs8-dwconv-25p2c-minmax-fp32-scalar-lrintf.c",
+      "src/src/qs8-dwconv/gen/qs8-dwconv-9p1c-minmax-fp32-scalar-fmagic.c",
+      "src/src/qs8-dwconv/gen/qs8-dwconv-9p2c-minmax-fp32-scalar-imagic.c",
+      "src/src/qs8-dwconv/gen/qs8-dwconv-9p2c-minmax-fp32-scalar-lrintf.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("qs8-f32-vcvt_arch=rv64gcv-abi=lp64d") {
+    cflags = [
+      "-mabi=lp64d",
+      "-march=rv64gcv",
+    ]
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/qs8-f32-vcvt/gen/qs8-f32-vcvt-rvv-u2v.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("qs8-f32-vcvt_arch=rv64gcv-abi=lp64d_standalone") {
+    cflags = [
+      "-mabi=lp64d",
+      "-march=rv64gcv",
+    ]
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/qs8-f32-vcvt/gen/qs8-f32-vcvt-rvv-u2v.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("qs8-f32-vcvt_riscv64") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/qs8-f32-vcvt/gen/qs8-f32-vcvt-scalar-u1.c",
+      "src/src/qs8-f32-vcvt/gen/qs8-f32-vcvt-scalar-u4.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("qs8-f32-vcvt_riscv64_standalone") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/qs8-f32-vcvt/gen/qs8-f32-vcvt-scalar-u1.c",
+      "src/src/qs8-f32-vcvt/gen/qs8-f32-vcvt-scalar-u4.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("qs8-packw_riscv64") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/qs8-packw/gen/qs8-packw-x16c8-gemm-goi-scalar.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("qs8-packw_riscv64_standalone") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/qs8-packw/gen/qs8-packw-x16c8-gemm-goi-scalar.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("qs8-qc4w-gemm_riscv64") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/qs8-qc4w-gemm/gen/qs8-qc4w-gemm-1x2-minmax-fp32-scalar-lrintf.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("qs8-qc4w-gemm_riscv64_standalone") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/qs8-qc4w-gemm/gen/qs8-qc4w-gemm-1x2-minmax-fp32-scalar-lrintf.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("qs8-qc8w-dwconv_arch=rv64gcv-abi=lp64d") {
+    cflags = [
+      "-mabi=lp64d",
+      "-march=rv64gcv",
+    ]
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-25p8vc-minmax-fp32-rvv.c",
+      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-3p8vc-minmax-fp32-rvv.c",
+      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-9p8vc-minmax-fp32-rvv.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("qs8-qc8w-dwconv_arch=rv64gcv-abi=lp64d_standalone") {
+    cflags = [
+      "-mabi=lp64d",
+      "-march=rv64gcv",
+    ]
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-25p8vc-minmax-fp32-rvv.c",
+      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-3p8vc-minmax-fp32-rvv.c",
+      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-9p8vc-minmax-fp32-rvv.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("qs8-qc8w-dwconv_riscv64") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-25p1c-minmax-fp32-scalar-fmagic.c",
+      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-25p1c-minmax-fp32-scalar-imagic.c",
+      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-25p2c-minmax-fp32-scalar-lrintf.c",
+      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-3p1c-minmax-fp32-scalar-fmagic.c",
+      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-3p2c-minmax-fp32-scalar-imagic.c",
+      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-3p2c-minmax-fp32-scalar-lrintf.c",
+      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-9p1c-minmax-fp32-scalar-fmagic.c",
+      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-9p2c-minmax-fp32-scalar-imagic.c",
+      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-9p2c-minmax-fp32-scalar-lrintf.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("qs8-qc8w-dwconv_riscv64_standalone") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-25p1c-minmax-fp32-scalar-fmagic.c",
+      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-25p1c-minmax-fp32-scalar-imagic.c",
+      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-25p2c-minmax-fp32-scalar-lrintf.c",
+      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-3p1c-minmax-fp32-scalar-fmagic.c",
+      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-3p2c-minmax-fp32-scalar-imagic.c",
+      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-3p2c-minmax-fp32-scalar-lrintf.c",
+      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-9p1c-minmax-fp32-scalar-fmagic.c",
+      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-9p2c-minmax-fp32-scalar-imagic.c",
+      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-9p2c-minmax-fp32-scalar-lrintf.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("qs8-qc8w-gemm_arch=rv64gcv-abi=lp64d") {
+    cflags = [
+      "-mabi=lp64d",
+      "-march=rv64gcv",
+    ]
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-1x4v-minmax-fp32-rvv.c",
+      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-4x4v-minmax-fp32-rvv.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("qs8-qc8w-gemm_arch=rv64gcv-abi=lp64d_standalone") {
+    cflags = [
+      "-mabi=lp64d",
+      "-march=rv64gcv",
+    ]
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-1x4v-minmax-fp32-rvv.c",
+      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-4x4v-minmax-fp32-rvv.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("qs8-qc8w-gemm_riscv64") {
     cflags = []
 
     sources = [
       "src/include/xnnpack.h",
-      "src/src/qs8-packw/gen/qs8-packw-x16c8-gemm-goi-scalar.c",
+      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-1x2-minmax-fp32-scalar-imagic.c",
+      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-1x4-minmax-fp32-scalar-lrintf.c",
+      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-2x2-minmax-fp32-scalar-imagic.c",
+      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-3x4-minmax-fp32-scalar-lrintf.c",
     ]
 
     configs -= [ "//build/config/compiler:chromium_code" ]
@@ -37047,12 +45817,15 @@ if (current_cpu == "arm64") {
   }
 
   # This is a target that cannot depend on //base.
-  source_set("qs8-packw_arm64_standalone") {
+  source_set("qs8-qc8w-gemm_riscv64_standalone") {
     cflags = []
 
     sources = [
       "src/include/xnnpack.h",
-      "src/src/qs8-packw/gen/qs8-packw-x16c8-gemm-goi-scalar.c",
+      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-1x2-minmax-fp32-scalar-imagic.c",
+      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-1x4-minmax-fp32-scalar-lrintf.c",
+      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-2x2-minmax-fp32-scalar-imagic.c",
+      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-3x4-minmax-fp32-scalar-lrintf.c",
     ]
 
     configs -= [ "//build/config/compiler:chromium_code" ]
@@ -37073,15 +45846,16 @@ if (current_cpu == "arm64") {
     }
   }
 
-  source_set("qs8-qc4w-gemm_arch=armv8.2-a+fp16+dotprod") {
-    cflags = [ "-march=armv8.2-a+fp16+dotprod" ]
-
-    asmflags = cflags
+  source_set("qs8-qc8w-igemm_arch=rv64gcv-abi=lp64d") {
+    cflags = [
+      "-mabi=lp64d",
+      "-march=rv64gcv",
+    ]
 
     sources = [
       "src/include/xnnpack.h",
-      "src/src/qs8-qc4w-gemm/gen/qs8-qc4w-gemm-1x16-minmax-fp32-asm-aarch64-neondot-ld128.S",
-      "src/src/qs8-qc4w-gemm/gen/qs8-qc4w-gemm-5x16-minmax-fp32-asm-aarch64-neondot-ld128.S",
+      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-1x4v-minmax-fp32-rvv.c",
+      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-4x4v-minmax-fp32-rvv.c",
     ]
 
     configs -= [ "//build/config/compiler:chromium_code" ]
@@ -37099,15 +45873,16 @@ if (current_cpu == "arm64") {
   }
 
   # This is a target that cannot depend on //base.
-  source_set("qs8-qc4w-gemm_arch=armv8.2-a+fp16+dotprod_standalone") {
-    cflags = [ "-march=armv8.2-a+fp16+dotprod" ]
-
-    asmflags = cflags
+  source_set("qs8-qc8w-igemm_arch=rv64gcv-abi=lp64d_standalone") {
+    cflags = [
+      "-mabi=lp64d",
+      "-march=rv64gcv",
+    ]
 
     sources = [
       "src/include/xnnpack.h",
-      "src/src/qs8-qc4w-gemm/gen/qs8-qc4w-gemm-1x16-minmax-fp32-asm-aarch64-neondot-ld128.S",
-      "src/src/qs8-qc4w-gemm/gen/qs8-qc4w-gemm-5x16-minmax-fp32-asm-aarch64-neondot-ld128.S",
+      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-1x4v-minmax-fp32-rvv.c",
+      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-4x4v-minmax-fp32-rvv.c",
     ]
 
     configs -= [ "//build/config/compiler:chromium_code" ]
@@ -37128,12 +45903,15 @@ if (current_cpu == "arm64") {
     }
   }
 
-  source_set("qs8-qc4w-gemm_arm64") {
+  source_set("qs8-qc8w-igemm_riscv64") {
     cflags = []
 
     sources = [
       "src/include/xnnpack.h",
-      "src/src/qs8-qc4w-gemm/gen/qs8-qc4w-gemm-1x2-minmax-fp32-scalar-lrintf.c",
+      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-1x2-minmax-fp32-scalar-imagic.c",
+      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-1x4-minmax-fp32-scalar-lrintf.c",
+      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-2x2-minmax-fp32-scalar-imagic.c",
+      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-3x4-minmax-fp32-scalar-lrintf.c",
     ]
 
     configs -= [ "//build/config/compiler:chromium_code" ]
@@ -37151,12 +45929,15 @@ if (current_cpu == "arm64") {
   }
 
   # This is a target that cannot depend on //base.
-  source_set("qs8-qc4w-gemm_arm64_standalone") {
+  source_set("qs8-qc8w-igemm_riscv64_standalone") {
     cflags = []
 
     sources = [
       "src/include/xnnpack.h",
-      "src/src/qs8-qc4w-gemm/gen/qs8-qc4w-gemm-1x2-minmax-fp32-scalar-lrintf.c",
+      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-1x2-minmax-fp32-scalar-imagic.c",
+      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-1x4-minmax-fp32-scalar-lrintf.c",
+      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-2x2-minmax-fp32-scalar-imagic.c",
+      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-3x4-minmax-fp32-scalar-lrintf.c",
     ]
 
     configs -= [ "//build/config/compiler:chromium_code" ]
@@ -37177,28 +45958,12 @@ if (current_cpu == "arm64") {
     }
   }
 
-  source_set("qs8-qc8w-dwconv_arm64") {
+  source_set("qs8-qu8-packw_riscv64") {
     cflags = []
 
     sources = [
       "src/include/xnnpack.h",
-      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-25p16c-minmax-fp32-neonv8-mla8-ld64.c",
-      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-25p1c-minmax-fp32-scalar-fmagic.c",
-      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-25p1c-minmax-fp32-scalar-imagic.c",
-      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-25p2c-minmax-fp32-scalar-lrintf.c",
-      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-25p8c-minmax-fp32-neon-mla8-ld64.c",
-      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-25p8c-minmax-fp32-neonv8-mla8-ld64.c",
-      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-3p16c-minmax-fp32-neon-mla8-ld128.c",
-      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-3p16c-minmax-fp32-neonv8-mla8-ld128.c",
-      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-3p16c-minmax-fp32-neonv8-mla8-ld64.c",
-      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-3p1c-minmax-fp32-scalar-fmagic.c",
-      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-3p2c-minmax-fp32-scalar-imagic.c",
-      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-3p2c-minmax-fp32-scalar-lrintf.c",
-      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-9p16c-minmax-fp32-neon-mla8-ld64.c",
-      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-9p16c-minmax-fp32-neonv8-mla8-ld64.c",
-      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-9p1c-minmax-fp32-scalar-fmagic.c",
-      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-9p2c-minmax-fp32-scalar-imagic.c",
-      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-9p2c-minmax-fp32-scalar-lrintf.c",
+      "src/src/qs8-qu8-packw/gen/qs8-qu8-packw-x16c8-gemm-goi-scalar.c",
     ]
 
     configs -= [ "//build/config/compiler:chromium_code" ]
@@ -37216,28 +45981,12 @@ if (current_cpu == "arm64") {
   }
 
   # This is a target that cannot depend on //base.
-  source_set("qs8-qc8w-dwconv_arm64_standalone") {
+  source_set("qs8-qu8-packw_riscv64_standalone") {
     cflags = []
 
     sources = [
       "src/include/xnnpack.h",
-      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-25p16c-minmax-fp32-neonv8-mla8-ld64.c",
-      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-25p1c-minmax-fp32-scalar-fmagic.c",
-      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-25p1c-minmax-fp32-scalar-imagic.c",
-      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-25p2c-minmax-fp32-scalar-lrintf.c",
-      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-25p8c-minmax-fp32-neon-mla8-ld64.c",
-      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-25p8c-minmax-fp32-neonv8-mla8-ld64.c",
-      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-3p16c-minmax-fp32-neon-mla8-ld128.c",
-      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-3p16c-minmax-fp32-neonv8-mla8-ld128.c",
-      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-3p16c-minmax-fp32-neonv8-mla8-ld64.c",
-      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-3p1c-minmax-fp32-scalar-fmagic.c",
-      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-3p2c-minmax-fp32-scalar-imagic.c",
-      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-3p2c-minmax-fp32-scalar-lrintf.c",
-      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-9p16c-minmax-fp32-neon-mla8-ld64.c",
-      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-9p16c-minmax-fp32-neonv8-mla8-ld64.c",
-      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-9p1c-minmax-fp32-scalar-fmagic.c",
-      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-9p2c-minmax-fp32-scalar-imagic.c",
-      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-9p2c-minmax-fp32-scalar-lrintf.c",
+      "src/src/qs8-qu8-packw/gen/qs8-qu8-packw-x16c8-gemm-goi-scalar.c",
     ]
 
     configs -= [ "//build/config/compiler:chromium_code" ]
@@ -37258,15 +46007,15 @@ if (current_cpu == "arm64") {
     }
   }
 
-  source_set("qs8-qc8w-gemm_arch=armv8.2-a+dotprod") {
-    cflags = [ "-march=armv8.2-a+dotprod" ]
+  source_set("qs8-rdsum_arch=rv64gcv-abi=lp64d") {
+    cflags = [
+      "-mabi=lp64d",
+      "-march=rv64gcv",
+    ]
 
     sources = [
       "src/include/xnnpack.h",
-      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-1x16c4-minmax-fp32-neondot.c",
-      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-1x8c4-minmax-fp32-neondot.c",
-      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-4x16c4-minmax-fp32-neondot.c",
-      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-4x8c4-minmax-fp32-neondot.c",
+      "src/src/qs8-rdsum/gen/qs8-rdsum-7p7x-rvv-u2v.c",
     ]
 
     configs -= [ "//build/config/compiler:chromium_code" ]
@@ -37284,15 +46033,15 @@ if (current_cpu == "arm64") {
   }
 
   # This is a target that cannot depend on //base.
-  source_set("qs8-qc8w-gemm_arch=armv8.2-a+dotprod_standalone") {
-    cflags = [ "-march=armv8.2-a+dotprod" ]
+  source_set("qs8-rdsum_arch=rv64gcv-abi=lp64d_standalone") {
+    cflags = [
+      "-mabi=lp64d",
+      "-march=rv64gcv",
+    ]
 
     sources = [
       "src/include/xnnpack.h",
-      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-1x16c4-minmax-fp32-neondot.c",
-      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-1x8c4-minmax-fp32-neondot.c",
-      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-4x16c4-minmax-fp32-neondot.c",
-      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-4x8c4-minmax-fp32-neondot.c",
+      "src/src/qs8-rdsum/gen/qs8-rdsum-7p7x-rvv-u2v.c",
     ]
 
     configs -= [ "//build/config/compiler:chromium_code" ]
@@ -37313,23 +46062,12 @@ if (current_cpu == "arm64") {
     }
   }
 
-  source_set("qs8-qc8w-gemm_arch=armv8.2-a+fp16+dotprod") {
-    cflags = [ "-march=armv8.2-a+fp16+dotprod" ]
-
-    asmflags = cflags
+  source_set("qs8-rdsum_riscv64") {
+    cflags = []
 
     sources = [
       "src/include/xnnpack.h",
-      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-1x8c8-minmax-fp32-asm-aarch64-neon-mlal-cortex-a53-prfm.S",
-      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-1x8c8-minmax-fp32-asm-aarch64-neon-mlal-prfm.S",
-      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-1x8c8-minmax-fp32-asm-aarch64-neon-mlal.S",
-      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-2x8c8-minmax-fp32-asm-aarch64-neon-mlal-cortex-a53-prfm.S",
-      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-2x8c8-minmax-fp32-asm-aarch64-neon-mlal-prfm.S",
-      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-2x8c8-minmax-fp32-asm-aarch64-neon-mlal.S",
-      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-4x16-minmax-fp32-asm-aarch64-neon-mlal-lane-cortex-a53.S",
-      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-4x16-minmax-fp32-asm-aarch64-neon-mlal-lane-ld64.S",
-      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-4x16c4-minmax-fp32-asm-aarch64-neondot-cortex-a55.S",
-      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-4x16c4-minmax-fp32-asm-aarch64-neondot-ld128.S",
+      "src/src/qs8-rdsum/gen/qs8-rdsum-minmax-fp32-scalar-u1-acc1.c",
     ]
 
     configs -= [ "//build/config/compiler:chromium_code" ]
@@ -37347,23 +46085,12 @@ if (current_cpu == "arm64") {
   }
 
   # This is a target that cannot depend on //base.
-  source_set("qs8-qc8w-gemm_arch=armv8.2-a+fp16+dotprod_standalone") {
-    cflags = [ "-march=armv8.2-a+fp16+dotprod" ]
-
-    asmflags = cflags
+  source_set("qs8-rdsum_riscv64_standalone") {
+    cflags = []
 
     sources = [
       "src/include/xnnpack.h",
-      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-1x8c8-minmax-fp32-asm-aarch64-neon-mlal-cortex-a53-prfm.S",
-      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-1x8c8-minmax-fp32-asm-aarch64-neon-mlal-prfm.S",
-      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-1x8c8-minmax-fp32-asm-aarch64-neon-mlal.S",
-      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-2x8c8-minmax-fp32-asm-aarch64-neon-mlal-cortex-a53-prfm.S",
-      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-2x8c8-minmax-fp32-asm-aarch64-neon-mlal-prfm.S",
-      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-2x8c8-minmax-fp32-asm-aarch64-neon-mlal.S",
-      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-4x16-minmax-fp32-asm-aarch64-neon-mlal-lane-cortex-a53.S",
-      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-4x16-minmax-fp32-asm-aarch64-neon-mlal-lane-ld64.S",
-      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-4x16c4-minmax-fp32-asm-aarch64-neondot-cortex-a55.S",
-      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-4x16c4-minmax-fp32-asm-aarch64-neondot-ld128.S",
+      "src/src/qs8-rdsum/gen/qs8-rdsum-minmax-fp32-scalar-u1-acc1.c",
     ]
 
     configs -= [ "//build/config/compiler:chromium_code" ]
@@ -37384,13 +46111,15 @@ if (current_cpu == "arm64") {
     }
   }
 
-  source_set("qs8-qc8w-gemm_arch=armv8.2-a+i8mm+fp16") {
-    cflags = [ "-march=armv8.2-a+i8mm+fp16" ]
+  source_set("qs8-rsum_arch=rv64gcv-abi=lp64d") {
+    cflags = [
+      "-mabi=lp64d",
+      "-march=rv64gcv",
+    ]
 
     sources = [
       "src/include/xnnpack.h",
-      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-1x16c8-minmax-fp32-neoni8mm.c",
-      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-4x16c8-minmax-fp32-neoni8mm.c",
+      "src/src/qs8-rsum/gen/qs8-rsum-rvv-u2v.c",
     ]
 
     configs -= [ "//build/config/compiler:chromium_code" ]
@@ -37408,13 +46137,15 @@ if (current_cpu == "arm64") {
   }
 
   # This is a target that cannot depend on //base.
-  source_set("qs8-qc8w-gemm_arch=armv8.2-a+i8mm+fp16_standalone") {
-    cflags = [ "-march=armv8.2-a+i8mm+fp16" ]
+  source_set("qs8-rsum_arch=rv64gcv-abi=lp64d_standalone") {
+    cflags = [
+      "-mabi=lp64d",
+      "-march=rv64gcv",
+    ]
 
     sources = [
       "src/include/xnnpack.h",
-      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-1x16c8-minmax-fp32-neoni8mm.c",
-      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-4x16c8-minmax-fp32-neoni8mm.c",
+      "src/src/qs8-rsum/gen/qs8-rsum-rvv-u2v.c",
     ]
 
     configs -= [ "//build/config/compiler:chromium_code" ]
@@ -37435,20 +46166,12 @@ if (current_cpu == "arm64") {
     }
   }
 
-  source_set("qs8-qc8w-gemm_arm64") {
+  source_set("qs8-rsum_riscv64") {
     cflags = []
 
     sources = [
       "src/include/xnnpack.h",
-      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-1x16-minmax-fp32-neonv8-mlal-lane.c",
-      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-1x2-minmax-fp32-scalar-imagic.c",
-      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-1x4-minmax-fp32-scalar-lrintf.c",
-      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-1x8c2s4-minmax-fp32-neon-mlal.c",
-      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-1x8c2s4-minmax-fp32-neonv8-mlal.c",
-      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-2x2-minmax-fp32-scalar-imagic.c",
-      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-2x8c2s4-minmax-fp32-neon-mlal.c",
-      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-2x8c2s4-minmax-fp32-neonv8-mlal.c",
-      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-3x4-minmax-fp32-scalar-lrintf.c",
+      "src/src/qs8-rsum/gen/qs8-rsum-scalar-u4.c",
     ]
 
     configs -= [ "//build/config/compiler:chromium_code" ]
@@ -37466,20 +46189,12 @@ if (current_cpu == "arm64") {
   }
 
   # This is a target that cannot depend on //base.
-  source_set("qs8-qc8w-gemm_arm64_standalone") {
+  source_set("qs8-rsum_riscv64_standalone") {
     cflags = []
 
     sources = [
       "src/include/xnnpack.h",
-      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-1x16-minmax-fp32-neonv8-mlal-lane.c",
-      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-1x2-minmax-fp32-scalar-imagic.c",
-      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-1x4-minmax-fp32-scalar-lrintf.c",
-      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-1x8c2s4-minmax-fp32-neon-mlal.c",
-      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-1x8c2s4-minmax-fp32-neonv8-mlal.c",
-      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-2x2-minmax-fp32-scalar-imagic.c",
-      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-2x8c2s4-minmax-fp32-neon-mlal.c",
-      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-2x8c2s4-minmax-fp32-neonv8-mlal.c",
-      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-3x4-minmax-fp32-scalar-lrintf.c",
+      "src/src/qs8-rsum/gen/qs8-rsum-scalar-u4.c",
     ]
 
     configs -= [ "//build/config/compiler:chromium_code" ]
@@ -37500,78 +46215,15 @@ if (current_cpu == "arm64") {
     }
   }
 
-  source_set("qs8-qc8w-igemm_arch=armv8.2-a+dotprod") {
-    cflags = [ "-march=armv8.2-a+dotprod" ]
-
-    sources = [
-      "src/include/xnnpack.h",
-      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-1x16c4-minmax-fp32-neondot.c",
-      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-1x8c4-minmax-fp32-neondot.c",
-      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-4x16c4-minmax-fp32-neondot.c",
-      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-4x8c4-minmax-fp32-neondot.c",
-    ]
-
-    configs -= [ "//build/config/compiler:chromium_code" ]
-    configs += [ "//build/config/compiler:no_chromium_code" ]
-    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
-
-    deps = [
-      "//third_party/cpuinfo",
-      "//third_party/fp16",
-      "//third_party/fxdiv",
-      "//third_party/pthreadpool",
+  source_set("qs8-vadd_arch=rv64gcv-abi=lp64d") {
+    cflags = [
+      "-mabi=lp64d",
+      "-march=rv64gcv",
     ]
 
-    public_configs = [ ":xnnpack_config" ]
-  }
-
-  # This is a target that cannot depend on //base.
-  source_set("qs8-qc8w-igemm_arch=armv8.2-a+dotprod_standalone") {
-    cflags = [ "-march=armv8.2-a+dotprod" ]
-
     sources = [
       "src/include/xnnpack.h",
-      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-1x16c4-minmax-fp32-neondot.c",
-      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-1x8c4-minmax-fp32-neondot.c",
-      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-4x16c4-minmax-fp32-neondot.c",
-      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-4x8c4-minmax-fp32-neondot.c",
-    ]
-
-    configs -= [ "//build/config/compiler:chromium_code" ]
-    configs += [ "//build/config/compiler:no_chromium_code" ]
-    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
-
-    deps = [
-      "//third_party/cpuinfo",
-      "//third_party/fp16",
-      "//third_party/fxdiv",
-      "//third_party/pthreadpool:pthreadpool_standalone",
-    ]
-
-    public_configs = [ ":xnnpack_config" ]
-
-    if (!(is_android && use_order_profiling)) {
-      assert_no_deps = [ "//base" ]
-    }
-  }
-
-  source_set("qs8-qc8w-igemm_arch=armv8.2-a+fp16+dotprod") {
-    cflags = [ "-march=armv8.2-a+fp16+dotprod" ]
-
-    asmflags = cflags
-
-    sources = [
-      "src/include/xnnpack.h",
-      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-1x8c8-minmax-fp32-asm-aarch64-neon-mlal-cortex-a53-prfm.S",
-      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-1x8c8-minmax-fp32-asm-aarch64-neon-mlal-prfm.S",
-      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-1x8c8-minmax-fp32-asm-aarch64-neon-mlal.S",
-      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-2x8c8-minmax-fp32-asm-aarch64-neon-mlal-cortex-a53-prfm.S",
-      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-2x8c8-minmax-fp32-asm-aarch64-neon-mlal-prfm.S",
-      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-2x8c8-minmax-fp32-asm-aarch64-neon-mlal.S",
-      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-4x16-minmax-fp32-asm-aarch64-neon-mlal-lane-cortex-a53.S",
-      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-4x16-minmax-fp32-asm-aarch64-neon-mlal-lane-ld64.S",
-      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-4x16c4-minmax-fp32-asm-aarch64-neondot-cortex-a55.S",
-      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-4x16c4-minmax-fp32-asm-aarch64-neondot-ld128.S",
+      "src/src/qs8-vadd/gen/qs8-vadd-minmax-rvv-u2v.c",
     ]
 
     configs -= [ "//build/config/compiler:chromium_code" ]
@@ -37589,23 +46241,15 @@ if (current_cpu == "arm64") {
   }
 
   # This is a target that cannot depend on //base.
-  source_set("qs8-qc8w-igemm_arch=armv8.2-a+fp16+dotprod_standalone") {
-    cflags = [ "-march=armv8.2-a+fp16+dotprod" ]
-
-    asmflags = cflags
+  source_set("qs8-vadd_arch=rv64gcv-abi=lp64d_standalone") {
+    cflags = [
+      "-mabi=lp64d",
+      "-march=rv64gcv",
+    ]
 
     sources = [
       "src/include/xnnpack.h",
-      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-1x8c8-minmax-fp32-asm-aarch64-neon-mlal-cortex-a53-prfm.S",
-      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-1x8c8-minmax-fp32-asm-aarch64-neon-mlal-prfm.S",
-      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-1x8c8-minmax-fp32-asm-aarch64-neon-mlal.S",
-      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-2x8c8-minmax-fp32-asm-aarch64-neon-mlal-cortex-a53-prfm.S",
-      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-2x8c8-minmax-fp32-asm-aarch64-neon-mlal-prfm.S",
-      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-2x8c8-minmax-fp32-asm-aarch64-neon-mlal.S",
-      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-4x16-minmax-fp32-asm-aarch64-neon-mlal-lane-cortex-a53.S",
-      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-4x16-minmax-fp32-asm-aarch64-neon-mlal-lane-ld64.S",
-      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-4x16c4-minmax-fp32-asm-aarch64-neondot-cortex-a55.S",
-      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-4x16c4-minmax-fp32-asm-aarch64-neondot-ld128.S",
+      "src/src/qs8-vadd/gen/qs8-vadd-minmax-rvv-u2v.c",
     ]
 
     configs -= [ "//build/config/compiler:chromium_code" ]
@@ -37626,13 +46270,13 @@ if (current_cpu == "arm64") {
     }
   }
 
-  source_set("qs8-qc8w-igemm_arch=armv8.2-a+i8mm+fp16") {
-    cflags = [ "-march=armv8.2-a+i8mm+fp16" ]
+  source_set("qs8-vadd_riscv64") {
+    cflags = []
 
     sources = [
       "src/include/xnnpack.h",
-      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-1x16c8-minmax-fp32-neoni8mm.c",
-      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-4x16c8-minmax-fp32-neoni8mm.c",
+      "src/src/qs8-vadd/gen/qs8-vadd-minmax-scalar-u1.c",
+      "src/src/qs8-vadd/gen/qs8-vadd-minmax-scalar-u4.c",
     ]
 
     configs -= [ "//build/config/compiler:chromium_code" ]
@@ -37650,13 +46294,13 @@ if (current_cpu == "arm64") {
   }
 
   # This is a target that cannot depend on //base.
-  source_set("qs8-qc8w-igemm_arch=armv8.2-a+i8mm+fp16_standalone") {
-    cflags = [ "-march=armv8.2-a+i8mm+fp16" ]
+  source_set("qs8-vadd_riscv64_standalone") {
+    cflags = []
 
     sources = [
       "src/include/xnnpack.h",
-      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-1x16c8-minmax-fp32-neoni8mm.c",
-      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-4x16c8-minmax-fp32-neoni8mm.c",
+      "src/src/qs8-vadd/gen/qs8-vadd-minmax-scalar-u1.c",
+      "src/src/qs8-vadd/gen/qs8-vadd-minmax-scalar-u4.c",
     ]
 
     configs -= [ "//build/config/compiler:chromium_code" ]
@@ -37677,20 +46321,15 @@ if (current_cpu == "arm64") {
     }
   }
 
-  source_set("qs8-qc8w-igemm_arm64") {
-    cflags = []
+  source_set("qs8-vaddc_arch=rv64gcv-abi=lp64d") {
+    cflags = [
+      "-mabi=lp64d",
+      "-march=rv64gcv",
+    ]
 
     sources = [
       "src/include/xnnpack.h",
-      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-1x16-minmax-fp32-neonv8-mlal-lane.c",
-      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-1x2-minmax-fp32-scalar-imagic.c",
-      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-1x4-minmax-fp32-scalar-lrintf.c",
-      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-1x8c2s4-minmax-fp32-neon-mlal.c",
-      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-1x8c2s4-minmax-fp32-neonv8-mlal.c",
-      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-2x2-minmax-fp32-scalar-imagic.c",
-      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-2x8c2s4-minmax-fp32-neon-mlal.c",
-      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-2x8c2s4-minmax-fp32-neonv8-mlal.c",
-      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-3x4-minmax-fp32-scalar-lrintf.c",
+      "src/src/qs8-vaddc/gen/qs8-vaddc-minmax-rvv-u2v.c",
     ]
 
     configs -= [ "//build/config/compiler:chromium_code" ]
@@ -37708,20 +46347,15 @@ if (current_cpu == "arm64") {
   }
 
   # This is a target that cannot depend on //base.
-  source_set("qs8-qc8w-igemm_arm64_standalone") {
-    cflags = []
+  source_set("qs8-vaddc_arch=rv64gcv-abi=lp64d_standalone") {
+    cflags = [
+      "-mabi=lp64d",
+      "-march=rv64gcv",
+    ]
 
     sources = [
       "src/include/xnnpack.h",
-      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-1x16-minmax-fp32-neonv8-mlal-lane.c",
-      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-1x2-minmax-fp32-scalar-imagic.c",
-      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-1x4-minmax-fp32-scalar-lrintf.c",
-      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-1x8c2s4-minmax-fp32-neon-mlal.c",
-      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-1x8c2s4-minmax-fp32-neonv8-mlal.c",
-      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-2x2-minmax-fp32-scalar-imagic.c",
-      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-2x8c2s4-minmax-fp32-neon-mlal.c",
-      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-2x8c2s4-minmax-fp32-neonv8-mlal.c",
-      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-3x4-minmax-fp32-scalar-lrintf.c",
+      "src/src/qs8-vaddc/gen/qs8-vaddc-minmax-rvv-u2v.c",
     ]
 
     configs -= [ "//build/config/compiler:chromium_code" ]
@@ -37742,12 +46376,13 @@ if (current_cpu == "arm64") {
     }
   }
 
-  source_set("qs8-qu8-packw_arm64") {
+  source_set("qs8-vaddc_riscv64") {
     cflags = []
 
     sources = [
       "src/include/xnnpack.h",
-      "src/src/qs8-qu8-packw/gen/qs8-qu8-packw-x16c8-gemm-goi-scalar.c",
+      "src/src/qs8-vaddc/gen/qs8-vaddc-minmax-scalar-u1.c",
+      "src/src/qs8-vaddc/gen/qs8-vaddc-minmax-scalar-u4.c",
     ]
 
     configs -= [ "//build/config/compiler:chromium_code" ]
@@ -37765,12 +46400,13 @@ if (current_cpu == "arm64") {
   }
 
   # This is a target that cannot depend on //base.
-  source_set("qs8-qu8-packw_arm64_standalone") {
+  source_set("qs8-vaddc_riscv64_standalone") {
     cflags = []
 
     sources = [
       "src/include/xnnpack.h",
-      "src/src/qs8-qu8-packw/gen/qs8-qu8-packw-x16c8-gemm-goi-scalar.c",
+      "src/src/qs8-vaddc/gen/qs8-vaddc-minmax-scalar-u1.c",
+      "src/src/qs8-vaddc/gen/qs8-vaddc-minmax-scalar-u4.c",
     ]
 
     configs -= [ "//build/config/compiler:chromium_code" ]
@@ -37791,13 +46427,13 @@ if (current_cpu == "arm64") {
     }
   }
 
-  source_set("qs8-rdsum_arm64") {
+  source_set("qs8-vcvt_riscv64") {
     cflags = []
 
     sources = [
       "src/include/xnnpack.h",
-      "src/src/qs8-rdsum/gen/qs8-rdsum-7p7x-minmax-fp32-neon-c32.c",
-      "src/src/qs8-rdsum/gen/qs8-rdsum-minmax-fp32-scalar-u1-acc1.c",
+      "src/src/qs8-vcvt/gen/qs8-vcvt-scalar-u1.c",
+      "src/src/qs8-vcvt/gen/qs8-vcvt-scalar-u4.c",
     ]
 
     configs -= [ "//build/config/compiler:chromium_code" ]
@@ -37815,13 +46451,13 @@ if (current_cpu == "arm64") {
   }
 
   # This is a target that cannot depend on //base.
-  source_set("qs8-rdsum_arm64_standalone") {
+  source_set("qs8-vcvt_riscv64_standalone") {
     cflags = []
 
     sources = [
       "src/include/xnnpack.h",
-      "src/src/qs8-rdsum/gen/qs8-rdsum-7p7x-minmax-fp32-neon-c32.c",
-      "src/src/qs8-rdsum/gen/qs8-rdsum-minmax-fp32-scalar-u1-acc1.c",
+      "src/src/qs8-vcvt/gen/qs8-vcvt-scalar-u1.c",
+      "src/src/qs8-vcvt/gen/qs8-vcvt-scalar-u4.c",
     ]
 
     configs -= [ "//build/config/compiler:chromium_code" ]
@@ -37842,12 +46478,15 @@ if (current_cpu == "arm64") {
     }
   }
 
-  source_set("qs8-rsum_arch=armv8.2-a+dotprod") {
-    cflags = [ "-march=armv8.2-a+dotprod" ]
+  source_set("qs8-vlrelu_arch=rv64gcv-abi=lp64d") {
+    cflags = [
+      "-mabi=lp64d",
+      "-march=rv64gcv",
+    ]
 
     sources = [
       "src/include/xnnpack.h",
-      "src/src/qs8-rsum/gen/qs8-rsum-neondot-u32-acc2.c",
+      "src/src/qs8-vlrelu/gen/qs8-vlrelu-rvv-u2v.c",
     ]
 
     configs -= [ "//build/config/compiler:chromium_code" ]
@@ -37865,12 +46504,15 @@ if (current_cpu == "arm64") {
   }
 
   # This is a target that cannot depend on //base.
-  source_set("qs8-rsum_arch=armv8.2-a+dotprod_standalone") {
-    cflags = [ "-march=armv8.2-a+dotprod" ]
+  source_set("qs8-vlrelu_arch=rv64gcv-abi=lp64d_standalone") {
+    cflags = [
+      "-mabi=lp64d",
+      "-march=rv64gcv",
+    ]
 
     sources = [
       "src/include/xnnpack.h",
-      "src/src/qs8-rsum/gen/qs8-rsum-neondot-u32-acc2.c",
+      "src/src/qs8-vlrelu/gen/qs8-vlrelu-rvv-u2v.c",
     ]
 
     configs -= [ "//build/config/compiler:chromium_code" ]
@@ -37891,13 +46533,13 @@ if (current_cpu == "arm64") {
     }
   }
 
-  source_set("qs8-rsum_arm64") {
+  source_set("qs8-vlrelu_riscv64") {
     cflags = []
 
     sources = [
       "src/include/xnnpack.h",
-      "src/src/qs8-rsum/gen/qs8-rsum-neon-u32-acc2.c",
-      "src/src/qs8-rsum/gen/qs8-rsum-scalar-u4.c",
+      "src/src/qs8-vlrelu/gen/qs8-vlrelu-scalar-andxor-u4.c",
+      "src/src/qs8-vlrelu/gen/qs8-vlrelu-scalar-select-u4.c",
     ]
 
     configs -= [ "//build/config/compiler:chromium_code" ]
@@ -37915,13 +46557,13 @@ if (current_cpu == "arm64") {
   }
 
   # This is a target that cannot depend on //base.
-  source_set("qs8-rsum_arm64_standalone") {
+  source_set("qs8-vlrelu_riscv64_standalone") {
     cflags = []
 
     sources = [
       "src/include/xnnpack.h",
-      "src/src/qs8-rsum/gen/qs8-rsum-neon-u32-acc2.c",
-      "src/src/qs8-rsum/gen/qs8-rsum-scalar-u4.c",
+      "src/src/qs8-vlrelu/gen/qs8-vlrelu-scalar-andxor-u4.c",
+      "src/src/qs8-vlrelu/gen/qs8-vlrelu-scalar-select-u4.c",
     ]
 
     configs -= [ "//build/config/compiler:chromium_code" ]
@@ -37942,15 +46584,15 @@ if (current_cpu == "arm64") {
     }
   }
 
-  source_set("qs8-vadd_arm64") {
-    cflags = []
+  source_set("qs8-vmul_arch=rv64gcv-abi=lp64d") {
+    cflags = [
+      "-mabi=lp64d",
+      "-march=rv64gcv",
+    ]
 
     sources = [
       "src/include/xnnpack.h",
-      "src/src/qs8-vadd/gen/qs8-vadd-minmax-neon-ld64-u16.c",
-      "src/src/qs8-vadd/gen/qs8-vadd-minmax-neon-ld64-u32.c",
-      "src/src/qs8-vadd/gen/qs8-vadd-minmax-scalar-u1.c",
-      "src/src/qs8-vadd/gen/qs8-vadd-minmax-scalar-u4.c",
+      "src/src/qs8-vmul/gen/qs8-vmul-minmax-f32-rvv-u2v.c",
     ]
 
     configs -= [ "//build/config/compiler:chromium_code" ]
@@ -37968,15 +46610,15 @@ if (current_cpu == "arm64") {
   }
 
   # This is a target that cannot depend on //base.
-  source_set("qs8-vadd_arm64_standalone") {
-    cflags = []
+  source_set("qs8-vmul_arch=rv64gcv-abi=lp64d_standalone") {
+    cflags = [
+      "-mabi=lp64d",
+      "-march=rv64gcv",
+    ]
 
     sources = [
       "src/include/xnnpack.h",
-      "src/src/qs8-vadd/gen/qs8-vadd-minmax-neon-ld64-u16.c",
-      "src/src/qs8-vadd/gen/qs8-vadd-minmax-neon-ld64-u32.c",
-      "src/src/qs8-vadd/gen/qs8-vadd-minmax-scalar-u1.c",
-      "src/src/qs8-vadd/gen/qs8-vadd-minmax-scalar-u4.c",
+      "src/src/qs8-vmul/gen/qs8-vmul-minmax-f32-rvv-u2v.c",
     ]
 
     configs -= [ "//build/config/compiler:chromium_code" ]
@@ -37997,15 +46639,12 @@ if (current_cpu == "arm64") {
     }
   }
 
-  source_set("qs8-vaddc_arm64") {
+  source_set("qs8-vmul_riscv64") {
     cflags = []
 
     sources = [
       "src/include/xnnpack.h",
-      "src/src/qs8-vaddc/gen/qs8-vaddc-minmax-neon-ld64-u16.c",
-      "src/src/qs8-vaddc/gen/qs8-vaddc-minmax-neon-ld64-u32.c",
-      "src/src/qs8-vaddc/gen/qs8-vaddc-minmax-scalar-u1.c",
-      "src/src/qs8-vaddc/gen/qs8-vaddc-minmax-scalar-u4.c",
+      "src/src/qs8-vmul/gen/qs8-vmul-minmax-fp32-scalar-u4.c",
     ]
 
     configs -= [ "//build/config/compiler:chromium_code" ]
@@ -38023,15 +46662,12 @@ if (current_cpu == "arm64") {
   }
 
   # This is a target that cannot depend on //base.
-  source_set("qs8-vaddc_arm64_standalone") {
+  source_set("qs8-vmul_riscv64_standalone") {
     cflags = []
 
     sources = [
       "src/include/xnnpack.h",
-      "src/src/qs8-vaddc/gen/qs8-vaddc-minmax-neon-ld64-u16.c",
-      "src/src/qs8-vaddc/gen/qs8-vaddc-minmax-neon-ld64-u32.c",
-      "src/src/qs8-vaddc/gen/qs8-vaddc-minmax-scalar-u1.c",
-      "src/src/qs8-vaddc/gen/qs8-vaddc-minmax-scalar-u4.c",
+      "src/src/qs8-vmul/gen/qs8-vmul-minmax-fp32-scalar-u4.c",
     ]
 
     configs -= [ "//build/config/compiler:chromium_code" ]
@@ -38052,14 +46688,15 @@ if (current_cpu == "arm64") {
     }
   }
 
-  source_set("qs8-vcvt_arm64") {
-    cflags = []
+  source_set("qs8-vmulc_arch=rv64gcv-abi=lp64d") {
+    cflags = [
+      "-mabi=lp64d",
+      "-march=rv64gcv",
+    ]
 
     sources = [
       "src/include/xnnpack.h",
-      "src/src/qs8-vcvt/gen/qs8-vcvt-neon-u32.c",
-      "src/src/qs8-vcvt/gen/qs8-vcvt-scalar-u1.c",
-      "src/src/qs8-vcvt/gen/qs8-vcvt-scalar-u4.c",
+      "src/src/qs8-vmulc/gen/qs8-vmulc-minmax-f32-rvv-u2v.c",
     ]
 
     configs -= [ "//build/config/compiler:chromium_code" ]
@@ -38077,14 +46714,15 @@ if (current_cpu == "arm64") {
   }
 
   # This is a target that cannot depend on //base.
-  source_set("qs8-vcvt_arm64_standalone") {
-    cflags = []
+  source_set("qs8-vmulc_arch=rv64gcv-abi=lp64d_standalone") {
+    cflags = [
+      "-mabi=lp64d",
+      "-march=rv64gcv",
+    ]
 
     sources = [
       "src/include/xnnpack.h",
-      "src/src/qs8-vcvt/gen/qs8-vcvt-neon-u32.c",
-      "src/src/qs8-vcvt/gen/qs8-vcvt-scalar-u1.c",
-      "src/src/qs8-vcvt/gen/qs8-vcvt-scalar-u4.c",
+      "src/src/qs8-vmulc/gen/qs8-vmulc-minmax-f32-rvv-u2v.c",
     ]
 
     configs -= [ "//build/config/compiler:chromium_code" ]
@@ -38105,14 +46743,12 @@ if (current_cpu == "arm64") {
     }
   }
 
-  source_set("qs8-vlrelu_arm64") {
+  source_set("qs8-vmulc_riscv64") {
     cflags = []
 
     sources = [
       "src/include/xnnpack.h",
-      "src/src/qs8-vlrelu/gen/qs8-vlrelu-neon-u32.c",
-      "src/src/qs8-vlrelu/gen/qs8-vlrelu-scalar-andxor-u4.c",
-      "src/src/qs8-vlrelu/gen/qs8-vlrelu-scalar-select-u4.c",
+      "src/src/qs8-vmulc/gen/qs8-vmulc-minmax-fp32-scalar-u4.c",
     ]
 
     configs -= [ "//build/config/compiler:chromium_code" ]
@@ -38130,14 +46766,12 @@ if (current_cpu == "arm64") {
   }
 
   # This is a target that cannot depend on //base.
-  source_set("qs8-vlrelu_arm64_standalone") {
+  source_set("qs8-vmulc_riscv64_standalone") {
     cflags = []
 
     sources = [
       "src/include/xnnpack.h",
-      "src/src/qs8-vlrelu/gen/qs8-vlrelu-neon-u32.c",
-      "src/src/qs8-vlrelu/gen/qs8-vlrelu-scalar-andxor-u4.c",
-      "src/src/qs8-vlrelu/gen/qs8-vlrelu-scalar-select-u4.c",
+      "src/src/qs8-vmulc/gen/qs8-vmulc-minmax-fp32-scalar-u4.c",
     ]
 
     configs -= [ "//build/config/compiler:chromium_code" ]
@@ -38158,13 +46792,16 @@ if (current_cpu == "arm64") {
     }
   }
 
-  source_set("qs8-vmul_arm64") {
-    cflags = []
+  source_set("qu8-dwconv_arch=rv64gcv-abi=lp64d") {
+    cflags = [
+      "-mabi=lp64d",
+      "-march=rv64gcv",
+    ]
 
     sources = [
       "src/include/xnnpack.h",
-      "src/src/qs8-vmul/gen/qs8-vmul-minmax-fp32-scalar-u4.c",
-      "src/src/qs8-vmul/gen/qs8-vmul-minmax-rndnu-neon-ld64-u16.c",
+      "src/src/qu8-dwconv/gen/qu8-dwconv-25p8vc-minmax-fp32-rvv.c",
+      "src/src/qu8-dwconv/gen/qu8-dwconv-9p8vc-minmax-fp32-rvv.c",
     ]
 
     configs -= [ "//build/config/compiler:chromium_code" ]
@@ -38182,13 +46819,16 @@ if (current_cpu == "arm64") {
   }
 
   # This is a target that cannot depend on //base.
-  source_set("qs8-vmul_arm64_standalone") {
-    cflags = []
+  source_set("qu8-dwconv_arch=rv64gcv-abi=lp64d_standalone") {
+    cflags = [
+      "-mabi=lp64d",
+      "-march=rv64gcv",
+    ]
 
     sources = [
       "src/include/xnnpack.h",
-      "src/src/qs8-vmul/gen/qs8-vmul-minmax-fp32-scalar-u4.c",
-      "src/src/qs8-vmul/gen/qs8-vmul-minmax-rndnu-neon-ld64-u16.c",
+      "src/src/qu8-dwconv/gen/qu8-dwconv-25p8vc-minmax-fp32-rvv.c",
+      "src/src/qu8-dwconv/gen/qu8-dwconv-9p8vc-minmax-fp32-rvv.c",
     ]
 
     configs -= [ "//build/config/compiler:chromium_code" ]
@@ -38209,13 +46849,17 @@ if (current_cpu == "arm64") {
     }
   }
 
-  source_set("qs8-vmulc_arm64") {
+  source_set("qu8-dwconv_riscv64") {
     cflags = []
 
     sources = [
       "src/include/xnnpack.h",
-      "src/src/qs8-vmulc/gen/qs8-vmulc-minmax-fp32-scalar-u4.c",
-      "src/src/qs8-vmulc/gen/qs8-vmulc-minmax-rndnu-neon-ld64-u16.c",
+      "src/src/qu8-dwconv/gen/qu8-dwconv-25p1c-minmax-fp32-scalar-fmagic.c",
+      "src/src/qu8-dwconv/gen/qu8-dwconv-25p1c-minmax-fp32-scalar-imagic.c",
+      "src/src/qu8-dwconv/gen/qu8-dwconv-25p2c-minmax-fp32-scalar-lrintf.c",
+      "src/src/qu8-dwconv/gen/qu8-dwconv-9p1c-minmax-fp32-scalar-fmagic.c",
+      "src/src/qu8-dwconv/gen/qu8-dwconv-9p2c-minmax-fp32-scalar-imagic.c",
+      "src/src/qu8-dwconv/gen/qu8-dwconv-9p2c-minmax-fp32-scalar-lrintf.c",
     ]
 
     configs -= [ "//build/config/compiler:chromium_code" ]
@@ -38233,13 +46877,17 @@ if (current_cpu == "arm64") {
   }
 
   # This is a target that cannot depend on //base.
-  source_set("qs8-vmulc_arm64_standalone") {
+  source_set("qu8-dwconv_riscv64_standalone") {
     cflags = []
 
     sources = [
       "src/include/xnnpack.h",
-      "src/src/qs8-vmulc/gen/qs8-vmulc-minmax-fp32-scalar-u4.c",
-      "src/src/qs8-vmulc/gen/qs8-vmulc-minmax-rndnu-neon-ld64-u16.c",
+      "src/src/qu8-dwconv/gen/qu8-dwconv-25p1c-minmax-fp32-scalar-fmagic.c",
+      "src/src/qu8-dwconv/gen/qu8-dwconv-25p1c-minmax-fp32-scalar-imagic.c",
+      "src/src/qu8-dwconv/gen/qu8-dwconv-25p2c-minmax-fp32-scalar-lrintf.c",
+      "src/src/qu8-dwconv/gen/qu8-dwconv-9p1c-minmax-fp32-scalar-fmagic.c",
+      "src/src/qu8-dwconv/gen/qu8-dwconv-9p2c-minmax-fp32-scalar-imagic.c",
+      "src/src/qu8-dwconv/gen/qu8-dwconv-9p2c-minmax-fp32-scalar-lrintf.c",
     ]
 
     configs -= [ "//build/config/compiler:chromium_code" ]
@@ -38260,19 +46908,15 @@ if (current_cpu == "arm64") {
     }
   }
 
-  source_set("qu8-dwconv_arm64") {
-    cflags = []
+  source_set("qu8-f32-vcvt_arch=rv64gcv-abi=lp64d") {
+    cflags = [
+      "-mabi=lp64d",
+      "-march=rv64gcv",
+    ]
 
     sources = [
       "src/include/xnnpack.h",
-      "src/src/qu8-dwconv/gen/qu8-dwconv-25p1c-minmax-fp32-scalar-fmagic.c",
-      "src/src/qu8-dwconv/gen/qu8-dwconv-25p1c-minmax-fp32-scalar-imagic.c",
-      "src/src/qu8-dwconv/gen/qu8-dwconv-25p2c-minmax-fp32-scalar-lrintf.c",
-      "src/src/qu8-dwconv/gen/qu8-dwconv-25p8c-minmax-rndnu-neon-mul8.c",
-      "src/src/qu8-dwconv/gen/qu8-dwconv-9p16c-minmax-rndnu-neon-mul8.c",
-      "src/src/qu8-dwconv/gen/qu8-dwconv-9p1c-minmax-fp32-scalar-fmagic.c",
-      "src/src/qu8-dwconv/gen/qu8-dwconv-9p2c-minmax-fp32-scalar-imagic.c",
-      "src/src/qu8-dwconv/gen/qu8-dwconv-9p2c-minmax-fp32-scalar-lrintf.c",
+      "src/src/qu8-f32-vcvt/gen/qu8-f32-vcvt-rvv-u2v.c",
     ]
 
     configs -= [ "//build/config/compiler:chromium_code" ]
@@ -38290,19 +46934,15 @@ if (current_cpu == "arm64") {
   }
 
   # This is a target that cannot depend on //base.
-  source_set("qu8-dwconv_arm64_standalone") {
-    cflags = []
+  source_set("qu8-f32-vcvt_arch=rv64gcv-abi=lp64d_standalone") {
+    cflags = [
+      "-mabi=lp64d",
+      "-march=rv64gcv",
+    ]
 
     sources = [
       "src/include/xnnpack.h",
-      "src/src/qu8-dwconv/gen/qu8-dwconv-25p1c-minmax-fp32-scalar-fmagic.c",
-      "src/src/qu8-dwconv/gen/qu8-dwconv-25p1c-minmax-fp32-scalar-imagic.c",
-      "src/src/qu8-dwconv/gen/qu8-dwconv-25p2c-minmax-fp32-scalar-lrintf.c",
-      "src/src/qu8-dwconv/gen/qu8-dwconv-25p8c-minmax-rndnu-neon-mul8.c",
-      "src/src/qu8-dwconv/gen/qu8-dwconv-9p16c-minmax-rndnu-neon-mul8.c",
-      "src/src/qu8-dwconv/gen/qu8-dwconv-9p1c-minmax-fp32-scalar-fmagic.c",
-      "src/src/qu8-dwconv/gen/qu8-dwconv-9p2c-minmax-fp32-scalar-imagic.c",
-      "src/src/qu8-dwconv/gen/qu8-dwconv-9p2c-minmax-fp32-scalar-lrintf.c",
+      "src/src/qu8-f32-vcvt/gen/qu8-f32-vcvt-rvv-u2v.c",
     ]
 
     configs -= [ "//build/config/compiler:chromium_code" ]
@@ -38323,12 +46963,11 @@ if (current_cpu == "arm64") {
     }
   }
 
-  source_set("qu8-f32-vcvt_arm64") {
+  source_set("qu8-f32-vcvt_riscv64") {
     cflags = []
 
     sources = [
       "src/include/xnnpack.h",
-      "src/src/qu8-f32-vcvt/gen/qu8-f32-vcvt-neon-u32.c",
       "src/src/qu8-f32-vcvt/gen/qu8-f32-vcvt-scalar-u1.c",
       "src/src/qu8-f32-vcvt/gen/qu8-f32-vcvt-scalar-u4.c",
     ]
@@ -38348,12 +46987,11 @@ if (current_cpu == "arm64") {
   }
 
   # This is a target that cannot depend on //base.
-  source_set("qu8-f32-vcvt_arm64_standalone") {
+  source_set("qu8-f32-vcvt_riscv64_standalone") {
     cflags = []
 
     sources = [
       "src/include/xnnpack.h",
-      "src/src/qu8-f32-vcvt/gen/qu8-f32-vcvt-neon-u32.c",
       "src/src/qu8-f32-vcvt/gen/qu8-f32-vcvt-scalar-u1.c",
       "src/src/qu8-f32-vcvt/gen/qu8-f32-vcvt-scalar-u4.c",
     ]
@@ -38376,17 +47014,15 @@ if (current_cpu == "arm64") {
     }
   }
 
-  source_set("qu8-gemm_arch=armv8.2-a+fp16+dotprod") {
-    cflags = [ "-march=armv8.2-a+fp16+dotprod" ]
-
-    asmflags = cflags
+  source_set("qu8-gemm_riscv64") {
+    cflags = []
 
     sources = [
       "src/include/xnnpack.h",
-      "src/src/qu8-gemm/gen/qu8-gemm-4x16-minmax-rndnu-asm-aarch64-neon-mlal-lane-cortex-a53-prfm.S",
-      "src/src/qu8-gemm/gen/qu8-gemm-4x16-minmax-rndnu-asm-aarch64-neon-mlal-lane-cortex-a75-prfm.S",
-      "src/src/qu8-gemm/gen/qu8-gemm-4x16-minmax-rndnu-asm-aarch64-neon-mlal-lane-cortex-a75.S",
-      "src/src/qu8-gemm/gen/qu8-gemm-4x16-minmax-rndnu16-asm-aarch64-neon-mlal-lane-cortex-a53-prfm.S",
+      "src/src/qu8-gemm/gen/qu8-gemm-1x2-minmax-fp32-scalar-imagic.c",
+      "src/src/qu8-gemm/gen/qu8-gemm-1x4-minmax-fp32-scalar-lrintf.c",
+      "src/src/qu8-gemm/gen/qu8-gemm-2x2-minmax-fp32-scalar-imagic.c",
+      "src/src/qu8-gemm/gen/qu8-gemm-3x4-minmax-fp32-scalar-lrintf.c",
     ]
 
     configs -= [ "//build/config/compiler:chromium_code" ]
@@ -38404,17 +47040,15 @@ if (current_cpu == "arm64") {
   }
 
   # This is a target that cannot depend on //base.
-  source_set("qu8-gemm_arch=armv8.2-a+fp16+dotprod_standalone") {
-    cflags = [ "-march=armv8.2-a+fp16+dotprod" ]
-
-    asmflags = cflags
+  source_set("qu8-gemm_riscv64_standalone") {
+    cflags = []
 
     sources = [
       "src/include/xnnpack.h",
-      "src/src/qu8-gemm/gen/qu8-gemm-4x16-minmax-rndnu-asm-aarch64-neon-mlal-lane-cortex-a53-prfm.S",
-      "src/src/qu8-gemm/gen/qu8-gemm-4x16-minmax-rndnu-asm-aarch64-neon-mlal-lane-cortex-a75-prfm.S",
-      "src/src/qu8-gemm/gen/qu8-gemm-4x16-minmax-rndnu-asm-aarch64-neon-mlal-lane-cortex-a75.S",
-      "src/src/qu8-gemm/gen/qu8-gemm-4x16-minmax-rndnu16-asm-aarch64-neon-mlal-lane-cortex-a53-prfm.S",
+      "src/src/qu8-gemm/gen/qu8-gemm-1x2-minmax-fp32-scalar-imagic.c",
+      "src/src/qu8-gemm/gen/qu8-gemm-1x4-minmax-fp32-scalar-lrintf.c",
+      "src/src/qu8-gemm/gen/qu8-gemm-2x2-minmax-fp32-scalar-imagic.c",
+      "src/src/qu8-gemm/gen/qu8-gemm-3x4-minmax-fp32-scalar-lrintf.c",
     ]
 
     configs -= [ "//build/config/compiler:chromium_code" ]
@@ -38435,20 +47069,15 @@ if (current_cpu == "arm64") {
     }
   }
 
-  source_set("qu8-gemm_arm64") {
+  source_set("qu8-igemm_riscv64") {
     cflags = []
 
     sources = [
       "src/include/xnnpack.h",
-      "src/src/qu8-gemm/gen/qu8-gemm-1x16-minmax-rndnu-neon-mlal-lane.c",
-      "src/src/qu8-gemm/gen/qu8-gemm-1x16-minmax-rndnu16-neon-mlal-lane.c",
-      "src/src/qu8-gemm/gen/qu8-gemm-1x2-minmax-fp32-scalar-imagic.c",
-      "src/src/qu8-gemm/gen/qu8-gemm-1x4-minmax-fp32-scalar-lrintf.c",
-      "src/src/qu8-gemm/gen/qu8-gemm-1x8-minmax-rndnu-neon-mlal-lane.c",
-      "src/src/qu8-gemm/gen/qu8-gemm-2x2-minmax-fp32-scalar-imagic.c",
-      "src/src/qu8-gemm/gen/qu8-gemm-3x4-minmax-fp32-scalar-lrintf.c",
-      "src/src/qu8-gemm/gen/qu8-gemm-3x8-minmax-rndnu-neon-mlal-lane.c",
-      "src/src/qu8-gemm/gen/qu8-gemm-4x16-minmax-rndnu-neon-mlal-lane.c",
+      "src/src/qu8-igemm/gen/qu8-igemm-1x2-minmax-fp32-scalar-imagic.c",
+      "src/src/qu8-igemm/gen/qu8-igemm-1x4-minmax-fp32-scalar-lrintf.c",
+      "src/src/qu8-igemm/gen/qu8-igemm-2x2-minmax-fp32-scalar-imagic.c",
+      "src/src/qu8-igemm/gen/qu8-igemm-3x4-minmax-fp32-scalar-lrintf.c",
     ]
 
     configs -= [ "//build/config/compiler:chromium_code" ]
@@ -38466,20 +47095,15 @@ if (current_cpu == "arm64") {
   }
 
   # This is a target that cannot depend on //base.
-  source_set("qu8-gemm_arm64_standalone") {
+  source_set("qu8-igemm_riscv64_standalone") {
     cflags = []
 
     sources = [
       "src/include/xnnpack.h",
-      "src/src/qu8-gemm/gen/qu8-gemm-1x16-minmax-rndnu-neon-mlal-lane.c",
-      "src/src/qu8-gemm/gen/qu8-gemm-1x16-minmax-rndnu16-neon-mlal-lane.c",
-      "src/src/qu8-gemm/gen/qu8-gemm-1x2-minmax-fp32-scalar-imagic.c",
-      "src/src/qu8-gemm/gen/qu8-gemm-1x4-minmax-fp32-scalar-lrintf.c",
-      "src/src/qu8-gemm/gen/qu8-gemm-1x8-minmax-rndnu-neon-mlal-lane.c",
-      "src/src/qu8-gemm/gen/qu8-gemm-2x2-minmax-fp32-scalar-imagic.c",
-      "src/src/qu8-gemm/gen/qu8-gemm-3x4-minmax-fp32-scalar-lrintf.c",
-      "src/src/qu8-gemm/gen/qu8-gemm-3x8-minmax-rndnu-neon-mlal-lane.c",
-      "src/src/qu8-gemm/gen/qu8-gemm-4x16-minmax-rndnu-neon-mlal-lane.c",
+      "src/src/qu8-igemm/gen/qu8-igemm-1x2-minmax-fp32-scalar-imagic.c",
+      "src/src/qu8-igemm/gen/qu8-igemm-1x4-minmax-fp32-scalar-lrintf.c",
+      "src/src/qu8-igemm/gen/qu8-igemm-2x2-minmax-fp32-scalar-imagic.c",
+      "src/src/qu8-igemm/gen/qu8-igemm-3x4-minmax-fp32-scalar-lrintf.c",
     ]
 
     configs -= [ "//build/config/compiler:chromium_code" ]
@@ -38500,17 +47124,15 @@ if (current_cpu == "arm64") {
     }
   }
 
-  source_set("qu8-igemm_arch=armv8.2-a+fp16+dotprod") {
-    cflags = [ "-march=armv8.2-a+fp16+dotprod" ]
-
-    asmflags = cflags
+  source_set("qu8-rdsum_arch=rv64gcv-abi=lp64d") {
+    cflags = [
+      "-mabi=lp64d",
+      "-march=rv64gcv",
+    ]
 
     sources = [
       "src/include/xnnpack.h",
-      "src/src/qu8-igemm/gen/qu8-igemm-4x16-minmax-rndnu-asm-aarch64-neon-mlal-lane-cortex-a53-prfm.S",
-      "src/src/qu8-igemm/gen/qu8-igemm-4x16-minmax-rndnu-asm-aarch64-neon-mlal-lane-cortex-a75-prfm.S",
-      "src/src/qu8-igemm/gen/qu8-igemm-4x16-minmax-rndnu-asm-aarch64-neon-mlal-lane-cortex-a75.S",
-      "src/src/qu8-igemm/gen/qu8-igemm-4x16-minmax-rndnu16-asm-aarch64-neon-mlal-lane-cortex-a53-prfm.S",
+      "src/src/qu8-rdsum/gen/qu8-rdsum-7p7x-rvv-u2v.c",
     ]
 
     configs -= [ "//build/config/compiler:chromium_code" ]
@@ -38528,17 +47150,15 @@ if (current_cpu == "arm64") {
   }
 
   # This is a target that cannot depend on //base.
-  source_set("qu8-igemm_arch=armv8.2-a+fp16+dotprod_standalone") {
-    cflags = [ "-march=armv8.2-a+fp16+dotprod" ]
-
-    asmflags = cflags
+  source_set("qu8-rdsum_arch=rv64gcv-abi=lp64d_standalone") {
+    cflags = [
+      "-mabi=lp64d",
+      "-march=rv64gcv",
+    ]
 
     sources = [
       "src/include/xnnpack.h",
-      "src/src/qu8-igemm/gen/qu8-igemm-4x16-minmax-rndnu-asm-aarch64-neon-mlal-lane-cortex-a53-prfm.S",
-      "src/src/qu8-igemm/gen/qu8-igemm-4x16-minmax-rndnu-asm-aarch64-neon-mlal-lane-cortex-a75-prfm.S",
-      "src/src/qu8-igemm/gen/qu8-igemm-4x16-minmax-rndnu-asm-aarch64-neon-mlal-lane-cortex-a75.S",
-      "src/src/qu8-igemm/gen/qu8-igemm-4x16-minmax-rndnu16-asm-aarch64-neon-mlal-lane-cortex-a53-prfm.S",
+      "src/src/qu8-rdsum/gen/qu8-rdsum-7p7x-rvv-u2v.c",
     ]
 
     configs -= [ "//build/config/compiler:chromium_code" ]
@@ -38559,20 +47179,12 @@ if (current_cpu == "arm64") {
     }
   }
 
-  source_set("qu8-igemm_arm64") {
+  source_set("qu8-rdsum_riscv64") {
     cflags = []
 
     sources = [
       "src/include/xnnpack.h",
-      "src/src/qu8-igemm/gen/qu8-igemm-1x16-minmax-rndnu-neon-mlal-lane.c",
-      "src/src/qu8-igemm/gen/qu8-igemm-1x16-minmax-rndnu16-neon-mlal-lane.c",
-      "src/src/qu8-igemm/gen/qu8-igemm-1x2-minmax-fp32-scalar-imagic.c",
-      "src/src/qu8-igemm/gen/qu8-igemm-1x4-minmax-fp32-scalar-lrintf.c",
-      "src/src/qu8-igemm/gen/qu8-igemm-1x8-minmax-rndnu-neon-mlal-lane.c",
-      "src/src/qu8-igemm/gen/qu8-igemm-2x2-minmax-fp32-scalar-imagic.c",
-      "src/src/qu8-igemm/gen/qu8-igemm-3x4-minmax-fp32-scalar-lrintf.c",
-      "src/src/qu8-igemm/gen/qu8-igemm-3x8-minmax-rndnu-neon-mlal-lane.c",
-      "src/src/qu8-igemm/gen/qu8-igemm-4x16-minmax-rndnu-neon-mlal-lane.c",
+      "src/src/qu8-rdsum/gen/qu8-rdsum-scalar.c",
     ]
 
     configs -= [ "//build/config/compiler:chromium_code" ]
@@ -38590,20 +47202,12 @@ if (current_cpu == "arm64") {
   }
 
   # This is a target that cannot depend on //base.
-  source_set("qu8-igemm_arm64_standalone") {
+  source_set("qu8-rdsum_riscv64_standalone") {
     cflags = []
 
     sources = [
       "src/include/xnnpack.h",
-      "src/src/qu8-igemm/gen/qu8-igemm-1x16-minmax-rndnu-neon-mlal-lane.c",
-      "src/src/qu8-igemm/gen/qu8-igemm-1x16-minmax-rndnu16-neon-mlal-lane.c",
-      "src/src/qu8-igemm/gen/qu8-igemm-1x2-minmax-fp32-scalar-imagic.c",
-      "src/src/qu8-igemm/gen/qu8-igemm-1x4-minmax-fp32-scalar-lrintf.c",
-      "src/src/qu8-igemm/gen/qu8-igemm-1x8-minmax-rndnu-neon-mlal-lane.c",
-      "src/src/qu8-igemm/gen/qu8-igemm-2x2-minmax-fp32-scalar-imagic.c",
-      "src/src/qu8-igemm/gen/qu8-igemm-3x4-minmax-fp32-scalar-lrintf.c",
-      "src/src/qu8-igemm/gen/qu8-igemm-3x8-minmax-rndnu-neon-mlal-lane.c",
-      "src/src/qu8-igemm/gen/qu8-igemm-4x16-minmax-rndnu-neon-mlal-lane.c",
+      "src/src/qu8-rdsum/gen/qu8-rdsum-scalar.c",
     ]
 
     configs -= [ "//build/config/compiler:chromium_code" ]
@@ -38624,14 +47228,15 @@ if (current_cpu == "arm64") {
     }
   }
 
-  source_set("qu8-rdsum_arm64") {
-    cflags = []
+  source_set("qu8-rsum_arch=rv64gcv-abi=lp64d") {
+    cflags = [
+      "-mabi=lp64d",
+      "-march=rv64gcv",
+    ]
 
     sources = [
       "src/include/xnnpack.h",
-      "src/src/qu8-rdsum/gen/qu8-rdsum-7p7x-neon-u16.c",
-      "src/src/qu8-rdsum/gen/qu8-rdsum-7p7x-neon-u32.c",
-      "src/src/qu8-rdsum/gen/qu8-rdsum-scalar.c",
+      "src/src/qu8-rsum/gen/qu8-rsum-rvv-u2v.c",
     ]
 
     configs -= [ "//build/config/compiler:chromium_code" ]
@@ -38649,14 +47254,15 @@ if (current_cpu == "arm64") {
   }
 
   # This is a target that cannot depend on //base.
-  source_set("qu8-rdsum_arm64_standalone") {
-    cflags = []
+  source_set("qu8-rsum_arch=rv64gcv-abi=lp64d_standalone") {
+    cflags = [
+      "-mabi=lp64d",
+      "-march=rv64gcv",
+    ]
 
     sources = [
       "src/include/xnnpack.h",
-      "src/src/qu8-rdsum/gen/qu8-rdsum-7p7x-neon-u16.c",
-      "src/src/qu8-rdsum/gen/qu8-rdsum-7p7x-neon-u32.c",
-      "src/src/qu8-rdsum/gen/qu8-rdsum-scalar.c",
+      "src/src/qu8-rsum/gen/qu8-rsum-rvv-u2v.c",
     ]
 
     configs -= [ "//build/config/compiler:chromium_code" ]
@@ -38677,12 +47283,11 @@ if (current_cpu == "arm64") {
     }
   }
 
-  source_set("qu8-rsum_arm64") {
+  source_set("qu8-rsum_riscv64") {
     cflags = []
 
     sources = [
       "src/include/xnnpack.h",
-      "src/src/qu8-rsum/gen/qu8-rsum-neon-u32-acc2.c",
       "src/src/qu8-rsum/gen/qu8-rsum-scalar-u4.c",
     ]
 
@@ -38701,12 +47306,11 @@ if (current_cpu == "arm64") {
   }
 
   # This is a target that cannot depend on //base.
-  source_set("qu8-rsum_arm64_standalone") {
+  source_set("qu8-rsum_riscv64_standalone") {
     cflags = []
 
     sources = [
       "src/include/xnnpack.h",
-      "src/src/qu8-rsum/gen/qu8-rsum-neon-u32-acc2.c",
       "src/src/qu8-rsum/gen/qu8-rsum-scalar-u4.c",
     ]
 
@@ -38728,13 +47332,66 @@ if (current_cpu == "arm64") {
     }
   }
 
-  source_set("qu8-vadd_arm64") {
+  source_set("qu8-vadd_arch=rv64gcv-abi=lp64d") {
+    cflags = [
+      "-mabi=lp64d",
+      "-march=rv64gcv",
+    ]
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/qu8-vadd/gen/qu8-vadd-minmax-rvv-u2v.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("qu8-vadd_arch=rv64gcv-abi=lp64d_standalone") {
+    cflags = [
+      "-mabi=lp64d",
+      "-march=rv64gcv",
+    ]
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/qu8-vadd/gen/qu8-vadd-minmax-rvv-u2v.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("qu8-vadd_riscv64") {
     cflags = []
 
     sources = [
       "src/include/xnnpack.h",
-      "src/src/qu8-vadd/gen/qu8-vadd-minmax-neon-ld64-u16.c",
-      "src/src/qu8-vadd/gen/qu8-vadd-minmax-neon-ld64-u32.c",
       "src/src/qu8-vadd/gen/qu8-vadd-minmax-scalar-u1.c",
       "src/src/qu8-vadd/gen/qu8-vadd-minmax-scalar-u4.c",
     ]
@@ -38754,13 +47411,11 @@ if (current_cpu == "arm64") {
   }
 
   # This is a target that cannot depend on //base.
-  source_set("qu8-vadd_arm64_standalone") {
+  source_set("qu8-vadd_riscv64_standalone") {
     cflags = []
 
     sources = [
       "src/include/xnnpack.h",
-      "src/src/qu8-vadd/gen/qu8-vadd-minmax-neon-ld64-u16.c",
-      "src/src/qu8-vadd/gen/qu8-vadd-minmax-neon-ld64-u32.c",
       "src/src/qu8-vadd/gen/qu8-vadd-minmax-scalar-u1.c",
       "src/src/qu8-vadd/gen/qu8-vadd-minmax-scalar-u4.c",
     ]
@@ -38783,13 +47438,66 @@ if (current_cpu == "arm64") {
     }
   }
 
-  source_set("qu8-vaddc_arm64") {
+  source_set("qu8-vaddc_arch=rv64gcv-abi=lp64d") {
+    cflags = [
+      "-mabi=lp64d",
+      "-march=rv64gcv",
+    ]
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/qu8-vaddc/gen/qu8-vaddc-minmax-rvv-u2v.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("qu8-vaddc_arch=rv64gcv-abi=lp64d_standalone") {
+    cflags = [
+      "-mabi=lp64d",
+      "-march=rv64gcv",
+    ]
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/qu8-vaddc/gen/qu8-vaddc-minmax-rvv-u2v.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("qu8-vaddc_riscv64") {
     cflags = []
 
     sources = [
       "src/include/xnnpack.h",
-      "src/src/qu8-vaddc/gen/qu8-vaddc-minmax-neon-ld64-u16.c",
-      "src/src/qu8-vaddc/gen/qu8-vaddc-minmax-neon-ld64-u32.c",
       "src/src/qu8-vaddc/gen/qu8-vaddc-minmax-scalar-u1.c",
       "src/src/qu8-vaddc/gen/qu8-vaddc-minmax-scalar-u4.c",
     ]
@@ -38809,13 +47517,11 @@ if (current_cpu == "arm64") {
   }
 
   # This is a target that cannot depend on //base.
-  source_set("qu8-vaddc_arm64_standalone") {
+  source_set("qu8-vaddc_riscv64_standalone") {
     cflags = []
 
     sources = [
       "src/include/xnnpack.h",
-      "src/src/qu8-vaddc/gen/qu8-vaddc-minmax-neon-ld64-u16.c",
-      "src/src/qu8-vaddc/gen/qu8-vaddc-minmax-neon-ld64-u32.c",
       "src/src/qu8-vaddc/gen/qu8-vaddc-minmax-scalar-u1.c",
       "src/src/qu8-vaddc/gen/qu8-vaddc-minmax-scalar-u4.c",
     ]
@@ -38838,12 +47544,11 @@ if (current_cpu == "arm64") {
     }
   }
 
-  source_set("qu8-vcvt_arm64") {
+  source_set("qu8-vcvt_riscv64") {
     cflags = []
 
     sources = [
       "src/include/xnnpack.h",
-      "src/src/qu8-vcvt/gen/qu8-vcvt-neon-u32.c",
       "src/src/qu8-vcvt/gen/qu8-vcvt-scalar-u1.c",
       "src/src/qu8-vcvt/gen/qu8-vcvt-scalar-u4.c",
     ]
@@ -38863,12 +47568,11 @@ if (current_cpu == "arm64") {
   }
 
   # This is a target that cannot depend on //base.
-  source_set("qu8-vcvt_arm64_standalone") {
+  source_set("qu8-vcvt_riscv64_standalone") {
     cflags = []
 
     sources = [
       "src/include/xnnpack.h",
-      "src/src/qu8-vcvt/gen/qu8-vcvt-neon-u32.c",
       "src/src/qu8-vcvt/gen/qu8-vcvt-scalar-u1.c",
       "src/src/qu8-vcvt/gen/qu8-vcvt-scalar-u4.c",
     ]
@@ -38891,12 +47595,66 @@ if (current_cpu == "arm64") {
     }
   }
 
-  source_set("qu8-vlrelu_arm64") {
+  source_set("qu8-vlrelu_arch=rv64gcv-abi=lp64d") {
+    cflags = [
+      "-mabi=lp64d",
+      "-march=rv64gcv",
+    ]
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/qu8-vlrelu/gen/qu8-vlrelu-rvv-u2v.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("qu8-vlrelu_arch=rv64gcv-abi=lp64d_standalone") {
+    cflags = [
+      "-mabi=lp64d",
+      "-march=rv64gcv",
+    ]
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/qu8-vlrelu/gen/qu8-vlrelu-rvv-u2v.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("qu8-vlrelu_riscv64") {
     cflags = []
 
     sources = [
       "src/include/xnnpack.h",
-      "src/src/qu8-vlrelu/gen/qu8-vlrelu-neon-u32.c",
       "src/src/qu8-vlrelu/gen/qu8-vlrelu-scalar-andxor-u4.c",
       "src/src/qu8-vlrelu/gen/qu8-vlrelu-scalar-select-u4.c",
     ]
@@ -38916,12 +47674,11 @@ if (current_cpu == "arm64") {
   }
 
   # This is a target that cannot depend on //base.
-  source_set("qu8-vlrelu_arm64_standalone") {
+  source_set("qu8-vlrelu_riscv64_standalone") {
     cflags = []
 
     sources = [
       "src/include/xnnpack.h",
-      "src/src/qu8-vlrelu/gen/qu8-vlrelu-neon-u32.c",
       "src/src/qu8-vlrelu/gen/qu8-vlrelu-scalar-andxor-u4.c",
       "src/src/qu8-vlrelu/gen/qu8-vlrelu-scalar-select-u4.c",
     ]
@@ -38944,13 +47701,67 @@ if (current_cpu == "arm64") {
     }
   }
 
-  source_set("qu8-vmul_arm64") {
+  source_set("qu8-vmul_arch=rv64gcv-abi=lp64d") {
+    cflags = [
+      "-mabi=lp64d",
+      "-march=rv64gcv",
+    ]
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/qu8-vmul/gen/qu8-vmul-minmax-f32-rvv-u2v.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("qu8-vmul_arch=rv64gcv-abi=lp64d_standalone") {
+    cflags = [
+      "-mabi=lp64d",
+      "-march=rv64gcv",
+    ]
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/qu8-vmul/gen/qu8-vmul-minmax-f32-rvv-u2v.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("qu8-vmul_riscv64") {
     cflags = []
 
     sources = [
       "src/include/xnnpack.h",
       "src/src/qu8-vmul/gen/qu8-vmul-minmax-fp32-scalar-u4.c",
-      "src/src/qu8-vmul/gen/qu8-vmul-minmax-rndnu-neon-ld64-u16.c",
     ]
 
     configs -= [ "//build/config/compiler:chromium_code" ]
@@ -38968,13 +47779,12 @@ if (current_cpu == "arm64") {
   }
 
   # This is a target that cannot depend on //base.
-  source_set("qu8-vmul_arm64_standalone") {
+  source_set("qu8-vmul_riscv64_standalone") {
     cflags = []
 
     sources = [
       "src/include/xnnpack.h",
       "src/src/qu8-vmul/gen/qu8-vmul-minmax-fp32-scalar-u4.c",
-      "src/src/qu8-vmul/gen/qu8-vmul-minmax-rndnu-neon-ld64-u16.c",
     ]
 
     configs -= [ "//build/config/compiler:chromium_code" ]
@@ -38995,13 +47805,67 @@ if (current_cpu == "arm64") {
     }
   }
 
-  source_set("qu8-vmulc_arm64") {
+  source_set("qu8-vmulc_arch=rv64gcv-abi=lp64d") {
+    cflags = [
+      "-mabi=lp64d",
+      "-march=rv64gcv",
+    ]
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/qu8-vmulc/gen/qu8-vmulc-minmax-f32-rvv-u2v.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("qu8-vmulc_arch=rv64gcv-abi=lp64d_standalone") {
+    cflags = [
+      "-mabi=lp64d",
+      "-march=rv64gcv",
+    ]
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/qu8-vmulc/gen/qu8-vmulc-minmax-f32-rvv-u2v.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("qu8-vmulc_riscv64") {
     cflags = []
 
     sources = [
       "src/include/xnnpack.h",
       "src/src/qu8-vmulc/gen/qu8-vmulc-minmax-fp32-scalar-u4.c",
-      "src/src/qu8-vmulc/gen/qu8-vmulc-minmax-rndnu-neon-ld64-u16.c",
     ]
 
     configs -= [ "//build/config/compiler:chromium_code" ]
@@ -39019,13 +47883,12 @@ if (current_cpu == "arm64") {
   }
 
   # This is a target that cannot depend on //base.
-  source_set("qu8-vmulc_arm64_standalone") {
+  source_set("qu8-vmulc_riscv64_standalone") {
     cflags = []
 
     sources = [
       "src/include/xnnpack.h",
       "src/src/qu8-vmulc/gen/qu8-vmulc-minmax-fp32-scalar-u4.c",
-      "src/src/qu8-vmulc/gen/qu8-vmulc-minmax-rndnu-neon-ld64-u16.c",
     ]
 
     configs -= [ "//build/config/compiler:chromium_code" ]
@@ -39046,7 +47909,7 @@ if (current_cpu == "arm64") {
     }
   }
 
-  source_set("reference_arm64") {
+  source_set("reference_riscv64") {
     cflags = []
 
     sources = [
@@ -39071,7 +47934,7 @@ if (current_cpu == "arm64") {
   }
 
   # This is a target that cannot depend on //base.
-  source_set("reference_arm64_standalone") {
+  source_set("reference_riscv64_standalone") {
     cflags = []
 
     sources = [
@@ -39099,13 +47962,11 @@ if (current_cpu == "arm64") {
     }
   }
 
-  source_set("s8-ibilinear_arm64") {
+  source_set("s8-ibilinear_riscv64") {
     cflags = []
 
     sources = [
       "src/include/xnnpack.h",
-      "src/src/s8-ibilinear/gen/s8-ibilinear-neon-c16.c",
-      "src/src/s8-ibilinear/gen/s8-ibilinear-neon-c8.c",
       "src/src/s8-ibilinear/gen/s8-ibilinear-scalar-c1.c",
     ]
 
@@ -39124,13 +47985,11 @@ if (current_cpu == "arm64") {
   }
 
   # This is a target that cannot depend on //base.
-  source_set("s8-ibilinear_arm64_standalone") {
+  source_set("s8-ibilinear_riscv64_standalone") {
     cflags = []
 
     sources = [
       "src/include/xnnpack.h",
-      "src/src/s8-ibilinear/gen/s8-ibilinear-neon-c16.c",
-      "src/src/s8-ibilinear/gen/s8-ibilinear-neon-c8.c",
       "src/src/s8-ibilinear/gen/s8-ibilinear-scalar-c1.c",
     ]
 
@@ -39152,12 +48011,11 @@ if (current_cpu == "arm64") {
     }
   }
 
-  source_set("s8-maxpool_arm64") {
+  source_set("s8-maxpool_riscv64") {
     cflags = []
 
     sources = [
       "src/include/xnnpack.h",
-      "src/src/s8-maxpool/gen/s8-maxpool-9p-minmax-neon-u16.c",
       "src/src/s8-maxpool/gen/s8-maxpool-9p-minmax-scalar-u1.c",
     ]
 
@@ -39176,12 +48034,11 @@ if (current_cpu == "arm64") {
   }
 
   # This is a target that cannot depend on //base.
-  source_set("s8-maxpool_arm64_standalone") {
+  source_set("s8-maxpool_riscv64_standalone") {
     cflags = []
 
     sources = [
       "src/include/xnnpack.h",
-      "src/src/s8-maxpool/gen/s8-maxpool-9p-minmax-neon-u16.c",
       "src/src/s8-maxpool/gen/s8-maxpool-9p-minmax-scalar-u1.c",
     ]
 
@@ -39203,14 +48060,12 @@ if (current_cpu == "arm64") {
     }
   }
 
-  source_set("s8-rdminmax_arm64") {
+  source_set("s8-rdminmax_riscv64") {
     cflags = []
 
     sources = [
       "src/include/xnnpack.h",
-      "src/src/s8-rdminmax/gen/s8-rdmax-2p2x-neon-c32.c",
       "src/src/s8-rdminmax/gen/s8-rdmax-2p2x-scalar-c2.c",
-      "src/src/s8-rdminmax/gen/s8-rdmin-2p2x-neon-c32.c",
       "src/src/s8-rdminmax/gen/s8-rdmin-2p2x-scalar-c2.c",
     ]
 
@@ -39229,14 +48084,12 @@ if (current_cpu == "arm64") {
   }
 
   # This is a target that cannot depend on //base.
-  source_set("s8-rdminmax_arm64_standalone") {
+  source_set("s8-rdminmax_riscv64_standalone") {
     cflags = []
 
     sources = [
       "src/include/xnnpack.h",
-      "src/src/s8-rdminmax/gen/s8-rdmax-2p2x-neon-c32.c",
       "src/src/s8-rdminmax/gen/s8-rdmax-2p2x-scalar-c2.c",
-      "src/src/s8-rdminmax/gen/s8-rdmin-2p2x-neon-c32.c",
       "src/src/s8-rdminmax/gen/s8-rdmin-2p2x-scalar-c2.c",
     ]
 
@@ -39258,16 +48111,13 @@ if (current_cpu == "arm64") {
     }
   }
 
-  source_set("s8-rminmax_arm64") {
+  source_set("s8-rminmax_riscv64") {
     cflags = []
 
     sources = [
       "src/include/xnnpack.h",
-      "src/src/s8-rminmax/gen/s8-rmax-neon-u32-acc2.c",
       "src/src/s8-rminmax/gen/s8-rmax-scalar-u2-acc2.c",
-      "src/src/s8-rminmax/gen/s8-rmin-neon-u32-acc2.c",
       "src/src/s8-rminmax/gen/s8-rmin-scalar-u2-acc2.c",
-      "src/src/s8-rminmax/gen/s8-rminmax-neon-u32-acc2.c",
       "src/src/s8-rminmax/gen/s8-rminmax-scalar-u2-acc2.c",
     ]
 
@@ -39286,16 +48136,13 @@ if (current_cpu == "arm64") {
   }
 
   # This is a target that cannot depend on //base.
-  source_set("s8-rminmax_arm64_standalone") {
+  source_set("s8-rminmax_riscv64_standalone") {
     cflags = []
 
     sources = [
       "src/include/xnnpack.h",
-      "src/src/s8-rminmax/gen/s8-rmax-neon-u32-acc2.c",
       "src/src/s8-rminmax/gen/s8-rmax-scalar-u2-acc2.c",
-      "src/src/s8-rminmax/gen/s8-rmin-neon-u32-acc2.c",
       "src/src/s8-rminmax/gen/s8-rmin-scalar-u2-acc2.c",
-      "src/src/s8-rminmax/gen/s8-rminmax-neon-u32-acc2.c",
       "src/src/s8-rminmax/gen/s8-rminmax-scalar-u2-acc2.c",
     ]
 
@@ -39317,12 +48164,66 @@ if (current_cpu == "arm64") {
     }
   }
 
-  source_set("s8-vclamp_arm64") {
+  source_set("s8-vclamp_arch=rv64gcv-abi=lp64d") {
+    cflags = [
+      "-mabi=lp64d",
+      "-march=rv64gcv",
+    ]
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/s8-vclamp/gen/s8-vclamp-rvv-u4v.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("s8-vclamp_arch=rv64gcv-abi=lp64d_standalone") {
+    cflags = [
+      "-mabi=lp64d",
+      "-march=rv64gcv",
+    ]
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/s8-vclamp/gen/s8-vclamp-rvv-u4v.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("s8-vclamp_riscv64") {
     cflags = []
 
     sources = [
       "src/include/xnnpack.h",
-      "src/src/s8-vclamp/s8-vclamp-neon-u64.c",
       "src/src/s8-vclamp/s8-vclamp-scalar-u4.c",
     ]
 
@@ -39341,12 +48242,11 @@ if (current_cpu == "arm64") {
   }
 
   # This is a target that cannot depend on //base.
-  source_set("s8-vclamp_arm64_standalone") {
+  source_set("s8-vclamp_riscv64_standalone") {
     cflags = []
 
     sources = [
       "src/include/xnnpack.h",
-      "src/src/s8-vclamp/s8-vclamp-neon-u64.c",
       "src/src/s8-vclamp/s8-vclamp-scalar-u4.c",
     ]
 
@@ -39368,7 +48268,7 @@ if (current_cpu == "arm64") {
     }
   }
 
-  source_set("subgraph_arm64") {
+  source_set("subgraph_riscv64") {
     cflags = []
 
     sources = [
@@ -39418,7 +48318,7 @@ if (current_cpu == "arm64") {
   }
 
   # This is a target that cannot depend on //base.
-  source_set("subgraph_arm64_standalone") {
+  source_set("subgraph_riscv64_standalone") {
     cflags = []
 
     sources = [
@@ -39471,7 +48371,7 @@ if (current_cpu == "arm64") {
     }
   }
 
-  source_set("tables_arm64") {
+  source_set("tables_riscv64") {
     cflags = []
 
     sources = [
@@ -39502,7 +48402,7 @@ if (current_cpu == "arm64") {
   }
 
   # This is a target that cannot depend on //base.
-  source_set("tables_arm64_standalone") {
+  source_set("tables_riscv64_standalone") {
     cflags = []
 
     sources = [
@@ -39536,13 +48436,11 @@ if (current_cpu == "arm64") {
     }
   }
 
-  source_set("u8-ibilinear_arm64") {
+  source_set("u8-ibilinear_riscv64") {
     cflags = []
 
     sources = [
       "src/include/xnnpack.h",
-      "src/src/u8-ibilinear/gen/u8-ibilinear-neon-c16.c",
-      "src/src/u8-ibilinear/gen/u8-ibilinear-neon-c8.c",
       "src/src/u8-ibilinear/gen/u8-ibilinear-scalar-c1.c",
     ]
 
@@ -39561,13 +48459,11 @@ if (current_cpu == "arm64") {
   }
 
   # This is a target that cannot depend on //base.
-  source_set("u8-ibilinear_arm64_standalone") {
+  source_set("u8-ibilinear_riscv64_standalone") {
     cflags = []
 
     sources = [
       "src/include/xnnpack.h",
-      "src/src/u8-ibilinear/gen/u8-ibilinear-neon-c16.c",
-      "src/src/u8-ibilinear/gen/u8-ibilinear-neon-c8.c",
       "src/src/u8-ibilinear/gen/u8-ibilinear-scalar-c1.c",
     ]
 
@@ -39589,7 +48485,7 @@ if (current_cpu == "arm64") {
     }
   }
 
-  source_set("u8-lut32norm_arm64") {
+  source_set("u8-lut32norm_riscv64") {
     cflags = []
 
     sources = [
@@ -39612,7 +48508,7 @@ if (current_cpu == "arm64") {
   }
 
   # This is a target that cannot depend on //base.
-  source_set("u8-lut32norm_arm64_standalone") {
+  source_set("u8-lut32norm_riscv64_standalone") {
     cflags = []
 
     sources = [
@@ -39638,12 +48534,11 @@ if (current_cpu == "arm64") {
     }
   }
 
-  source_set("u8-maxpool_arm64") {
+  source_set("u8-maxpool_riscv64") {
     cflags = []
 
     sources = [
       "src/include/xnnpack.h",
-      "src/src/u8-maxpool/gen/u8-maxpool-9p-minmax-neon-u16.c",
       "src/src/u8-maxpool/gen/u8-maxpool-9p-minmax-scalar-u1.c",
     ]
 
@@ -39662,12 +48557,11 @@ if (current_cpu == "arm64") {
   }
 
   # This is a target that cannot depend on //base.
-  source_set("u8-maxpool_arm64_standalone") {
+  source_set("u8-maxpool_riscv64_standalone") {
     cflags = []
 
     sources = [
       "src/include/xnnpack.h",
-      "src/src/u8-maxpool/gen/u8-maxpool-9p-minmax-neon-u16.c",
       "src/src/u8-maxpool/gen/u8-maxpool-9p-minmax-scalar-u1.c",
     ]
 
@@ -39689,14 +48583,12 @@ if (current_cpu == "arm64") {
     }
   }
 
-  source_set("u8-rdminmax_arm64") {
+  source_set("u8-rdminmax_riscv64") {
     cflags = []
 
     sources = [
       "src/include/xnnpack.h",
-      "src/src/u8-rdminmax/gen/u8-rdmax-2p2x-neon-c32.c",
       "src/src/u8-rdminmax/gen/u8-rdmax-2p2x-scalar-c2.c",
-      "src/src/u8-rdminmax/gen/u8-rdmin-2p2x-neon-c32.c",
       "src/src/u8-rdminmax/gen/u8-rdmin-2p2x-scalar-c2.c",
     ]
 
@@ -39715,14 +48607,12 @@ if (current_cpu == "arm64") {
   }
 
   # This is a target that cannot depend on //base.
-  source_set("u8-rdminmax_arm64_standalone") {
+  source_set("u8-rdminmax_riscv64_standalone") {
     cflags = []
 
     sources = [
       "src/include/xnnpack.h",
-      "src/src/u8-rdminmax/gen/u8-rdmax-2p2x-neon-c32.c",
       "src/src/u8-rdminmax/gen/u8-rdmax-2p2x-scalar-c2.c",
-      "src/src/u8-rdminmax/gen/u8-rdmin-2p2x-neon-c32.c",
       "src/src/u8-rdminmax/gen/u8-rdmin-2p2x-scalar-c2.c",
     ]
 
@@ -39744,16 +48634,13 @@ if (current_cpu == "arm64") {
     }
   }
 
-  source_set("u8-rminmax_arm64") {
+  source_set("u8-rminmax_riscv64") {
     cflags = []
 
     sources = [
       "src/include/xnnpack.h",
-      "src/src/u8-rminmax/gen/u8-rmax-neon-u32-acc2.c",
       "src/src/u8-rminmax/gen/u8-rmax-scalar-u2-acc2.c",
-      "src/src/u8-rminmax/gen/u8-rmin-neon-u32-acc2.c",
       "src/src/u8-rminmax/gen/u8-rmin-scalar-u2-acc2.c",
-      "src/src/u8-rminmax/gen/u8-rminmax-neon-u32-acc2.c",
       "src/src/u8-rminmax/gen/u8-rminmax-scalar-u2-acc2.c",
     ]
 
@@ -39772,16 +48659,13 @@ if (current_cpu == "arm64") {
   }
 
   # This is a target that cannot depend on //base.
-  source_set("u8-rminmax_arm64_standalone") {
+  source_set("u8-rminmax_riscv64_standalone") {
     cflags = []
 
     sources = [
       "src/include/xnnpack.h",
-      "src/src/u8-rminmax/gen/u8-rmax-neon-u32-acc2.c",
       "src/src/u8-rminmax/gen/u8-rmax-scalar-u2-acc2.c",
-      "src/src/u8-rminmax/gen/u8-rmin-neon-u32-acc2.c",
       "src/src/u8-rminmax/gen/u8-rmin-scalar-u2-acc2.c",
-      "src/src/u8-rminmax/gen/u8-rminmax-neon-u32-acc2.c",
       "src/src/u8-rminmax/gen/u8-rminmax-scalar-u2-acc2.c",
     ]
 
@@ -39803,13 +48687,15 @@ if (current_cpu == "arm64") {
     }
   }
 
-  source_set("u8-vclamp_arm64") {
-    cflags = []
+  source_set("u8-vclamp_arch=rv64gcv-abi=lp64d") {
+    cflags = [
+      "-mabi=lp64d",
+      "-march=rv64gcv",
+    ]
 
     sources = [
       "src/include/xnnpack.h",
-      "src/src/u8-vclamp/u8-vclamp-neon-u64.c",
-      "src/src/u8-vclamp/u8-vclamp-scalar-u4.c",
+      "src/src/u8-vclamp/gen/u8-vclamp-rvv-u4v.c",
     ]
 
     configs -= [ "//build/config/compiler:chromium_code" ]
@@ -39827,13 +48713,15 @@ if (current_cpu == "arm64") {
   }
 
   # This is a target that cannot depend on //base.
-  source_set("u8-vclamp_arm64_standalone") {
-    cflags = []
+  source_set("u8-vclamp_arch=rv64gcv-abi=lp64d_standalone") {
+    cflags = [
+      "-mabi=lp64d",
+      "-march=rv64gcv",
+    ]
 
     sources = [
       "src/include/xnnpack.h",
-      "src/src/u8-vclamp/u8-vclamp-neon-u64.c",
-      "src/src/u8-vclamp/u8-vclamp-scalar-u4.c",
+      "src/src/u8-vclamp/gen/u8-vclamp-rvv-u4v.c",
     ]
 
     configs -= [ "//build/config/compiler:chromium_code" ]
@@ -39854,13 +48742,12 @@ if (current_cpu == "arm64") {
     }
   }
 
-  source_set("x16-packw_arm64") {
+  source_set("u8-vclamp_riscv64") {
     cflags = []
 
     sources = [
       "src/include/xnnpack.h",
-      "src/src/x16-packw/gen/x16-packw-x16-gemm-goi-neon-ld4lane-u8-prfm.c",
-      "src/src/x16-packw/gen/x16-packw-x8-gemm-goi-neon-ld4lane-u8-prfm.c",
+      "src/src/u8-vclamp/u8-vclamp-scalar-u4.c",
     ]
 
     configs -= [ "//build/config/compiler:chromium_code" ]
@@ -39878,13 +48765,12 @@ if (current_cpu == "arm64") {
   }
 
   # This is a target that cannot depend on //base.
-  source_set("x16-packw_arm64_standalone") {
+  source_set("u8-vclamp_riscv64_standalone") {
     cflags = []
 
     sources = [
       "src/include/xnnpack.h",
-      "src/src/x16-packw/gen/x16-packw-x16-gemm-goi-neon-ld4lane-u8-prfm.c",
-      "src/src/x16-packw/gen/x16-packw-x8-gemm-goi-neon-ld4lane-u8-prfm.c",
+      "src/src/u8-vclamp/u8-vclamp-scalar-u4.c",
     ]
 
     configs -= [ "//build/config/compiler:chromium_code" ]
@@ -39905,13 +48791,12 @@ if (current_cpu == "arm64") {
     }
   }
 
-  source_set("x16-transposec_arm64") {
+  source_set("x16-transposec_riscv64") {
     cflags = []
 
     sources = [
       "src/include/xnnpack.h",
       "src/src/x16-transposec/gen/x16-transposec-2x4-scalar-int.c",
-      "src/src/x16-transposec/gen/x16-transposec-8x8-reuse-dec-zip-neon.c",
     ]
 
     configs -= [ "//build/config/compiler:chromium_code" ]
@@ -39929,13 +48814,12 @@ if (current_cpu == "arm64") {
   }
 
   # This is a target that cannot depend on //base.
-  source_set("x16-transposec_arm64_standalone") {
+  source_set("x16-transposec_riscv64_standalone") {
     cflags = []
 
     sources = [
       "src/include/xnnpack.h",
       "src/src/x16-transposec/gen/x16-transposec-2x4-scalar-int.c",
-      "src/src/x16-transposec/gen/x16-transposec-8x8-reuse-dec-zip-neon.c",
     ]
 
     configs -= [ "//build/config/compiler:chromium_code" ]
@@ -39956,7 +48840,7 @@ if (current_cpu == "arm64") {
     }
   }
 
-  source_set("x16-x32-packw_arm64") {
+  source_set("x16-x32-packw_riscv64") {
     cflags = []
 
     sources = [
@@ -39980,7 +48864,7 @@ if (current_cpu == "arm64") {
   }
 
   # This is a target that cannot depend on //base.
-  source_set("x16-x32-packw_arm64_standalone") {
+  source_set("x16-x32-packw_riscv64_standalone") {
     cflags = []
 
     sources = [
@@ -40007,14 +48891,12 @@ if (current_cpu == "arm64") {
     }
   }
 
-  source_set("x24-transposec_arm64") {
+  source_set("x24-transposec_riscv64") {
     cflags = []
 
     sources = [
       "src/include/xnnpack.h",
       "src/src/x24-transposec/gen/x24-transposec-1x2-scalar.c",
-      "src/src/x24-transposec/x24-transposec-2x2-neon-tbl64.c",
-      "src/src/x24-transposec/x24-transposec-4x4-aarch64-neon-tbl128.c",
     ]
 
     configs -= [ "//build/config/compiler:chromium_code" ]
@@ -40032,14 +48914,12 @@ if (current_cpu == "arm64") {
   }
 
   # This is a target that cannot depend on //base.
-  source_set("x24-transposec_arm64_standalone") {
+  source_set("x24-transposec_riscv64_standalone") {
     cflags = []
 
     sources = [
       "src/include/xnnpack.h",
       "src/src/x24-transposec/gen/x24-transposec-1x2-scalar.c",
-      "src/src/x24-transposec/x24-transposec-2x2-neon-tbl64.c",
-      "src/src/x24-transposec/x24-transposec-4x4-aarch64-neon-tbl128.c",
     ]
 
     configs -= [ "//build/config/compiler:chromium_code" ]
@@ -40060,20 +48940,72 @@ if (current_cpu == "arm64") {
     }
   }
 
-  source_set("x32-packw_arm64") {
+  source_set("x32-packw_arch=rv64gcv-abi=lp64d") {
+    cflags = [
+      "-mabi=lp64d",
+      "-march=rv64gcv",
+    ]
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/x32-packw/gen/x32-packw-x4v-gemm-goi-rvv-u8.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("x32-packw_arch=rv64gcv-abi=lp64d_standalone") {
+    cflags = [
+      "-mabi=lp64d",
+      "-march=rv64gcv",
+    ]
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/x32-packw/gen/x32-packw-x4v-gemm-goi-rvv-u8.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("x32-packw_riscv64") {
     cflags = []
 
     sources = [
       "src/include/xnnpack.h",
       "src/src/x32-packw/gen/x32-packw-x2-gemm-gio-scalar.c",
-      "src/src/x32-packw/gen/x32-packw-x2-gemm-goi-neon-ld2lane-u2-prfm.c",
       "src/src/x32-packw/gen/x32-packw-x2-gemm-goi-scalar-float-u4.c",
       "src/src/x32-packw/gen/x32-packw-x32-gemm-goi-scalar-int-u2.c",
       "src/src/x32-packw/gen/x32-packw-x4-gemm-gio-scalar.c",
       "src/src/x32-packw/gen/x32-packw-x4-gemm-goi-scalar-float-u4.c",
       "src/src/x32-packw/gen/x32-packw-x64-gemm-goi-scalar-int-u2.c",
-      "src/src/x32-packw/gen/x32-packw-x8-gemm-goi-neon-ld4lane-u4-prfm.c",
-      "src/src/x32-packw/gen/x32-packw-x8s4-gemm-goi-neon-ld4lane-u4-prfm.c",
     ]
 
     configs -= [ "//build/config/compiler:chromium_code" ]
@@ -40091,20 +49023,17 @@ if (current_cpu == "arm64") {
   }
 
   # This is a target that cannot depend on //base.
-  source_set("x32-packw_arm64_standalone") {
+  source_set("x32-packw_riscv64_standalone") {
     cflags = []
 
     sources = [
       "src/include/xnnpack.h",
       "src/src/x32-packw/gen/x32-packw-x2-gemm-gio-scalar.c",
-      "src/src/x32-packw/gen/x32-packw-x2-gemm-goi-neon-ld2lane-u2-prfm.c",
       "src/src/x32-packw/gen/x32-packw-x2-gemm-goi-scalar-float-u4.c",
       "src/src/x32-packw/gen/x32-packw-x32-gemm-goi-scalar-int-u2.c",
       "src/src/x32-packw/gen/x32-packw-x4-gemm-gio-scalar.c",
       "src/src/x32-packw/gen/x32-packw-x4-gemm-goi-scalar-float-u4.c",
       "src/src/x32-packw/gen/x32-packw-x64-gemm-goi-scalar-int-u2.c",
-      "src/src/x32-packw/gen/x32-packw-x8-gemm-goi-neon-ld4lane-u4-prfm.c",
-      "src/src/x32-packw/gen/x32-packw-x8s4-gemm-goi-neon-ld4lane-u4-prfm.c",
     ]
 
     configs -= [ "//build/config/compiler:chromium_code" ]
@@ -40125,14 +49054,73 @@ if (current_cpu == "arm64") {
     }
   }
 
-  source_set("x32-transposec_arm64") {
+  source_set("x32-transposec_arch=rv64gcv-abi=lp64d") {
+    cflags = [
+      "-mabi=lp64d",
+      "-march=rv64gcv",
+    ]
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/x32-transposec/gen/x32-transposec-16x8-rvv.c",
+      "src/src/x32-transposec/gen/x32-transposec-32x8-rvv.c",
+      "src/src/x32-transposec/gen/x32-transposec-4x4-rvv.c",
+      "src/src/x32-transposec/gen/x32-transposec-8x8-rvv.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("x32-transposec_arch=rv64gcv-abi=lp64d_standalone") {
+    cflags = [
+      "-mabi=lp64d",
+      "-march=rv64gcv",
+    ]
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/x32-transposec/gen/x32-transposec-16x8-rvv.c",
+      "src/src/x32-transposec/gen/x32-transposec-32x8-rvv.c",
+      "src/src/x32-transposec/gen/x32-transposec-4x4-rvv.c",
+      "src/src/x32-transposec/gen/x32-transposec-8x8-rvv.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("x32-transposec_riscv64") {
     cflags = []
 
     sources = [
       "src/include/xnnpack.h",
       "src/src/x32-transposec/gen/x32-transposec-2x4-scalar-int.c",
-      "src/src/x32-transposec/gen/x32-transposec-4x4-reuse-dec-zip-neon.c",
-      "src/src/x32-transposec/x32-transposec-4x4-aarch64-neon-tbl128.c",
     ]
 
     configs -= [ "//build/config/compiler:chromium_code" ]
@@ -40150,14 +49138,12 @@ if (current_cpu == "arm64") {
   }
 
   # This is a target that cannot depend on //base.
-  source_set("x32-transposec_arm64_standalone") {
+  source_set("x32-transposec_riscv64_standalone") {
     cflags = []
 
     sources = [
       "src/include/xnnpack.h",
       "src/src/x32-transposec/gen/x32-transposec-2x4-scalar-int.c",
-      "src/src/x32-transposec/gen/x32-transposec-4x4-reuse-dec-zip-neon.c",
-      "src/src/x32-transposec/x32-transposec-4x4-aarch64-neon-tbl128.c",
     ]
 
     configs -= [ "//build/config/compiler:chromium_code" ]
@@ -40178,12 +49164,11 @@ if (current_cpu == "arm64") {
     }
   }
 
-  source_set("x32-unpool_arm64") {
+  source_set("x32-unpool_riscv64") {
     cflags = []
 
     sources = [
       "src/include/xnnpack.h",
-      "src/src/x32-unpool/x32-unpool-neon.c",
       "src/src/x32-unpool/x32-unpool-scalar.c",
     ]
 
@@ -40202,12 +49187,11 @@ if (current_cpu == "arm64") {
   }
 
   # This is a target that cannot depend on //base.
-  source_set("x32-unpool_arm64_standalone") {
+  source_set("x32-unpool_riscv64_standalone") {
     cflags = []
 
     sources = [
       "src/include/xnnpack.h",
-      "src/src/x32-unpool/x32-unpool-neon.c",
       "src/src/x32-unpool/x32-unpool-scalar.c",
     ]
 
@@ -40229,13 +49213,11 @@ if (current_cpu == "arm64") {
     }
   }
 
-  source_set("x64-transposec_arm64") {
+  source_set("x64-transposec_riscv64") {
     cflags = []
 
     sources = [
       "src/include/xnnpack.h",
-      "src/src/x64-transposec/gen/x64-transposec-2x2-multi-dec-zip-neon.c",
-      "src/src/x64-transposec/gen/x64-transposec-2x2-reuse-dec-zip-neon.c",
       "src/src/x64-transposec/gen/x64-transposec-4x2-scalar-int.c",
     ]
 
@@ -40254,13 +49236,11 @@ if (current_cpu == "arm64") {
   }
 
   # This is a target that cannot depend on //base.
-  source_set("x64-transposec_arm64_standalone") {
+  source_set("x64-transposec_riscv64_standalone") {
     cflags = []
 
     sources = [
       "src/include/xnnpack.h",
-      "src/src/x64-transposec/gen/x64-transposec-2x2-multi-dec-zip-neon.c",
-      "src/src/x64-transposec/gen/x64-transposec-2x2-reuse-dec-zip-neon.c",
       "src/src/x64-transposec/gen/x64-transposec-4x2-scalar-int.c",
     ]
 
@@ -40282,12 +49262,11 @@ if (current_cpu == "arm64") {
     }
   }
 
-  source_set("x8-lut_arm64") {
+  source_set("x8-lut_riscv64") {
     cflags = []
 
     sources = [
       "src/include/xnnpack.h",
-      "src/src/x8-lut/gen/x8-lut-aarch64-neon-tbx128x4-u64.c",
       "src/src/x8-lut/gen/x8-lut-scalar-u4.c",
     ]
 
@@ -40306,12 +49285,11 @@ if (current_cpu == "arm64") {
   }
 
   # This is a target that cannot depend on //base.
-  source_set("x8-lut_arm64_standalone") {
+  source_set("x8-lut_riscv64_standalone") {
     cflags = []
 
     sources = [
       "src/include/xnnpack.h",
-      "src/src/x8-lut/gen/x8-lut-aarch64-neon-tbx128x4-u64.c",
       "src/src/x8-lut/gen/x8-lut-scalar-u4.c",
     ]
 
@@ -40333,12 +49311,11 @@ if (current_cpu == "arm64") {
     }
   }
 
-  source_set("x8-packq_arm64") {
+  source_set("x8-packq_riscv64") {
     cflags = []
 
     sources = [
       "src/include/xnnpack.h",
-      "src/src/x8-packq/x8-packq-aarch64-neon-f32qp8-u2.c",
       "src/src/x8-packq/x8-packq-scalar-f32qp8-u1.c",
     ]
 
@@ -40357,12 +49334,11 @@ if (current_cpu == "arm64") {
   }
 
   # This is a target that cannot depend on //base.
-  source_set("x8-packq_arm64_standalone") {
+  source_set("x8-packq_riscv64_standalone") {
     cflags = []
 
     sources = [
       "src/include/xnnpack.h",
-      "src/src/x8-packq/x8-packq-aarch64-neon-f32qp8-u2.c",
       "src/src/x8-packq/x8-packq-scalar-f32qp8-u1.c",
     ]
 
@@ -40384,7 +49360,7 @@ if (current_cpu == "arm64") {
     }
   }
 
-  source_set("x8-packw_arm64") {
+  source_set("x8-packw_riscv64") {
     cflags = []
 
     sources = [
@@ -40410,7 +49386,7 @@ if (current_cpu == "arm64") {
   }
 
   # This is a target that cannot depend on //base.
-  source_set("x8-packw_arm64_standalone") {
+  source_set("x8-packw_riscv64_standalone") {
     cflags = []
 
     sources = [
@@ -40439,12 +49415,11 @@ if (current_cpu == "arm64") {
     }
   }
 
-  source_set("x8-transposec_arm64") {
+  source_set("x8-transposec_riscv64") {
     cflags = []
 
     sources = [
       "src/include/xnnpack.h",
-      "src/src/x8-transposec/gen/x8-transposec-16x16-reuse-dec-zip-neon.c",
       "src/src/x8-transposec/gen/x8-transposec-2x4-scalar-int.c",
     ]
 
@@ -40463,12 +49438,11 @@ if (current_cpu == "arm64") {
   }
 
   # This is a target that cannot depend on //base.
-  source_set("x8-transposec_arm64_standalone") {
+  source_set("x8-transposec_riscv64_standalone") {
     cflags = []
 
     sources = [
       "src/include/xnnpack.h",
-      "src/src/x8-transposec/gen/x8-transposec-16x16-reuse-dec-zip-neon.c",
       "src/src/x8-transposec/gen/x8-transposec-2x4-scalar-int.c",
     ]
 
@@ -40490,7 +49464,7 @@ if (current_cpu == "arm64") {
     }
   }
 
-  source_set("xx-copy_arm64") {
+  source_set("xx-copy_riscv64") {
     cflags = []
 
     sources = [
@@ -40513,7 +49487,7 @@ if (current_cpu == "arm64") {
   }
 
   # This is a target that cannot depend on //base.
-  source_set("xx-copy_arm64_standalone") {
+  source_set("xx-copy_riscv64_standalone") {
     cflags = []
 
     sources = [
@@ -40539,12 +49513,11 @@ if (current_cpu == "arm64") {
     }
   }
 
-  source_set("xx-fill_arm64") {
+  source_set("xx-fill_riscv64") {
     cflags = []
 
     sources = [
       "src/include/xnnpack.h",
-      "src/src/xx-fill/xx-fill-neon-u64.c",
       "src/src/xx-fill/xx-fill-scalar-u16.c",
     ]
 
@@ -40563,12 +49536,11 @@ if (current_cpu == "arm64") {
   }
 
   # This is a target that cannot depend on //base.
-  source_set("xx-fill_arm64_standalone") {
+  source_set("xx-fill_riscv64_standalone") {
     cflags = []
 
     sources = [
       "src/include/xnnpack.h",
-      "src/src/xx-fill/xx-fill-neon-u64.c",
       "src/src/xx-fill/xx-fill-scalar-u16.c",
     ]
 
@@ -40590,12 +49562,11 @@ if (current_cpu == "arm64") {
     }
   }
 
-  source_set("xx-pad_arm64") {
+  source_set("xx-pad_riscv64") {
     cflags = []
 
     sources = [
       "src/include/xnnpack.h",
-      "src/src/xx-pad/xx-pad-p16-neon-u16.c",
       "src/src/xx-pad/xx-pad-p4-scalar-u16.c",
     ]
 
@@ -40614,12 +49585,11 @@ if (current_cpu == "arm64") {
   }
 
   # This is a target that cannot depend on //base.
-  source_set("xx-pad_arm64_standalone") {
+  source_set("xx-pad_riscv64_standalone") {
     cflags = []
 
     sources = [
       "src/include/xnnpack.h",
-      "src/src/xx-pad/xx-pad-p16-neon-u16.c",
       "src/src/xx-pad/xx-pad-p4-scalar-u16.c",
     ]
 
@@ -40641,7 +49611,7 @@ if (current_cpu == "arm64") {
     }
   }
 
-  source_set("xx-transposev_arm64") {
+  source_set("xx-transposev_riscv64") {
     cflags = []
 
     sources = [
@@ -40664,7 +49634,7 @@ if (current_cpu == "arm64") {
   }
 
   # This is a target that cannot depend on //base.
-  source_set("xx-transposev_arm64_standalone") {
+  source_set("xx-transposev_riscv64_standalone") {
     cflags = []
 
     sources = [
diff --git a/third_party/xnnpack/bazelroot/BUILD b/third_party/xnnpack/bazelroot/BUILD
index a0c9ba693421e..0e5e68c4e903c 100644
--- a/third_party/xnnpack/bazelroot/BUILD
+++ b/third_party/xnnpack/bazelroot/BUILD
@@ -21,6 +21,14 @@ platform(
     ],
 )
 
+platform(
+    name = "linux_riscv64",
+    constraint_values = [
+        "@platforms//os:linux",
+        "@platforms//cpu:riscv64",
+    ],
+)
+
 # A dummy clang toolchain for building them for any arch.
 
 filegroup(name = "empty")
diff --git a/third_party/xnnpack/generate_build_gn.py b/third_party/xnnpack/generate_build_gn.py
index be9462d8e22ce..bfec22c031c79 100644
--- a/third_party/xnnpack/generate_build_gn.py
+++ b/third_party/xnnpack/generate_build_gn.py
@@ -236,7 +236,10 @@ _PLATFORMS = [
     _Platform(gn_cpu='x64', bazel_cpu='k8', bazel_platform='//:linux_x64'),
     _Platform(gn_cpu='arm64',
               bazel_cpu='aarch64',
-              bazel_platform='//:linux_aarch64')
+              bazel_platform='//:linux_aarch64'),
+    _Platform(gn_cpu='riscv64',
+              bazel_cpu='riscv64',
+              bazel_platform='//:linux_riscv64')
 ]
 
 
-- 
2.39.2

